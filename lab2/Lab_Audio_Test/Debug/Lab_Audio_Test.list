
Lab_Audio_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000437c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800466c  0800466c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004674  08004674  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800467c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000d0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000140  20000140  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa9f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002011  00000000  00000000  0002ab3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  0002cb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008c0  00000000  00000000  0002d520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cab  00000000  00000000  0002dde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e064  00000000  00000000  0004fa8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5ac6  00000000  00000000  0005daef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001235b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fe8  00000000  00000000  00123608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044f4 	.word	0x080044f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080044f4 	.word	0x080044f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <init_AudioReset>:
 *  Created on: Dec 13, 2022
 *      Author: ivan
 */
#include "audio.h"

void init_AudioReset() {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2110      	movs	r1, #16
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <init_AudioReset+0x14>)
 800057e:	f000 ff5b 	bl	8001438 <HAL_GPIO_WritePin>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40020c00 	.word	0x40020c00

0800058c <configAudio>:

void configAudio() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af02      	add	r7, sp, #8
	uint8_t bytes[2];
	init_AudioReset();
 8000592:	f7ff ffef 	bl	8000574 <init_AudioReset>

	// Power up sequence
	bytes[0] = 0x02;
 8000596:	2302      	movs	r3, #2
 8000598:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x01;
 800059a:	2301      	movs	r3, #1
 800059c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800059e:	1d3a      	adds	r2, r7, #4
 80005a0:	2364      	movs	r3, #100	; 0x64
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	2302      	movs	r3, #2
 80005a6:	2194      	movs	r1, #148	; 0x94
 80005a8:	486f      	ldr	r0, [pc, #444]	; (8000768 <configAudio+0x1dc>)
 80005aa:	f001 f8a3 	bl	80016f4 <HAL_I2C_Master_Transmit>

	// Initialization sequence
	bytes[0] = 0x00;
 80005ae:	2300      	movs	r3, #0
 80005b0:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x99;
 80005b2:	2399      	movs	r3, #153	; 0x99
 80005b4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80005b6:	1d3a      	adds	r2, r7, #4
 80005b8:	2364      	movs	r3, #100	; 0x64
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2302      	movs	r3, #2
 80005be:	2194      	movs	r1, #148	; 0x94
 80005c0:	4869      	ldr	r0, [pc, #420]	; (8000768 <configAudio+0x1dc>)
 80005c2:	f001 f897 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x47;
 80005c6:	2347      	movs	r3, #71	; 0x47
 80005c8:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x80;
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80005ce:	1d3a      	adds	r2, r7, #4
 80005d0:	2364      	movs	r3, #100	; 0x64
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2302      	movs	r3, #2
 80005d6:	2194      	movs	r1, #148	; 0x94
 80005d8:	4863      	ldr	r0, [pc, #396]	; (8000768 <configAudio+0x1dc>)
 80005da:	f001 f88b 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x32;
 80005de:	2332      	movs	r3, #50	; 0x32
 80005e0:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x80;
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80005e6:	1d3a      	adds	r2, r7, #4
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2302      	movs	r3, #2
 80005ee:	2194      	movs	r1, #148	; 0x94
 80005f0:	485d      	ldr	r0, [pc, #372]	; (8000768 <configAudio+0x1dc>)
 80005f2:	f001 f87f 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x32;
 80005f6:	2332      	movs	r3, #50	; 0x32
 80005f8:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80005fe:	1d3a      	adds	r2, r7, #4
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2302      	movs	r3, #2
 8000606:	2194      	movs	r1, #148	; 0x94
 8000608:	4857      	ldr	r0, [pc, #348]	; (8000768 <configAudio+0x1dc>)
 800060a:	f001 f873 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x00;
 800060e:	2300      	movs	r3, #0
 8000610:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x00;
 8000612:	2300      	movs	r3, #0
 8000614:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000616:	1d3a      	adds	r2, r7, #4
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2302      	movs	r3, #2
 800061e:	2194      	movs	r1, #148	; 0x94
 8000620:	4851      	ldr	r0, [pc, #324]	; (8000768 <configAudio+0x1dc>)
 8000622:	f001 f867 	bl	80016f4 <HAL_I2C_Master_Transmit>

	// CTL registers configuration
	bytes[0] = 0x04;
 8000626:	2304      	movs	r3, #4
 8000628:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0xAF;
 800062a:	23af      	movs	r3, #175	; 0xaf
 800062c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800062e:	1d3a      	adds	r2, r7, #4
 8000630:	2364      	movs	r3, #100	; 0x64
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2302      	movs	r3, #2
 8000636:	2194      	movs	r1, #148	; 0x94
 8000638:	484b      	ldr	r0, [pc, #300]	; (8000768 <configAudio+0x1dc>)
 800063a:	f001 f85b 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x0D;
 800063e:	230d      	movs	r3, #13
 8000640:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x70;
 8000642:	2370      	movs	r3, #112	; 0x70
 8000644:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000646:	1d3a      	adds	r2, r7, #4
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2302      	movs	r3, #2
 800064e:	2194      	movs	r1, #148	; 0x94
 8000650:	4845      	ldr	r0, [pc, #276]	; (8000768 <configAudio+0x1dc>)
 8000652:	f001 f84f 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x05;
 8000656:	2305      	movs	r3, #5
 8000658:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x81;
 800065a:	2381      	movs	r3, #129	; 0x81
 800065c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800065e:	1d3a      	adds	r2, r7, #4
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2302      	movs	r3, #2
 8000666:	2194      	movs	r1, #148	; 0x94
 8000668:	483f      	ldr	r0, [pc, #252]	; (8000768 <configAudio+0x1dc>)
 800066a:	f001 f843 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x06;
 800066e:	2306      	movs	r3, #6
 8000670:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x07;
 8000672:	2307      	movs	r3, #7
 8000674:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000676:	1d3a      	adds	r2, r7, #4
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2302      	movs	r3, #2
 800067e:	2194      	movs	r1, #148	; 0x94
 8000680:	4839      	ldr	r0, [pc, #228]	; (8000768 <configAudio+0x1dc>)
 8000682:	f001 f837 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x0A;
 8000686:	230a      	movs	r3, #10
 8000688:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x00;
 800068a:	2300      	movs	r3, #0
 800068c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800068e:	1d3a      	adds	r2, r7, #4
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2302      	movs	r3, #2
 8000696:	2194      	movs	r1, #148	; 0x94
 8000698:	4833      	ldr	r0, [pc, #204]	; (8000768 <configAudio+0x1dc>)
 800069a:	f001 f82b 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x27;
 800069e:	2327      	movs	r3, #39	; 0x27
 80006a0:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x00;
 80006a2:	2300      	movs	r3, #0
 80006a4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006a6:	1d3a      	adds	r2, r7, #4
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2302      	movs	r3, #2
 80006ae:	2194      	movs	r1, #148	; 0x94
 80006b0:	482d      	ldr	r0, [pc, #180]	; (8000768 <configAudio+0x1dc>)
 80006b2:	f001 f81f 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x1F;
 80006b6:	231f      	movs	r3, #31
 80006b8:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x0F;
 80006ba:	230f      	movs	r3, #15
 80006bc:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	2364      	movs	r3, #100	; 0x64
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2302      	movs	r3, #2
 80006c6:	2194      	movs	r1, #148	; 0x94
 80006c8:	4827      	ldr	r0, [pc, #156]	; (8000768 <configAudio+0x1dc>)
 80006ca:	f001 f813 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x22;
 80006ce:	2322      	movs	r3, #34	; 0x22
 80006d0:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0xC0;
 80006d2:	23c0      	movs	r3, #192	; 0xc0
 80006d4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006d6:	1d3a      	adds	r2, r7, #4
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2302      	movs	r3, #2
 80006de:	2194      	movs	r1, #148	; 0x94
 80006e0:	4821      	ldr	r0, [pc, #132]	; (8000768 <configAudio+0x1dc>)
 80006e2:	f001 f807 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x14;
 80006e6:	2314      	movs	r3, #20
 80006e8:	713b      	strb	r3, [r7, #4]
	bytes[1] = 2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006ee:	1d3a      	adds	r2, r7, #4
 80006f0:	2364      	movs	r3, #100	; 0x64
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2302      	movs	r3, #2
 80006f6:	2194      	movs	r1, #148	; 0x94
 80006f8:	481b      	ldr	r0, [pc, #108]	; (8000768 <configAudio+0x1dc>)
 80006fa:	f000 fffb 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x15;
 80006fe:	2315      	movs	r3, #21
 8000700:	713b      	strb	r3, [r7, #4]
	bytes[1] = 2;
 8000702:	2302      	movs	r3, #2
 8000704:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000706:	1d3a      	adds	r2, r7, #4
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2302      	movs	r3, #2
 800070e:	2194      	movs	r1, #148	; 0x94
 8000710:	4815      	ldr	r0, [pc, #84]	; (8000768 <configAudio+0x1dc>)
 8000712:	f000 ffef 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x20;
 8000716:	2320      	movs	r3, #32
 8000718:	713b      	strb	r3, [r7, #4]
	bytes[1] = 24;
 800071a:	2318      	movs	r3, #24
 800071c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800071e:	1d3a      	adds	r2, r7, #4
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2302      	movs	r3, #2
 8000726:	2194      	movs	r1, #148	; 0x94
 8000728:	480f      	ldr	r0, [pc, #60]	; (8000768 <configAudio+0x1dc>)
 800072a:	f000 ffe3 	bl	80016f4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x21;
 800072e:	2321      	movs	r3, #33	; 0x21
 8000730:	713b      	strb	r3, [r7, #4]
	bytes[1] = 24;
 8000732:	2318      	movs	r3, #24
 8000734:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000736:	1d3a      	adds	r2, r7, #4
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2302      	movs	r3, #2
 800073e:	2194      	movs	r1, #148	; 0x94
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <configAudio+0x1dc>)
 8000742:	f000 ffd7 	bl	80016f4 <HAL_I2C_Master_Transmit>

	// Power up
	bytes[0] = 0x02;
 8000746:	2302      	movs	r3, #2
 8000748:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x9E;
 800074a:	239e      	movs	r3, #158	; 0x9e
 800074c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800074e:	1d3a      	adds	r2, r7, #4
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2302      	movs	r3, #2
 8000756:	2194      	movs	r1, #148	; 0x94
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <configAudio+0x1dc>)
 800075a:	f000 ffcb 	bl	80016f4 <HAL_I2C_Master_Transmit>

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000008c 	.word	0x2000008c

0800076c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2c      	ldr	r2, [pc, #176]	; (800083c <MX_GPIO_Init+0xd0>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a25      	ldr	r2, [pc, #148]	; (800083c <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <MX_GPIO_Init+0xd0>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <MX_GPIO_Init+0xd0>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_GPIO_Init+0xd0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <MX_GPIO_Init+0xd0>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_GPIO_Init+0xd0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2110      	movs	r1, #16
 8000812:	480b      	ldr	r0, [pc, #44]	; (8000840 <MX_GPIO_Init+0xd4>)
 8000814:	f000 fe10 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000818:	2310      	movs	r3, #16
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000820:	2302      	movs	r3, #2
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_GPIO_Init+0xd4>)
 8000830:	f000 fc66 	bl	8001100 <HAL_GPIO_Init>

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020c00 	.word	0x40020c00

08000844 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_I2C1_Init+0x50>)
 800084a:	4a13      	ldr	r2, [pc, #76]	; (8000898 <MX_I2C1_Init+0x54>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_I2C1_Init+0x50>)
 8000850:	4a12      	ldr	r2, [pc, #72]	; (800089c <MX_I2C1_Init+0x58>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_I2C1_Init+0x50>)
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_I2C1_Init+0x50>)
 8000882:	f000 fdf3 	bl	800146c <HAL_I2C_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800088c:	f000 f986 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000008c 	.word	0x2000008c
 8000898:	40005400 	.word	0x40005400
 800089c:	000186a0 	.word	0x000186a0

080008a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a19      	ldr	r2, [pc, #100]	; (8000924 <HAL_I2C_MspInit+0x84>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d12c      	bne.n	800091c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_I2C_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <HAL_I2C_MspInit+0x88>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_I2C_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80008de:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e4:	2312      	movs	r3, #18
 80008e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008f0:	2304      	movs	r3, #4
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	480c      	ldr	r0, [pc, #48]	; (800092c <HAL_I2C_MspInit+0x8c>)
 80008fc:	f000 fc00 	bl	8001100 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_I2C_MspInit+0x88>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_I2C_MspInit+0x88>)
 800090a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800090e:	6413      	str	r3, [r2, #64]	; 0x40
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_I2C_MspInit+0x88>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	; 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40005400 	.word	0x40005400
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400

08000930 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_I2S3_Init+0x54>)
 8000936:	4a14      	ldr	r2, [pc, #80]	; (8000988 <MX_I2S3_Init+0x58>)
 8000938:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_I2S3_Init+0x54>)
 800093c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000940:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_I2S3_Init+0x54>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_I2S3_Init+0x54>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <MX_I2S3_Init+0x54>)
 8000950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000954:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_I2S3_Init+0x54>)
 8000958:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800095c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_I2S3_Init+0x54>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_I2S3_Init+0x54>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_I2S3_Init+0x54>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_I2S3_Init+0x54>)
 8000972:	f001 f9c7 	bl	8001d04 <HAL_I2S_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800097c:	f000 f90e 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000e0 	.word	0x200000e0
 8000988:	40003c00 	.word	0x40003c00

0800098c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08e      	sub	sp, #56	; 0x38
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a31      	ldr	r2, [pc, #196]	; (8000a7c <HAL_I2S_MspInit+0xf0>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d15a      	bne.n	8000a72 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009bc:	2301      	movs	r3, #1
 80009be:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80009c0:	23c0      	movs	r3, #192	; 0xc0
 80009c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fbe7 	bl	80031a0 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80009d8:	f000 f8e0 	bl	8000b9c <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <HAL_I2S_MspInit+0xf4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a26      	ldr	r2, [pc, #152]	; (8000a80 <HAL_I2S_MspInit+0xf4>)
 80009e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <HAL_I2S_MspInit+0xf4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <HAL_I2S_MspInit+0xf4>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <HAL_I2S_MspInit+0xf4>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6313      	str	r3, [r2, #48]	; 0x30
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <HAL_I2S_MspInit+0xf4>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <HAL_I2S_MspInit+0xf4>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <HAL_I2S_MspInit+0xf4>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6313      	str	r3, [r2, #48]	; 0x30
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <HAL_I2S_MspInit+0xf4>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a30:	2310      	movs	r3, #16
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a40:	2306      	movs	r3, #6
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480e      	ldr	r0, [pc, #56]	; (8000a84 <HAL_I2S_MspInit+0xf8>)
 8000a4c:	f000 fb58 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000a50:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a62:	2306      	movs	r3, #6
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <HAL_I2S_MspInit+0xfc>)
 8000a6e:	f000 fb47 	bl	8001100 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a72:	bf00      	nop
 8000a74:	3738      	adds	r7, #56	; 0x38
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40003c00 	.word	0x40003c00
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020800 	.word	0x40020800

08000a8c <main>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
	HAL_Init();
 8000a92:	f000 f9dd 	bl	8000e50 <HAL_Init>
	SystemClock_Config();
 8000a96:	f000 f817 	bl	8000ac8 <SystemClock_Config>
	MX_GPIO_Init();
 8000a9a:	f7ff fe67 	bl	800076c <MX_GPIO_Init>
	MX_I2C1_Init();
 8000a9e:	f7ff fed1 	bl	8000844 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000aa2:	f7ff ff45 	bl	8000930 <MX_I2S3_Init>

	configAudio();
 8000aa6:	f7ff fd71 	bl	800058c <configAudio>
	uint16_t signal;

	while(1) {
		signal = rand();
 8000aaa:	f002 fceb 	bl	8003484 <rand>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	80fb      	strh	r3, [r7, #6]
		HAL_I2S_Transmit(&hi2s3, &signal, 1, 10);
 8000ab4:	1db9      	adds	r1, r7, #6
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <main+0x38>)
 8000abc:	f001 fa62 	bl	8001f84 <HAL_I2S_Transmit>
		signal = rand();
 8000ac0:	e7f3      	b.n	8000aaa <main+0x1e>
 8000ac2:	bf00      	nop
 8000ac4:	200000e0 	.word	0x200000e0

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b094      	sub	sp, #80	; 0x50
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0320 	add.w	r3, r7, #32
 8000ad2:	2230      	movs	r2, #48	; 0x30
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 fccc 	bl	8003474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <SystemClock_Config+0xcc>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <SystemClock_Config+0xcc>)
 8000af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <SystemClock_Config+0xcc>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a21      	ldr	r2, [pc, #132]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b24:	2301      	movs	r3, #1
 8000b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b3c:	23a8      	movs	r3, #168	; 0xa8
 8000b3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b44:	2304      	movs	r3, #4
 8000b46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 0320 	add.w	r3, r7, #32
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 fea3 	bl	8002898 <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b58:	f000 f820 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b60:	2302      	movs	r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2105      	movs	r1, #5
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 f904 	bl	8002d88 <HAL_RCC_ClockConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b86:	f000 f809 	bl	8000b9c <Error_Handler>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3750      	adds	r7, #80	; 0x50
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40007000 	.word	0x40007000

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c44:	f000 f956 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return 1;
 8000c50:	2301      	movs	r3, #1
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_kill>:

int _kill(int pid, int sig)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c66:	f002 fbdb 	bl	8003420 <__errno>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2216      	movs	r2, #22
 8000c6e:	601a      	str	r2, [r3, #0]
  return -1;
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <_exit>:

void _exit (int status)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ffe7 	bl	8000c5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c8e:	e7fe      	b.n	8000c8e <_exit+0x12>

08000c90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e00a      	b.n	8000cb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ca2:	f3af 8000 	nop.w
 8000ca6:	4601      	mov	r1, r0
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	b2ca      	uxtb	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf0      	blt.n	8000ca2 <_read+0x12>
  }

  return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	e009      	b.n	8000cf0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf1      	blt.n	8000cdc <_write+0x12>
  }
  return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_close>:

int _close(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_isatty>:

int _isatty(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f002 fb40 	bl	8003420 <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20020000 	.word	0x20020000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	20000128 	.word	0x20000128
 8000dd4:	20000140 	.word	0x20000140

08000dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e02:	490e      	ldr	r1, [pc, #56]	; (8000e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e18:	4c0b      	ldr	r4, [pc, #44]	; (8000e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e26:	f7ff ffd7 	bl	8000dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f002 faff 	bl	800342c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fe2d 	bl	8000a8c <main>
  bx  lr    
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e40:	0800467c 	.word	0x0800467c
  ldr r2, =_sbss
 8000e44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e48:	20000140 	.word	0x20000140

08000e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <HAL_Init+0x40>)
 8000e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_Init+0x40>)
 8000e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_Init+0x40>)
 8000e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 f90d 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f000 f808 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff fe90 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023c00 	.word	0x40023c00

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f917 	bl	80010e6 <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ed0:	f000 f8ed 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008
 8000f18:	2000012c 	.word	0x2000012c

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	2000012c 	.word	0x2000012c

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001078:	f7ff ff8e 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff47 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff5c 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff8e 	bl	8000fec <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffb0 	bl	8001054 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	e16b      	b.n	80013f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	429a      	cmp	r2, r3
 8001136:	f040 815a 	bne.w	80013ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d005      	beq.n	8001152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114e:	2b02      	cmp	r3, #2
 8001150:	d130      	bne.n	80011b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 0201 	and.w	r2, r3, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d017      	beq.n	80011f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d123      	bne.n	8001244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	69b9      	ldr	r1, [r7, #24]
 8001240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0203 	and.w	r2, r3, #3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80b4 	beq.w	80013ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b60      	ldr	r3, [pc, #384]	; (800140c <HAL_GPIO_Init+0x30c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a5f      	ldr	r2, [pc, #380]	; (800140c <HAL_GPIO_Init+0x30c>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b5d      	ldr	r3, [pc, #372]	; (800140c <HAL_GPIO_Init+0x30c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a2:	4a5b      	ldr	r2, [pc, #364]	; (8001410 <HAL_GPIO_Init+0x310>)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a52      	ldr	r2, [pc, #328]	; (8001414 <HAL_GPIO_Init+0x314>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d02b      	beq.n	8001326 <HAL_GPIO_Init+0x226>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a51      	ldr	r2, [pc, #324]	; (8001418 <HAL_GPIO_Init+0x318>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d025      	beq.n	8001322 <HAL_GPIO_Init+0x222>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a50      	ldr	r2, [pc, #320]	; (800141c <HAL_GPIO_Init+0x31c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d01f      	beq.n	800131e <HAL_GPIO_Init+0x21e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4f      	ldr	r2, [pc, #316]	; (8001420 <HAL_GPIO_Init+0x320>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d019      	beq.n	800131a <HAL_GPIO_Init+0x21a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4e      	ldr	r2, [pc, #312]	; (8001424 <HAL_GPIO_Init+0x324>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x216>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4d      	ldr	r2, [pc, #308]	; (8001428 <HAL_GPIO_Init+0x328>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x212>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_GPIO_Init+0x32c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x20e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4b      	ldr	r2, [pc, #300]	; (8001430 <HAL_GPIO_Init+0x330>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x20a>
 8001306:	2307      	movs	r3, #7
 8001308:	e00e      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800130a:	2308      	movs	r3, #8
 800130c:	e00c      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800130e:	2306      	movs	r3, #6
 8001310:	e00a      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001312:	2305      	movs	r3, #5
 8001314:	e008      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001316:	2304      	movs	r3, #4
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800131a:	2303      	movs	r3, #3
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001326:	2300      	movs	r3, #0
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001338:	4935      	ldr	r1, [pc, #212]	; (8001410 <HAL_GPIO_Init+0x310>)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001346:	4b3b      	ldr	r3, [pc, #236]	; (8001434 <HAL_GPIO_Init+0x334>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136a:	4a32      	ldr	r2, [pc, #200]	; (8001434 <HAL_GPIO_Init+0x334>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001370:	4b30      	ldr	r3, [pc, #192]	; (8001434 <HAL_GPIO_Init+0x334>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001394:	4a27      	ldr	r2, [pc, #156]	; (8001434 <HAL_GPIO_Init+0x334>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <HAL_GPIO_Init+0x334>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013be:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <HAL_GPIO_Init+0x334>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_GPIO_Init+0x334>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e8:	4a12      	ldr	r2, [pc, #72]	; (8001434 <HAL_GPIO_Init+0x334>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b0f      	cmp	r3, #15
 80013f8:	f67f ae90 	bls.w	800111c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40013800 	.word	0x40013800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40021400 	.word	0x40021400
 800142c:	40021800 	.word	0x40021800
 8001430:	40021c00 	.word	0x40021c00
 8001434:	40013c00 	.word	0x40013c00

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	041a      	lsls	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	619a      	str	r2, [r3, #24]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e12b      	b.n	80016d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fa04 	bl	80008a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2224      	movs	r2, #36	; 0x24
 800149c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014d0:	f001 fe52 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 80014d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a81      	ldr	r2, [pc, #516]	; (80016e0 <HAL_I2C_Init+0x274>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d807      	bhi.n	80014f0 <HAL_I2C_Init+0x84>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4a80      	ldr	r2, [pc, #512]	; (80016e4 <HAL_I2C_Init+0x278>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	bf94      	ite	ls
 80014e8:	2301      	movls	r3, #1
 80014ea:	2300      	movhi	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	e006      	b.n	80014fe <HAL_I2C_Init+0x92>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4a7d      	ldr	r2, [pc, #500]	; (80016e8 <HAL_I2C_Init+0x27c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	bf94      	ite	ls
 80014f8:	2301      	movls	r3, #1
 80014fa:	2300      	movhi	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e0e7      	b.n	80016d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4a78      	ldr	r2, [pc, #480]	; (80016ec <HAL_I2C_Init+0x280>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	0c9b      	lsrs	r3, r3, #18
 8001510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	430a      	orrs	r2, r1
 8001524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4a6a      	ldr	r2, [pc, #424]	; (80016e0 <HAL_I2C_Init+0x274>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d802      	bhi.n	8001540 <HAL_I2C_Init+0xd4>
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	3301      	adds	r3, #1
 800153e:	e009      	b.n	8001554 <HAL_I2C_Init+0xe8>
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	4a69      	ldr	r2, [pc, #420]	; (80016f0 <HAL_I2C_Init+0x284>)
 800154c:	fba2 2303 	umull	r2, r3, r2, r3
 8001550:	099b      	lsrs	r3, r3, #6
 8001552:	3301      	adds	r3, #1
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	430b      	orrs	r3, r1
 800155a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001566:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	495c      	ldr	r1, [pc, #368]	; (80016e0 <HAL_I2C_Init+0x274>)
 8001570:	428b      	cmp	r3, r1
 8001572:	d819      	bhi.n	80015a8 <HAL_I2C_Init+0x13c>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	1e59      	subs	r1, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001582:	1c59      	adds	r1, r3, #1
 8001584:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001588:	400b      	ands	r3, r1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00a      	beq.n	80015a4 <HAL_I2C_Init+0x138>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1e59      	subs	r1, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fbb1 f3f3 	udiv	r3, r1, r3
 800159c:	3301      	adds	r3, #1
 800159e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a2:	e051      	b.n	8001648 <HAL_I2C_Init+0x1dc>
 80015a4:	2304      	movs	r3, #4
 80015a6:	e04f      	b.n	8001648 <HAL_I2C_Init+0x1dc>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d111      	bne.n	80015d4 <HAL_I2C_Init+0x168>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	1e58      	subs	r0, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	440b      	add	r3, r1
 80015be:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c2:	3301      	adds	r3, #1
 80015c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bf0c      	ite	eq
 80015cc:	2301      	moveq	r3, #1
 80015ce:	2300      	movne	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	e012      	b.n	80015fa <HAL_I2C_Init+0x18e>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	1e58      	subs	r0, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6859      	ldr	r1, [r3, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	0099      	lsls	r1, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ea:	3301      	adds	r3, #1
 80015ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf0c      	ite	eq
 80015f4:	2301      	moveq	r3, #1
 80015f6:	2300      	movne	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_I2C_Init+0x196>
 80015fe:	2301      	movs	r3, #1
 8001600:	e022      	b.n	8001648 <HAL_I2C_Init+0x1dc>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10e      	bne.n	8001628 <HAL_I2C_Init+0x1bc>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1e58      	subs	r0, r3, #1
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6859      	ldr	r1, [r3, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	440b      	add	r3, r1
 8001618:	fbb0 f3f3 	udiv	r3, r0, r3
 800161c:	3301      	adds	r3, #1
 800161e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001626:	e00f      	b.n	8001648 <HAL_I2C_Init+0x1dc>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1e58      	subs	r0, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	0099      	lsls	r1, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	fbb0 f3f3 	udiv	r3, r0, r3
 800163e:	3301      	adds	r3, #1
 8001640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	6809      	ldr	r1, [r1, #0]
 800164c:	4313      	orrs	r3, r2
 800164e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69da      	ldr	r2, [r3, #28]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001676:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6911      	ldr	r1, [r2, #16]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68d2      	ldr	r2, [r2, #12]
 8001682:	4311      	orrs	r1, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	430b      	orrs	r3, r1
 800168a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2220      	movs	r2, #32
 80016c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	000186a0 	.word	0x000186a0
 80016e4:	001e847f 	.word	0x001e847f
 80016e8:	003d08ff 	.word	0x003d08ff
 80016ec:	431bde83 	.word	0x431bde83
 80016f0:	10624dd3 	.word	0x10624dd3

080016f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	461a      	mov	r2, r3
 8001700:	460b      	mov	r3, r1
 8001702:	817b      	strh	r3, [r7, #10]
 8001704:	4613      	mov	r3, r2
 8001706:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff fc08 	bl	8000f1c <HAL_GetTick>
 800170c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b20      	cmp	r3, #32
 8001718:	f040 80e0 	bne.w	80018dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2319      	movs	r3, #25
 8001722:	2201      	movs	r2, #1
 8001724:	4970      	ldr	r1, [pc, #448]	; (80018e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f000 f964 	bl	80019f4 <I2C_WaitOnFlagUntilTimeout>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001732:	2302      	movs	r3, #2
 8001734:	e0d3      	b.n	80018de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_I2C_Master_Transmit+0x50>
 8001740:	2302      	movs	r3, #2
 8001742:	e0cc      	b.n	80018de <HAL_I2C_Master_Transmit+0x1ea>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b01      	cmp	r3, #1
 8001758:	d007      	beq.n	800176a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0201 	orr.w	r2, r2, #1
 8001768:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001778:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2221      	movs	r2, #33	; 0x21
 800177e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2210      	movs	r2, #16
 8001786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	893a      	ldrh	r2, [r7, #8]
 800179a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4a50      	ldr	r2, [pc, #320]	; (80018ec <HAL_I2C_Master_Transmit+0x1f8>)
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017ac:	8979      	ldrh	r1, [r7, #10]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	6a3a      	ldr	r2, [r7, #32]
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f89c 	bl	80018f0 <I2C_MasterRequestWrite>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e08d      	b.n	80018de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017d8:	e066      	b.n	80018a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	6a39      	ldr	r1, [r7, #32]
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 f9de 	bl	8001ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00d      	beq.n	8001806 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d107      	bne.n	8001802 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001800:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e06b      	b.n	80018de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001820:	b29b      	uxth	r3, r3
 8001822:	3b01      	subs	r3, #1
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182e:	3b01      	subs	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b04      	cmp	r3, #4
 8001842:	d11b      	bne.n	800187c <HAL_I2C_Master_Transmit+0x188>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001848:	2b00      	cmp	r3, #0
 800184a:	d017      	beq.n	800187c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	781a      	ldrb	r2, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001866:	b29b      	uxth	r3, r3
 8001868:	3b01      	subs	r3, #1
 800186a:	b29a      	uxth	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001874:	3b01      	subs	r3, #1
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	6a39      	ldr	r1, [r7, #32]
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f9ce 	bl	8001c22 <I2C_WaitOnBTFFlagUntilTimeout>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00d      	beq.n	80018a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	2b04      	cmp	r3, #4
 8001892:	d107      	bne.n	80018a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e01a      	b.n	80018de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d194      	bne.n	80017da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2220      	movs	r2, #32
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	e000      	b.n	80018de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018dc:	2302      	movs	r3, #2
  }
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	00100002 	.word	0x00100002
 80018ec:	ffff0000 	.word	0xffff0000

080018f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af02      	add	r7, sp, #8
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	460b      	mov	r3, r1
 80018fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b08      	cmp	r3, #8
 800190a:	d006      	beq.n	800191a <I2C_MasterRequestWrite+0x2a>
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d003      	beq.n	800191a <I2C_MasterRequestWrite+0x2a>
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001918:	d108      	bne.n	800192c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e00b      	b.n	8001944 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	2b12      	cmp	r3, #18
 8001932:	d107      	bne.n	8001944 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001942:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f000 f84f 	bl	80019f4 <I2C_WaitOnFlagUntilTimeout>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00d      	beq.n	8001978 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800196a:	d103      	bne.n	8001974 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e035      	b.n	80019e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001980:	d108      	bne.n	8001994 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001982:	897b      	ldrh	r3, [r7, #10]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001990:	611a      	str	r2, [r3, #16]
 8001992:	e01b      	b.n	80019cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001994:	897b      	ldrh	r3, [r7, #10]
 8001996:	11db      	asrs	r3, r3, #7
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f003 0306 	and.w	r3, r3, #6
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	f063 030f 	orn	r3, r3, #15
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	490e      	ldr	r1, [pc, #56]	; (80019ec <I2C_MasterRequestWrite+0xfc>)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f875 	bl	8001aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e010      	b.n	80019e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019c2:	897b      	ldrh	r3, [r7, #10]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4907      	ldr	r1, [pc, #28]	; (80019f0 <I2C_MasterRequestWrite+0x100>)
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f865 	bl	8001aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	00010008 	.word	0x00010008
 80019f0:	00010002 	.word	0x00010002

080019f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a04:	e025      	b.n	8001a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a0c:	d021      	beq.n	8001a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a0e:	f7ff fa85 	bl	8000f1c <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d302      	bcc.n	8001a24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d116      	bne.n	8001a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f043 0220 	orr.w	r2, r3, #32
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e023      	b.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d10d      	bne.n	8001a78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	43da      	mvns	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4013      	ands	r3, r2
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bf0c      	ite	eq
 8001a6e:	2301      	moveq	r3, #1
 8001a70:	2300      	movne	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	e00c      	b.n	8001a92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4013      	ands	r3, r2
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf0c      	ite	eq
 8001a8a:	2301      	moveq	r3, #1
 8001a8c:	2300      	movne	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d0b6      	beq.n	8001a06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ab0:	e051      	b.n	8001b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac0:	d123      	bne.n	8001b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ada:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f043 0204 	orr.w	r2, r3, #4
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e046      	b.n	8001b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b10:	d021      	beq.n	8001b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b12:	f7ff fa03 	bl	8000f1c <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d302      	bcc.n	8001b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d116      	bne.n	8001b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2220      	movs	r2, #32
 8001b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f043 0220 	orr.w	r2, r3, #32
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e020      	b.n	8001b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d10c      	bne.n	8001b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bf14      	ite	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	2300      	moveq	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	e00b      	b.n	8001b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	43da      	mvns	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	4013      	ands	r3, r2
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf14      	ite	ne
 8001b8c:	2301      	movne	r3, #1
 8001b8e:	2300      	moveq	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d18d      	bne.n	8001ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bac:	e02d      	b.n	8001c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 f878 	bl	8001ca4 <I2C_IsAcknowledgeFailed>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e02d      	b.n	8001c1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bc4:	d021      	beq.n	8001c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc6:	f7ff f9a9 	bl	8000f1c <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d302      	bcc.n	8001bdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d116      	bne.n	8001c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f043 0220 	orr.w	r2, r3, #32
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e007      	b.n	8001c1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c14:	2b80      	cmp	r3, #128	; 0x80
 8001c16:	d1ca      	bne.n	8001bae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c2e:	e02d      	b.n	8001c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 f837 	bl	8001ca4 <I2C_IsAcknowledgeFailed>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e02d      	b.n	8001c9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c46:	d021      	beq.n	8001c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c48:	f7ff f968 	bl	8000f1c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d302      	bcc.n	8001c5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d116      	bne.n	8001c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f043 0220 	orr.w	r2, r3, #32
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e007      	b.n	8001c9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d1ca      	bne.n	8001c30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cba:	d11b      	bne.n	8001cf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f043 0204 	orr.w	r2, r3, #4
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e128      	b.n	8001f68 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a90      	ldr	r2, [pc, #576]	; (8001f70 <HAL_I2S_Init+0x26c>)
 8001d2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7fe fe2b 	bl	800098c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d4c:	f023 030f 	bic.w	r3, r3, #15
 8001d50:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2202      	movs	r2, #2
 8001d58:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d060      	beq.n	8001e24 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001d6a:	2310      	movs	r3, #16
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e001      	b.n	8001d74 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001d70:	2320      	movs	r3, #32
 8001d72:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d802      	bhi.n	8001d82 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f001 faee 	bl	8003364 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d88:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d92:	d125      	bne.n	8001de0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d010      	beq.n	8001dbe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	461a      	mov	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	3305      	adds	r3, #5
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	e01f      	b.n	8001dfe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	3305      	adds	r3, #5
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	e00e      	b.n	8001dfe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	461a      	mov	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	3305      	adds	r3, #5
 8001dfc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4a5c      	ldr	r2, [pc, #368]	; (8001f74 <HAL_I2S_Init+0x270>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	08db      	lsrs	r3, r3, #3
 8001e08:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	e003      	b.n	8001e2c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d902      	bls.n	8001e38 <HAL_I2S_Init+0x134>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	2bff      	cmp	r3, #255	; 0xff
 8001e36:	d907      	bls.n	8001e48 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	f043 0210 	orr.w	r2, r3, #16
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e08f      	b.n	8001f68 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	ea42 0103 	orr.w	r1, r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e66:	f023 030f 	bic.w	r3, r3, #15
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6851      	ldr	r1, [r2, #4]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6892      	ldr	r2, [r2, #8]
 8001e72:	4311      	orrs	r1, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	68d2      	ldr	r2, [r2, #12]
 8001e78:	4311      	orrs	r1, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6992      	ldr	r2, [r2, #24]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e8a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d161      	bne.n	8001f58 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a38      	ldr	r2, [pc, #224]	; (8001f78 <HAL_I2S_Init+0x274>)
 8001e98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a37      	ldr	r2, [pc, #220]	; (8001f7c <HAL_I2S_Init+0x278>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d101      	bne.n	8001ea8 <HAL_I2S_Init+0x1a4>
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <HAL_I2S_Init+0x27c>)
 8001ea6:	e001      	b.n	8001eac <HAL_I2S_Init+0x1a8>
 8001ea8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	4932      	ldr	r1, [pc, #200]	; (8001f7c <HAL_I2S_Init+0x278>)
 8001eb4:	428a      	cmp	r2, r1
 8001eb6:	d101      	bne.n	8001ebc <HAL_I2S_Init+0x1b8>
 8001eb8:	4a31      	ldr	r2, [pc, #196]	; (8001f80 <HAL_I2S_Init+0x27c>)
 8001eba:	e001      	b.n	8001ec0 <HAL_I2S_Init+0x1bc>
 8001ebc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ec0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ec4:	f023 030f 	bic.w	r3, r3, #15
 8001ec8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a2b      	ldr	r2, [pc, #172]	; (8001f7c <HAL_I2S_Init+0x278>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <HAL_I2S_Init+0x1d4>
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <HAL_I2S_Init+0x27c>)
 8001ed6:	e001      	b.n	8001edc <HAL_I2S_Init+0x1d8>
 8001ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001edc:	2202      	movs	r2, #2
 8001ede:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a25      	ldr	r2, [pc, #148]	; (8001f7c <HAL_I2S_Init+0x278>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d101      	bne.n	8001eee <HAL_I2S_Init+0x1ea>
 8001eea:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <HAL_I2S_Init+0x27c>)
 8001eec:	e001      	b.n	8001ef2 <HAL_I2S_Init+0x1ee>
 8001eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001efe:	d003      	beq.n	8001f08 <HAL_I2S_Init+0x204>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d103      	bne.n	8001f10 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	e001      	b.n	8001f14 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f32:	4313      	orrs	r3, r2
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	897b      	ldrh	r3, [r7, #10]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f40:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <HAL_I2S_Init+0x278>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d101      	bne.n	8001f50 <HAL_I2S_Init+0x24c>
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_I2S_Init+0x27c>)
 8001f4e:	e001      	b.n	8001f54 <HAL_I2S_Init+0x250>
 8001f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f54:	897a      	ldrh	r2, [r7, #10]
 8001f56:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	0800225d 	.word	0x0800225d
 8001f74:	cccccccd 	.word	0xcccccccd
 8001f78:	080023e5 	.word	0x080023e5
 8001f7c:	40003800 	.word	0x40003800
 8001f80:	40003400 	.word	0x40003400

08001f84 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	4613      	mov	r3, r2
 8001f92:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_I2S_Transmit+0x1c>
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0dc      	b.n	800215e <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_I2S_Transmit+0x30>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e0d4      	b.n	800215e <HAL_I2S_Transmit+0x1da>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d005      	beq.n	8001fd4 <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e0c4      	b.n	800215e <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d002      	beq.n	8002000 <HAL_I2S_Transmit+0x7c>
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d10a      	bne.n	8002016 <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002014:	e005      	b.n	8002022 <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	88fa      	ldrh	r2, [r7, #6]
 800201a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	88fa      	ldrh	r2, [r7, #6]
 8002020:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002038:	d007      	beq.n	800204a <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69da      	ldr	r2, [r3, #28]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002048:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2201      	movs	r2, #1
 800204e:	2102      	movs	r1, #2
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f98d 	bl	8002370 <I2S_WaitFlagStateUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d04e      	beq.n	80020fa <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e070      	b.n	800215e <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	881a      	ldrh	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	1c9a      	adds	r2, r3, #2
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2201      	movs	r2, #1
 80020a4:	2102      	movs	r1, #2
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f962 	bl	8002370 <I2S_WaitFlagStateUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00f      	beq.n	80020d2 <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e045      	b.n	800215e <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d10c      	bne.n	80020fa <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f043 0204 	orr.w	r2, r3, #4
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->TxXferCount > 0U)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1bb      	bne.n	800207c <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002118:	d118      	bne.n	800214c <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	2180      	movs	r1, #128	; 0x80
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f925 	bl	8002370 <I2S_WaitFlagStateUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00f      	beq.n	800214c <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	f043 0201 	orr.w	r2, r3, #1
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e008      	b.n	800215e <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	881a      	ldrh	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	1c9a      	adds	r2, r3, #2
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10e      	bne.n	80021f6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ffb8 	bl	8002166 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	b292      	uxth	r2, r2
 8002212:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	1c9a      	adds	r2, r3, #2
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10e      	bne.n	8002254 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002244:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ff93 	bl	800217a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b04      	cmp	r3, #4
 8002276:	d13a      	bne.n	80022ee <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b01      	cmp	r3, #1
 8002280:	d109      	bne.n	8002296 <I2S_IRQHandler+0x3a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228c:	2b40      	cmp	r3, #64	; 0x40
 800228e:	d102      	bne.n	8002296 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ffb4 	bl	80021fe <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229c:	2b40      	cmp	r3, #64	; 0x40
 800229e:	d126      	bne.n	80022ee <I2S_IRQHandler+0x92>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d11f      	bne.n	80022ee <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022bc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	f043 0202 	orr.w	r2, r3, #2
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff50 	bl	800218e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d136      	bne.n	8002368 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b02      	cmp	r3, #2
 8002302:	d109      	bne.n	8002318 <I2S_IRQHandler+0xbc>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230e:	2b80      	cmp	r3, #128	; 0x80
 8002310:	d102      	bne.n	8002318 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ff45 	bl	80021a2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b08      	cmp	r3, #8
 8002320:	d122      	bne.n	8002368 <I2S_IRQHandler+0x10c>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b20      	cmp	r3, #32
 800232e:	d11b      	bne.n	8002368 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800233e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f043 0204 	orr.w	r2, r3, #4
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ff13 	bl	800218e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002368:	bf00      	nop
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002380:	f7fe fdcc 	bl	8000f1c <HAL_GetTick>
 8002384:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002386:	e018      	b.n	80023ba <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800238e:	d014      	beq.n	80023ba <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002390:	f7fe fdc4 	bl	8000f1c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d902      	bls.n	80023a6 <I2S_WaitFlagStateUntilTimeout+0x36>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e00f      	b.n	80023da <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4013      	ands	r3, r2
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	bf0c      	ite	eq
 80023ca:	2301      	moveq	r3, #1
 80023cc:	2300      	movne	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d1d7      	bne.n	8002388 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a92      	ldr	r2, [pc, #584]	; (8002644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80023fe:	4b92      	ldr	r3, [pc, #584]	; (8002648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002400:	e001      	b.n	8002406 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a8b      	ldr	r2, [pc, #556]	; (8002644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800241c:	4b8a      	ldr	r3, [pc, #552]	; (8002648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800241e:	e001      	b.n	8002424 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002420:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002430:	d004      	beq.n	800243c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	f040 8099 	bne.w	800256e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b02      	cmp	r3, #2
 8002444:	d107      	bne.n	8002456 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f925 	bl	80026a0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d107      	bne.n	8002470 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f9c8 	bl	8002800 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002476:	2b40      	cmp	r3, #64	; 0x40
 8002478:	d13a      	bne.n	80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d035      	beq.n	80024f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a6e      	ldr	r2, [pc, #440]	; (8002644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800248e:	4b6e      	ldr	r3, [pc, #440]	; (8002648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002490:	e001      	b.n	8002496 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4969      	ldr	r1, [pc, #420]	; (8002644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800249e:	428b      	cmp	r3, r1
 80024a0:	d101      	bne.n	80024a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80024a2:	4b69      	ldr	r3, [pc, #420]	; (8002648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024a4:	e001      	b.n	80024aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80024a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f043 0202 	orr.w	r2, r3, #2
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff fe4f 	bl	800218e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	f040 80c3 	bne.w	8002682 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80bd 	beq.w	8002682 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002516:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a49      	ldr	r2, [pc, #292]	; (8002644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d101      	bne.n	8002526 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002524:	e001      	b.n	800252a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002526:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4944      	ldr	r1, [pc, #272]	; (8002644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002532:	428b      	cmp	r3, r1
 8002534:	d101      	bne.n	800253a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002536:	4b44      	ldr	r3, [pc, #272]	; (8002648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002538:	e001      	b.n	800253e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800253a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800253e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002542:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002544:	2300      	movs	r3, #0
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f043 0204 	orr.w	r2, r3, #4
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fe11 	bl	800218e <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800256c:	e089      	b.n	8002682 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b02      	cmp	r3, #2
 8002576:	d107      	bne.n	8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f8be 	bl	8002704 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b01      	cmp	r3, #1
 8002590:	d107      	bne.n	80025a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f8fd 	bl	800279c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a8:	2b40      	cmp	r3, #64	; 0x40
 80025aa:	d12f      	bne.n	800260c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d02a      	beq.n	800260c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d101      	bne.n	80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025d2:	e001      	b.n	80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80025d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4919      	ldr	r1, [pc, #100]	; (8002644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d101      	bne.n	80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025e6:	e001      	b.n	80025ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80025e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f043 0202 	orr.w	r2, r3, #2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fdc1 	bl	800218e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b08      	cmp	r3, #8
 8002614:	d136      	bne.n	8002684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b00      	cmp	r3, #0
 800261e:	d031      	beq.n	8002684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a07      	ldr	r2, [pc, #28]	; (8002644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800262c:	e001      	b.n	8002632 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800262e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4902      	ldr	r1, [pc, #8]	; (8002644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800263a:	428b      	cmp	r3, r1
 800263c:	d106      	bne.n	800264c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800263e:	4b02      	ldr	r3, [pc, #8]	; (8002648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002640:	e006      	b.n	8002650 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002642:	bf00      	nop
 8002644:	40003800 	.word	0x40003800
 8002648:	40003400 	.word	0x40003400
 800264c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002650:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002654:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002664:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f043 0204 	orr.w	r2, r3, #4
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff fd87 	bl	800218e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002680:	e000      	b.n	8002684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002682:	bf00      	nop
}
 8002684:	bf00      	nop
 8002686:	3720      	adds	r7, #32
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	1c99      	adds	r1, r3, #2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6251      	str	r1, [r2, #36]	; 0x24
 80026b2:	881a      	ldrh	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d113      	bne.n	80026fa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d106      	bne.n	80026fa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ffc9 	bl	800268c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	1c99      	adds	r1, r3, #2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6251      	str	r1, [r2, #36]	; 0x24
 8002716:	8819      	ldrh	r1, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <I2SEx_TxISR_I2SExt+0x90>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <I2SEx_TxISR_I2SExt+0x22>
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <I2SEx_TxISR_I2SExt+0x94>)
 8002724:	e001      	b.n	800272a <I2SEx_TxISR_I2SExt+0x26>
 8002726:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800272a:	460a      	mov	r2, r1
 800272c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d121      	bne.n	800278a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a12      	ldr	r2, [pc, #72]	; (8002794 <I2SEx_TxISR_I2SExt+0x90>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <I2SEx_TxISR_I2SExt+0x50>
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <I2SEx_TxISR_I2SExt+0x94>)
 8002752:	e001      	b.n	8002758 <I2SEx_TxISR_I2SExt+0x54>
 8002754:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	490d      	ldr	r1, [pc, #52]	; (8002794 <I2SEx_TxISR_I2SExt+0x90>)
 8002760:	428b      	cmp	r3, r1
 8002762:	d101      	bne.n	8002768 <I2SEx_TxISR_I2SExt+0x64>
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <I2SEx_TxISR_I2SExt+0x94>)
 8002766:	e001      	b.n	800276c <I2SEx_TxISR_I2SExt+0x68>
 8002768:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800276c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002770:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d106      	bne.n	800278a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff81 	bl	800268c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40003800 	.word	0x40003800
 8002798:	40003400 	.word	0x40003400

0800279c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68d8      	ldr	r0, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	1c99      	adds	r1, r3, #2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80027b4:	b282      	uxth	r2, r0
 80027b6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d113      	bne.n	80027f8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027de:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ff4a 	bl	800268c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a20      	ldr	r2, [pc, #128]	; (8002890 <I2SEx_RxISR_I2SExt+0x90>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d101      	bne.n	8002816 <I2SEx_RxISR_I2SExt+0x16>
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <I2SEx_RxISR_I2SExt+0x94>)
 8002814:	e001      	b.n	800281a <I2SEx_RxISR_I2SExt+0x1a>
 8002816:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800281a:	68d8      	ldr	r0, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	1c99      	adds	r1, r3, #2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002826:	b282      	uxth	r2, r0
 8002828:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d121      	bne.n	8002886 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a12      	ldr	r2, [pc, #72]	; (8002890 <I2SEx_RxISR_I2SExt+0x90>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d101      	bne.n	8002850 <I2SEx_RxISR_I2SExt+0x50>
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <I2SEx_RxISR_I2SExt+0x94>)
 800284e:	e001      	b.n	8002854 <I2SEx_RxISR_I2SExt+0x54>
 8002850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	490d      	ldr	r1, [pc, #52]	; (8002890 <I2SEx_RxISR_I2SExt+0x90>)
 800285c:	428b      	cmp	r3, r1
 800285e:	d101      	bne.n	8002864 <I2SEx_RxISR_I2SExt+0x64>
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <I2SEx_RxISR_I2SExt+0x94>)
 8002862:	e001      	b.n	8002868 <I2SEx_RxISR_I2SExt+0x68>
 8002864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002868:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800286c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d106      	bne.n	8002886 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff03 	bl	800268c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40003800 	.word	0x40003800
 8002894:	40003400 	.word	0x40003400

08002898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e267      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d075      	beq.n	80029a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028b6:	4b88      	ldr	r3, [pc, #544]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d00c      	beq.n	80028dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c2:	4b85      	ldr	r3, [pc, #532]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d112      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ce:	4b82      	ldr	r3, [pc, #520]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028da:	d10b      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	4b7e      	ldr	r3, [pc, #504]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05b      	beq.n	80029a0 <HAL_RCC_OscConfig+0x108>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d157      	bne.n	80029a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e242      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fc:	d106      	bne.n	800290c <HAL_RCC_OscConfig+0x74>
 80028fe:	4b76      	ldr	r3, [pc, #472]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a75      	ldr	r2, [pc, #468]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x98>
 8002916:	4b70      	ldr	r3, [pc, #448]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6f      	ldr	r2, [pc, #444]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a6c      	ldr	r2, [pc, #432]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 8002930:	4b69      	ldr	r3, [pc, #420]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a68      	ldr	r2, [pc, #416]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b66      	ldr	r3, [pc, #408]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a65      	ldr	r2, [pc, #404]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe fae4 	bl	8000f1c <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002958:	f7fe fae0 	bl	8000f1c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e207      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b5b      	ldr	r3, [pc, #364]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0xc0>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe fad0 	bl	8000f1c <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002980:	f7fe facc 	bl	8000f1c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e1f3      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0xe8>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d063      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ae:	4b4a      	ldr	r3, [pc, #296]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d11c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c6:	4b44      	ldr	r3, [pc, #272]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_RCC_OscConfig+0x152>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e1c7      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4937      	ldr	r1, [pc, #220]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	e03a      	b.n	8002a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a08:	4b34      	ldr	r3, [pc, #208]	; (8002adc <HAL_RCC_OscConfig+0x244>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fa85 	bl	8000f1c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a16:	f7fe fa81 	bl	8000f1c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1a8      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4925      	ldr	r1, [pc, #148]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_OscConfig+0x244>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fa64 	bl	8000f1c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a58:	f7fe fa60 	bl	8000f1c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e187      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d036      	beq.n	8002af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d016      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_RCC_OscConfig+0x248>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fe fa44 	bl	8000f1c <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a98:	f7fe fa40 	bl	8000f1c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e167      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x200>
 8002ab6:	e01b      	b.n	8002af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_OscConfig+0x248>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7fe fa2d 	bl	8000f1c <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	e00e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fa29 	bl	8000f1c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d907      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e150      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	42470000 	.word	0x42470000
 8002ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	4b88      	ldr	r3, [pc, #544]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ea      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8097 	beq.w	8002c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b02:	4b81      	ldr	r3, [pc, #516]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	4b7d      	ldr	r3, [pc, #500]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a7c      	ldr	r2, [pc, #496]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b7a      	ldr	r3, [pc, #488]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	4b77      	ldr	r3, [pc, #476]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d118      	bne.n	8002b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3a:	4b74      	ldr	r3, [pc, #464]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a73      	ldr	r2, [pc, #460]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b46:	f7fe f9e9 	bl	8000f1c <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4e:	f7fe f9e5 	bl	8000f1c <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e10c      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	4b6a      	ldr	r3, [pc, #424]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_OscConfig+0x2ea>
 8002b74:	4b64      	ldr	r3, [pc, #400]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a63      	ldr	r2, [pc, #396]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	e01c      	b.n	8002bbc <HAL_RCC_OscConfig+0x324>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x30c>
 8002b8a:	4b5f      	ldr	r3, [pc, #380]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a5e      	ldr	r2, [pc, #376]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
 8002b96:	4b5c      	ldr	r3, [pc, #368]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	4a5b      	ldr	r2, [pc, #364]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0x324>
 8002ba4:	4b58      	ldr	r3, [pc, #352]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	4a57      	ldr	r2, [pc, #348]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb0:	4b55      	ldr	r3, [pc, #340]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	4a54      	ldr	r2, [pc, #336]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	f023 0304 	bic.w	r3, r3, #4
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe f9aa 	bl	8000f1c <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bcc:	f7fe f9a6 	bl	8000f1c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0cb      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	4b49      	ldr	r3, [pc, #292]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0ee      	beq.n	8002bcc <HAL_RCC_OscConfig+0x334>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf0:	f7fe f994 	bl	8000f1c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7fe f990 	bl	8000f1c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0b5      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1ee      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c20:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	4a38      	ldr	r2, [pc, #224]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80a1 	beq.w	8002d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c36:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d05c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d141      	bne.n	8002cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe f964 	bl	8000f1c <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe f960 	bl	8000f1c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e087      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	491b      	ldr	r1, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7fe f939 	bl	8000f1c <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cae:	f7fe f935 	bl	8000f1c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e05c      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x416>
 8002ccc:	e054      	b.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe f922 	bl	8000f1c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe f91e 	bl	8000f1c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e045      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x444>
 8002cfa:	e03d      	b.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e038      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_RCC_OscConfig+0x4ec>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d028      	beq.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d121      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d11a      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d111      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800

08002d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0cc      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d90c      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0b8      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ddc:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df4:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	494d      	ldr	r1, [pc, #308]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d044      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d119      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e07f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e067      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4934      	ldr	r1, [pc, #208]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e78:	f7fe f850 	bl	8000f1c <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7fe f84c 	bl	8000f1c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e04f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 020c 	and.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1eb      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d20c      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e032      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4916      	ldr	r1, [pc, #88]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	490e      	ldr	r1, [pc, #56]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f0e:	f000 f821 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	490a      	ldr	r1, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	5ccb      	ldrb	r3, [r1, r3]
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd ffb0 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00
 8002f44:	40023800 	.word	0x40023800
 8002f48:	0800450c 	.word	0x0800450c
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	20000004 	.word	0x20000004

08002f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f58:	b094      	sub	sp, #80	; 0x50
 8002f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f60:	2300      	movs	r3, #0
 8002f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f64:	2300      	movs	r3, #0
 8002f66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f6c:	4b79      	ldr	r3, [pc, #484]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d00d      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x40>
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	f200 80e1 	bhi.w	8003140 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x34>
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f86:	e0db      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b73      	ldr	r3, [pc, #460]	; (8003158 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f8c:	e0db      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f8e:	4b73      	ldr	r3, [pc, #460]	; (800315c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f92:	e0d8      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f94:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f9e:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d063      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002faa:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	099b      	lsrs	r3, r3, #6
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fc6:	4622      	mov	r2, r4
 8002fc8:	462b      	mov	r3, r5
 8002fca:	f04f 0000 	mov.w	r0, #0
 8002fce:	f04f 0100 	mov.w	r1, #0
 8002fd2:	0159      	lsls	r1, r3, #5
 8002fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd8:	0150      	lsls	r0, r2, #5
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4621      	mov	r1, r4
 8002fe0:	1a51      	subs	r1, r2, r1
 8002fe2:	6139      	str	r1, [r7, #16]
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff8:	4659      	mov	r1, fp
 8002ffa:	018b      	lsls	r3, r1, #6
 8002ffc:	4651      	mov	r1, sl
 8002ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003002:	4651      	mov	r1, sl
 8003004:	018a      	lsls	r2, r1, #6
 8003006:	4651      	mov	r1, sl
 8003008:	ebb2 0801 	subs.w	r8, r2, r1
 800300c:	4659      	mov	r1, fp
 800300e:	eb63 0901 	sbc.w	r9, r3, r1
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800301e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003026:	4690      	mov	r8, r2
 8003028:	4699      	mov	r9, r3
 800302a:	4623      	mov	r3, r4
 800302c:	eb18 0303 	adds.w	r3, r8, r3
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	462b      	mov	r3, r5
 8003034:	eb49 0303 	adc.w	r3, r9, r3
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003046:	4629      	mov	r1, r5
 8003048:	024b      	lsls	r3, r1, #9
 800304a:	4621      	mov	r1, r4
 800304c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003050:	4621      	mov	r1, r4
 8003052:	024a      	lsls	r2, r1, #9
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305a:	2200      	movs	r2, #0
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
 800305e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003060:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003064:	f7fd f904 	bl	8000270 <__aeabi_uldivmod>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4613      	mov	r3, r2
 800306e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003070:	e058      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003072:	4b38      	ldr	r3, [pc, #224]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	2200      	movs	r2, #0
 800307a:	4618      	mov	r0, r3
 800307c:	4611      	mov	r1, r2
 800307e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003082:	623b      	str	r3, [r7, #32]
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
 8003088:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800308c:	4642      	mov	r2, r8
 800308e:	464b      	mov	r3, r9
 8003090:	f04f 0000 	mov.w	r0, #0
 8003094:	f04f 0100 	mov.w	r1, #0
 8003098:	0159      	lsls	r1, r3, #5
 800309a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800309e:	0150      	lsls	r0, r2, #5
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4641      	mov	r1, r8
 80030a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030aa:	4649      	mov	r1, r9
 80030ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030c4:	ebb2 040a 	subs.w	r4, r2, sl
 80030c8:	eb63 050b 	sbc.w	r5, r3, fp
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	00eb      	lsls	r3, r5, #3
 80030d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030da:	00e2      	lsls	r2, r4, #3
 80030dc:	4614      	mov	r4, r2
 80030de:	461d      	mov	r5, r3
 80030e0:	4643      	mov	r3, r8
 80030e2:	18e3      	adds	r3, r4, r3
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	464b      	mov	r3, r9
 80030e8:	eb45 0303 	adc.w	r3, r5, r3
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030fa:	4629      	mov	r1, r5
 80030fc:	028b      	lsls	r3, r1, #10
 80030fe:	4621      	mov	r1, r4
 8003100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003104:	4621      	mov	r1, r4
 8003106:	028a      	lsls	r2, r1, #10
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310e:	2200      	movs	r2, #0
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	61fa      	str	r2, [r7, #28]
 8003114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003118:	f7fd f8aa 	bl	8000270 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	3301      	adds	r3, #1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800313e:	e002      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetSysClockFreq+0x204>)
 8003142:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003148:	4618      	mov	r0, r3
 800314a:	3750      	adds	r7, #80	; 0x50
 800314c:	46bd      	mov	sp, r7
 800314e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	00f42400 	.word	0x00f42400
 800315c:	007a1200 	.word	0x007a1200

08003160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_RCC_GetHCLKFreq+0x14>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000000 	.word	0x20000000

08003178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800317c:	f7ff fff0 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	0a9b      	lsrs	r3, r3, #10
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4903      	ldr	r1, [pc, #12]	; (800319c <HAL_RCC_GetPCLK1Freq+0x24>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40023800 	.word	0x40023800
 800319c:	0800451c 	.word	0x0800451c

080031a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d035      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031c8:	4b62      	ldr	r3, [pc, #392]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031ce:	f7fd fea5 	bl	8000f1c <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031d6:	f7fd fea1 	bl	8000f1c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e0b0      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031e8:	4b5b      	ldr	r3, [pc, #364]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f0      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	019a      	lsls	r2, r3, #6
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	071b      	lsls	r3, r3, #28
 8003200:	4955      	ldr	r1, [pc, #340]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003208:	4b52      	ldr	r3, [pc, #328]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800320e:	f7fd fe85 	bl	8000f1c <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003216:	f7fd fe81 	bl	8000f1c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e090      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003228:	4b4b      	ldr	r3, [pc, #300]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8083 	beq.w	8003348 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	4b44      	ldr	r3, [pc, #272]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4a43      	ldr	r2, [pc, #268]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003250:	6413      	str	r3, [r2, #64]	; 0x40
 8003252:	4b41      	ldr	r3, [pc, #260]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800325e:	4b3f      	ldr	r3, [pc, #252]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a3e      	ldr	r2, [pc, #248]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800326a:	f7fd fe57 	bl	8000f1c <HAL_GetTick>
 800326e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003272:	f7fd fe53 	bl	8000f1c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e062      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003284:	4b35      	ldr	r3, [pc, #212]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003290:	4b31      	ldr	r3, [pc, #196]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003298:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d02f      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d028      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032ae:	4b2a      	ldr	r3, [pc, #168]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032b8:	4b29      	ldr	r3, [pc, #164]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032be:	4b28      	ldr	r3, [pc, #160]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80032c4:	4a24      	ldr	r2, [pc, #144]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032ca:	4b23      	ldr	r3, [pc, #140]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d114      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fd fe21 	bl	8000f1c <HAL_GetTick>
 80032da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fd fe1d 	bl	8000f1c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e02a      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ee      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800330c:	d10d      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800330e:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800331e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003322:	490d      	ldr	r1, [pc, #52]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003324:	4313      	orrs	r3, r2
 8003326:	608b      	str	r3, [r1, #8]
 8003328:	e005      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003330:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003334:	6093      	str	r3, [r2, #8]
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003338:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003342:	4905      	ldr	r1, [pc, #20]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003344:	4313      	orrs	r3, r2
 8003346:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	42470068 	.word	0x42470068
 8003358:	40023800 	.word	0x40023800
 800335c:	40007000 	.word	0x40007000
 8003360:	42470e40 	.word	0x42470e40

08003364 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d13e      	bne.n	8003400 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003382:	4b23      	ldr	r3, [pc, #140]	; (8003410 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d12f      	bne.n	80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003398:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800339a:	617b      	str	r3, [r7, #20]
          break;
 800339c:	e02f      	b.n	80033fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800339e:	4b1c      	ldr	r3, [pc, #112]	; (8003410 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033aa:	d108      	bne.n	80033be <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033ac:	4b18      	ldr	r3, [pc, #96]	; (8003410 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b4:	4a18      	ldr	r2, [pc, #96]	; (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80033b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	e007      	b.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033be:	4b14      	ldr	r3, [pc, #80]	; (8003410 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c6:	4a15      	ldr	r2, [pc, #84]	; (800341c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d4:	099b      	lsrs	r3, r3, #6
 80033d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	fb02 f303 	mul.w	r3, r2, r3
 80033e0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80033e2:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e8:	0f1b      	lsrs	r3, r3, #28
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	617b      	str	r3, [r7, #20]
          break;
 80033f6:	e002      	b.n	80033fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
          break;
 80033fc:	bf00      	nop
        }
      }
      break;
 80033fe:	bf00      	nop
    }
  }
  return frequency;
 8003400:	697b      	ldr	r3, [r7, #20]
}
 8003402:	4618      	mov	r0, r3
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800
 8003414:	00bb8000 	.word	0x00bb8000
 8003418:	007a1200 	.word	0x007a1200
 800341c:	00f42400 	.word	0x00f42400

08003420 <__errno>:
 8003420:	4b01      	ldr	r3, [pc, #4]	; (8003428 <__errno+0x8>)
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	2000000c 	.word	0x2000000c

0800342c <__libc_init_array>:
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	4d0d      	ldr	r5, [pc, #52]	; (8003464 <__libc_init_array+0x38>)
 8003430:	4c0d      	ldr	r4, [pc, #52]	; (8003468 <__libc_init_array+0x3c>)
 8003432:	1b64      	subs	r4, r4, r5
 8003434:	10a4      	asrs	r4, r4, #2
 8003436:	2600      	movs	r6, #0
 8003438:	42a6      	cmp	r6, r4
 800343a:	d109      	bne.n	8003450 <__libc_init_array+0x24>
 800343c:	4d0b      	ldr	r5, [pc, #44]	; (800346c <__libc_init_array+0x40>)
 800343e:	4c0c      	ldr	r4, [pc, #48]	; (8003470 <__libc_init_array+0x44>)
 8003440:	f001 f858 	bl	80044f4 <_init>
 8003444:	1b64      	subs	r4, r4, r5
 8003446:	10a4      	asrs	r4, r4, #2
 8003448:	2600      	movs	r6, #0
 800344a:	42a6      	cmp	r6, r4
 800344c:	d105      	bne.n	800345a <__libc_init_array+0x2e>
 800344e:	bd70      	pop	{r4, r5, r6, pc}
 8003450:	f855 3b04 	ldr.w	r3, [r5], #4
 8003454:	4798      	blx	r3
 8003456:	3601      	adds	r6, #1
 8003458:	e7ee      	b.n	8003438 <__libc_init_array+0xc>
 800345a:	f855 3b04 	ldr.w	r3, [r5], #4
 800345e:	4798      	blx	r3
 8003460:	3601      	adds	r6, #1
 8003462:	e7f2      	b.n	800344a <__libc_init_array+0x1e>
 8003464:	08004674 	.word	0x08004674
 8003468:	08004674 	.word	0x08004674
 800346c:	08004674 	.word	0x08004674
 8003470:	08004678 	.word	0x08004678

08003474 <memset>:
 8003474:	4402      	add	r2, r0
 8003476:	4603      	mov	r3, r0
 8003478:	4293      	cmp	r3, r2
 800347a:	d100      	bne.n	800347e <memset+0xa>
 800347c:	4770      	bx	lr
 800347e:	f803 1b01 	strb.w	r1, [r3], #1
 8003482:	e7f9      	b.n	8003478 <memset+0x4>

08003484 <rand>:
 8003484:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <rand+0x5c>)
 8003486:	b510      	push	{r4, lr}
 8003488:	681c      	ldr	r4, [r3, #0]
 800348a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800348c:	b9b3      	cbnz	r3, 80034bc <rand+0x38>
 800348e:	2018      	movs	r0, #24
 8003490:	f000 f866 	bl	8003560 <malloc>
 8003494:	63a0      	str	r0, [r4, #56]	; 0x38
 8003496:	b928      	cbnz	r0, 80034a4 <rand+0x20>
 8003498:	4602      	mov	r2, r0
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <rand+0x60>)
 800349c:	4812      	ldr	r0, [pc, #72]	; (80034e8 <rand+0x64>)
 800349e:	214e      	movs	r1, #78	; 0x4e
 80034a0:	f000 f82e 	bl	8003500 <__assert_func>
 80034a4:	4a11      	ldr	r2, [pc, #68]	; (80034ec <rand+0x68>)
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <rand+0x6c>)
 80034a8:	e9c0 2300 	strd	r2, r3, [r0]
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <rand+0x70>)
 80034ae:	6083      	str	r3, [r0, #8]
 80034b0:	230b      	movs	r3, #11
 80034b2:	8183      	strh	r3, [r0, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	2300      	movs	r3, #0
 80034b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80034bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80034be:	4a0e      	ldr	r2, [pc, #56]	; (80034f8 <rand+0x74>)
 80034c0:	6920      	ldr	r0, [r4, #16]
 80034c2:	6963      	ldr	r3, [r4, #20]
 80034c4:	490d      	ldr	r1, [pc, #52]	; (80034fc <rand+0x78>)
 80034c6:	4342      	muls	r2, r0
 80034c8:	fb01 2203 	mla	r2, r1, r3, r2
 80034cc:	fba0 0101 	umull	r0, r1, r0, r1
 80034d0:	1c43      	adds	r3, r0, #1
 80034d2:	eb42 0001 	adc.w	r0, r2, r1
 80034d6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80034da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80034de:	bd10      	pop	{r4, pc}
 80034e0:	2000000c 	.word	0x2000000c
 80034e4:	08004528 	.word	0x08004528
 80034e8:	0800453f 	.word	0x0800453f
 80034ec:	abcd330e 	.word	0xabcd330e
 80034f0:	e66d1234 	.word	0xe66d1234
 80034f4:	0005deec 	.word	0x0005deec
 80034f8:	5851f42d 	.word	0x5851f42d
 80034fc:	4c957f2d 	.word	0x4c957f2d

08003500 <__assert_func>:
 8003500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003502:	4614      	mov	r4, r2
 8003504:	461a      	mov	r2, r3
 8003506:	4b09      	ldr	r3, [pc, #36]	; (800352c <__assert_func+0x2c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4605      	mov	r5, r0
 800350c:	68d8      	ldr	r0, [r3, #12]
 800350e:	b14c      	cbz	r4, 8003524 <__assert_func+0x24>
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <__assert_func+0x30>)
 8003512:	9100      	str	r1, [sp, #0]
 8003514:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003518:	4906      	ldr	r1, [pc, #24]	; (8003534 <__assert_func+0x34>)
 800351a:	462b      	mov	r3, r5
 800351c:	f000 f80e 	bl	800353c <fiprintf>
 8003520:	f000 fcc4 	bl	8003eac <abort>
 8003524:	4b04      	ldr	r3, [pc, #16]	; (8003538 <__assert_func+0x38>)
 8003526:	461c      	mov	r4, r3
 8003528:	e7f3      	b.n	8003512 <__assert_func+0x12>
 800352a:	bf00      	nop
 800352c:	2000000c 	.word	0x2000000c
 8003530:	0800459a 	.word	0x0800459a
 8003534:	080045a7 	.word	0x080045a7
 8003538:	080045d5 	.word	0x080045d5

0800353c <fiprintf>:
 800353c:	b40e      	push	{r1, r2, r3}
 800353e:	b503      	push	{r0, r1, lr}
 8003540:	4601      	mov	r1, r0
 8003542:	ab03      	add	r3, sp, #12
 8003544:	4805      	ldr	r0, [pc, #20]	; (800355c <fiprintf+0x20>)
 8003546:	f853 2b04 	ldr.w	r2, [r3], #4
 800354a:	6800      	ldr	r0, [r0, #0]
 800354c:	9301      	str	r3, [sp, #4]
 800354e:	f000 f919 	bl	8003784 <_vfiprintf_r>
 8003552:	b002      	add	sp, #8
 8003554:	f85d eb04 	ldr.w	lr, [sp], #4
 8003558:	b003      	add	sp, #12
 800355a:	4770      	bx	lr
 800355c:	2000000c 	.word	0x2000000c

08003560 <malloc>:
 8003560:	4b02      	ldr	r3, [pc, #8]	; (800356c <malloc+0xc>)
 8003562:	4601      	mov	r1, r0
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	f000 b86f 	b.w	8003648 <_malloc_r>
 800356a:	bf00      	nop
 800356c:	2000000c 	.word	0x2000000c

08003570 <_free_r>:
 8003570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003572:	2900      	cmp	r1, #0
 8003574:	d044      	beq.n	8003600 <_free_r+0x90>
 8003576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800357a:	9001      	str	r0, [sp, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f1a1 0404 	sub.w	r4, r1, #4
 8003582:	bfb8      	it	lt
 8003584:	18e4      	addlt	r4, r4, r3
 8003586:	f000 feb9 	bl	80042fc <__malloc_lock>
 800358a:	4a1e      	ldr	r2, [pc, #120]	; (8003604 <_free_r+0x94>)
 800358c:	9801      	ldr	r0, [sp, #4]
 800358e:	6813      	ldr	r3, [r2, #0]
 8003590:	b933      	cbnz	r3, 80035a0 <_free_r+0x30>
 8003592:	6063      	str	r3, [r4, #4]
 8003594:	6014      	str	r4, [r2, #0]
 8003596:	b003      	add	sp, #12
 8003598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800359c:	f000 beb4 	b.w	8004308 <__malloc_unlock>
 80035a0:	42a3      	cmp	r3, r4
 80035a2:	d908      	bls.n	80035b6 <_free_r+0x46>
 80035a4:	6825      	ldr	r5, [r4, #0]
 80035a6:	1961      	adds	r1, r4, r5
 80035a8:	428b      	cmp	r3, r1
 80035aa:	bf01      	itttt	eq
 80035ac:	6819      	ldreq	r1, [r3, #0]
 80035ae:	685b      	ldreq	r3, [r3, #4]
 80035b0:	1949      	addeq	r1, r1, r5
 80035b2:	6021      	streq	r1, [r4, #0]
 80035b4:	e7ed      	b.n	8003592 <_free_r+0x22>
 80035b6:	461a      	mov	r2, r3
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	b10b      	cbz	r3, 80035c0 <_free_r+0x50>
 80035bc:	42a3      	cmp	r3, r4
 80035be:	d9fa      	bls.n	80035b6 <_free_r+0x46>
 80035c0:	6811      	ldr	r1, [r2, #0]
 80035c2:	1855      	adds	r5, r2, r1
 80035c4:	42a5      	cmp	r5, r4
 80035c6:	d10b      	bne.n	80035e0 <_free_r+0x70>
 80035c8:	6824      	ldr	r4, [r4, #0]
 80035ca:	4421      	add	r1, r4
 80035cc:	1854      	adds	r4, r2, r1
 80035ce:	42a3      	cmp	r3, r4
 80035d0:	6011      	str	r1, [r2, #0]
 80035d2:	d1e0      	bne.n	8003596 <_free_r+0x26>
 80035d4:	681c      	ldr	r4, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	6053      	str	r3, [r2, #4]
 80035da:	4421      	add	r1, r4
 80035dc:	6011      	str	r1, [r2, #0]
 80035de:	e7da      	b.n	8003596 <_free_r+0x26>
 80035e0:	d902      	bls.n	80035e8 <_free_r+0x78>
 80035e2:	230c      	movs	r3, #12
 80035e4:	6003      	str	r3, [r0, #0]
 80035e6:	e7d6      	b.n	8003596 <_free_r+0x26>
 80035e8:	6825      	ldr	r5, [r4, #0]
 80035ea:	1961      	adds	r1, r4, r5
 80035ec:	428b      	cmp	r3, r1
 80035ee:	bf04      	itt	eq
 80035f0:	6819      	ldreq	r1, [r3, #0]
 80035f2:	685b      	ldreq	r3, [r3, #4]
 80035f4:	6063      	str	r3, [r4, #4]
 80035f6:	bf04      	itt	eq
 80035f8:	1949      	addeq	r1, r1, r5
 80035fa:	6021      	streq	r1, [r4, #0]
 80035fc:	6054      	str	r4, [r2, #4]
 80035fe:	e7ca      	b.n	8003596 <_free_r+0x26>
 8003600:	b003      	add	sp, #12
 8003602:	bd30      	pop	{r4, r5, pc}
 8003604:	20000130 	.word	0x20000130

08003608 <sbrk_aligned>:
 8003608:	b570      	push	{r4, r5, r6, lr}
 800360a:	4e0e      	ldr	r6, [pc, #56]	; (8003644 <sbrk_aligned+0x3c>)
 800360c:	460c      	mov	r4, r1
 800360e:	6831      	ldr	r1, [r6, #0]
 8003610:	4605      	mov	r5, r0
 8003612:	b911      	cbnz	r1, 800361a <sbrk_aligned+0x12>
 8003614:	f000 fb7a 	bl	8003d0c <_sbrk_r>
 8003618:	6030      	str	r0, [r6, #0]
 800361a:	4621      	mov	r1, r4
 800361c:	4628      	mov	r0, r5
 800361e:	f000 fb75 	bl	8003d0c <_sbrk_r>
 8003622:	1c43      	adds	r3, r0, #1
 8003624:	d00a      	beq.n	800363c <sbrk_aligned+0x34>
 8003626:	1cc4      	adds	r4, r0, #3
 8003628:	f024 0403 	bic.w	r4, r4, #3
 800362c:	42a0      	cmp	r0, r4
 800362e:	d007      	beq.n	8003640 <sbrk_aligned+0x38>
 8003630:	1a21      	subs	r1, r4, r0
 8003632:	4628      	mov	r0, r5
 8003634:	f000 fb6a 	bl	8003d0c <_sbrk_r>
 8003638:	3001      	adds	r0, #1
 800363a:	d101      	bne.n	8003640 <sbrk_aligned+0x38>
 800363c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003640:	4620      	mov	r0, r4
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	20000134 	.word	0x20000134

08003648 <_malloc_r>:
 8003648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800364c:	1ccd      	adds	r5, r1, #3
 800364e:	f025 0503 	bic.w	r5, r5, #3
 8003652:	3508      	adds	r5, #8
 8003654:	2d0c      	cmp	r5, #12
 8003656:	bf38      	it	cc
 8003658:	250c      	movcc	r5, #12
 800365a:	2d00      	cmp	r5, #0
 800365c:	4607      	mov	r7, r0
 800365e:	db01      	blt.n	8003664 <_malloc_r+0x1c>
 8003660:	42a9      	cmp	r1, r5
 8003662:	d905      	bls.n	8003670 <_malloc_r+0x28>
 8003664:	230c      	movs	r3, #12
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	2600      	movs	r6, #0
 800366a:	4630      	mov	r0, r6
 800366c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003670:	4e2e      	ldr	r6, [pc, #184]	; (800372c <_malloc_r+0xe4>)
 8003672:	f000 fe43 	bl	80042fc <__malloc_lock>
 8003676:	6833      	ldr	r3, [r6, #0]
 8003678:	461c      	mov	r4, r3
 800367a:	bb34      	cbnz	r4, 80036ca <_malloc_r+0x82>
 800367c:	4629      	mov	r1, r5
 800367e:	4638      	mov	r0, r7
 8003680:	f7ff ffc2 	bl	8003608 <sbrk_aligned>
 8003684:	1c43      	adds	r3, r0, #1
 8003686:	4604      	mov	r4, r0
 8003688:	d14d      	bne.n	8003726 <_malloc_r+0xde>
 800368a:	6834      	ldr	r4, [r6, #0]
 800368c:	4626      	mov	r6, r4
 800368e:	2e00      	cmp	r6, #0
 8003690:	d140      	bne.n	8003714 <_malloc_r+0xcc>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	4631      	mov	r1, r6
 8003696:	4638      	mov	r0, r7
 8003698:	eb04 0803 	add.w	r8, r4, r3
 800369c:	f000 fb36 	bl	8003d0c <_sbrk_r>
 80036a0:	4580      	cmp	r8, r0
 80036a2:	d13a      	bne.n	800371a <_malloc_r+0xd2>
 80036a4:	6821      	ldr	r1, [r4, #0]
 80036a6:	3503      	adds	r5, #3
 80036a8:	1a6d      	subs	r5, r5, r1
 80036aa:	f025 0503 	bic.w	r5, r5, #3
 80036ae:	3508      	adds	r5, #8
 80036b0:	2d0c      	cmp	r5, #12
 80036b2:	bf38      	it	cc
 80036b4:	250c      	movcc	r5, #12
 80036b6:	4629      	mov	r1, r5
 80036b8:	4638      	mov	r0, r7
 80036ba:	f7ff ffa5 	bl	8003608 <sbrk_aligned>
 80036be:	3001      	adds	r0, #1
 80036c0:	d02b      	beq.n	800371a <_malloc_r+0xd2>
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	442b      	add	r3, r5
 80036c6:	6023      	str	r3, [r4, #0]
 80036c8:	e00e      	b.n	80036e8 <_malloc_r+0xa0>
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	1b52      	subs	r2, r2, r5
 80036ce:	d41e      	bmi.n	800370e <_malloc_r+0xc6>
 80036d0:	2a0b      	cmp	r2, #11
 80036d2:	d916      	bls.n	8003702 <_malloc_r+0xba>
 80036d4:	1961      	adds	r1, r4, r5
 80036d6:	42a3      	cmp	r3, r4
 80036d8:	6025      	str	r5, [r4, #0]
 80036da:	bf18      	it	ne
 80036dc:	6059      	strne	r1, [r3, #4]
 80036de:	6863      	ldr	r3, [r4, #4]
 80036e0:	bf08      	it	eq
 80036e2:	6031      	streq	r1, [r6, #0]
 80036e4:	5162      	str	r2, [r4, r5]
 80036e6:	604b      	str	r3, [r1, #4]
 80036e8:	4638      	mov	r0, r7
 80036ea:	f104 060b 	add.w	r6, r4, #11
 80036ee:	f000 fe0b 	bl	8004308 <__malloc_unlock>
 80036f2:	f026 0607 	bic.w	r6, r6, #7
 80036f6:	1d23      	adds	r3, r4, #4
 80036f8:	1af2      	subs	r2, r6, r3
 80036fa:	d0b6      	beq.n	800366a <_malloc_r+0x22>
 80036fc:	1b9b      	subs	r3, r3, r6
 80036fe:	50a3      	str	r3, [r4, r2]
 8003700:	e7b3      	b.n	800366a <_malloc_r+0x22>
 8003702:	6862      	ldr	r2, [r4, #4]
 8003704:	42a3      	cmp	r3, r4
 8003706:	bf0c      	ite	eq
 8003708:	6032      	streq	r2, [r6, #0]
 800370a:	605a      	strne	r2, [r3, #4]
 800370c:	e7ec      	b.n	80036e8 <_malloc_r+0xa0>
 800370e:	4623      	mov	r3, r4
 8003710:	6864      	ldr	r4, [r4, #4]
 8003712:	e7b2      	b.n	800367a <_malloc_r+0x32>
 8003714:	4634      	mov	r4, r6
 8003716:	6876      	ldr	r6, [r6, #4]
 8003718:	e7b9      	b.n	800368e <_malloc_r+0x46>
 800371a:	230c      	movs	r3, #12
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	4638      	mov	r0, r7
 8003720:	f000 fdf2 	bl	8004308 <__malloc_unlock>
 8003724:	e7a1      	b.n	800366a <_malloc_r+0x22>
 8003726:	6025      	str	r5, [r4, #0]
 8003728:	e7de      	b.n	80036e8 <_malloc_r+0xa0>
 800372a:	bf00      	nop
 800372c:	20000130 	.word	0x20000130

08003730 <__sfputc_r>:
 8003730:	6893      	ldr	r3, [r2, #8]
 8003732:	3b01      	subs	r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	b410      	push	{r4}
 8003738:	6093      	str	r3, [r2, #8]
 800373a:	da08      	bge.n	800374e <__sfputc_r+0x1e>
 800373c:	6994      	ldr	r4, [r2, #24]
 800373e:	42a3      	cmp	r3, r4
 8003740:	db01      	blt.n	8003746 <__sfputc_r+0x16>
 8003742:	290a      	cmp	r1, #10
 8003744:	d103      	bne.n	800374e <__sfputc_r+0x1e>
 8003746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800374a:	f000 baef 	b.w	8003d2c <__swbuf_r>
 800374e:	6813      	ldr	r3, [r2, #0]
 8003750:	1c58      	adds	r0, r3, #1
 8003752:	6010      	str	r0, [r2, #0]
 8003754:	7019      	strb	r1, [r3, #0]
 8003756:	4608      	mov	r0, r1
 8003758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800375c:	4770      	bx	lr

0800375e <__sfputs_r>:
 800375e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003760:	4606      	mov	r6, r0
 8003762:	460f      	mov	r7, r1
 8003764:	4614      	mov	r4, r2
 8003766:	18d5      	adds	r5, r2, r3
 8003768:	42ac      	cmp	r4, r5
 800376a:	d101      	bne.n	8003770 <__sfputs_r+0x12>
 800376c:	2000      	movs	r0, #0
 800376e:	e007      	b.n	8003780 <__sfputs_r+0x22>
 8003770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003774:	463a      	mov	r2, r7
 8003776:	4630      	mov	r0, r6
 8003778:	f7ff ffda 	bl	8003730 <__sfputc_r>
 800377c:	1c43      	adds	r3, r0, #1
 800377e:	d1f3      	bne.n	8003768 <__sfputs_r+0xa>
 8003780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003784 <_vfiprintf_r>:
 8003784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003788:	460d      	mov	r5, r1
 800378a:	b09d      	sub	sp, #116	; 0x74
 800378c:	4614      	mov	r4, r2
 800378e:	4698      	mov	r8, r3
 8003790:	4606      	mov	r6, r0
 8003792:	b118      	cbz	r0, 800379c <_vfiprintf_r+0x18>
 8003794:	6983      	ldr	r3, [r0, #24]
 8003796:	b90b      	cbnz	r3, 800379c <_vfiprintf_r+0x18>
 8003798:	f000 fcaa 	bl	80040f0 <__sinit>
 800379c:	4b89      	ldr	r3, [pc, #548]	; (80039c4 <_vfiprintf_r+0x240>)
 800379e:	429d      	cmp	r5, r3
 80037a0:	d11b      	bne.n	80037da <_vfiprintf_r+0x56>
 80037a2:	6875      	ldr	r5, [r6, #4]
 80037a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037a6:	07d9      	lsls	r1, r3, #31
 80037a8:	d405      	bmi.n	80037b6 <_vfiprintf_r+0x32>
 80037aa:	89ab      	ldrh	r3, [r5, #12]
 80037ac:	059a      	lsls	r2, r3, #22
 80037ae:	d402      	bmi.n	80037b6 <_vfiprintf_r+0x32>
 80037b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037b2:	f000 fd3b 	bl	800422c <__retarget_lock_acquire_recursive>
 80037b6:	89ab      	ldrh	r3, [r5, #12]
 80037b8:	071b      	lsls	r3, r3, #28
 80037ba:	d501      	bpl.n	80037c0 <_vfiprintf_r+0x3c>
 80037bc:	692b      	ldr	r3, [r5, #16]
 80037be:	b9eb      	cbnz	r3, 80037fc <_vfiprintf_r+0x78>
 80037c0:	4629      	mov	r1, r5
 80037c2:	4630      	mov	r0, r6
 80037c4:	f000 fb04 	bl	8003dd0 <__swsetup_r>
 80037c8:	b1c0      	cbz	r0, 80037fc <_vfiprintf_r+0x78>
 80037ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037cc:	07dc      	lsls	r4, r3, #31
 80037ce:	d50e      	bpl.n	80037ee <_vfiprintf_r+0x6a>
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037d4:	b01d      	add	sp, #116	; 0x74
 80037d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037da:	4b7b      	ldr	r3, [pc, #492]	; (80039c8 <_vfiprintf_r+0x244>)
 80037dc:	429d      	cmp	r5, r3
 80037de:	d101      	bne.n	80037e4 <_vfiprintf_r+0x60>
 80037e0:	68b5      	ldr	r5, [r6, #8]
 80037e2:	e7df      	b.n	80037a4 <_vfiprintf_r+0x20>
 80037e4:	4b79      	ldr	r3, [pc, #484]	; (80039cc <_vfiprintf_r+0x248>)
 80037e6:	429d      	cmp	r5, r3
 80037e8:	bf08      	it	eq
 80037ea:	68f5      	ldreq	r5, [r6, #12]
 80037ec:	e7da      	b.n	80037a4 <_vfiprintf_r+0x20>
 80037ee:	89ab      	ldrh	r3, [r5, #12]
 80037f0:	0598      	lsls	r0, r3, #22
 80037f2:	d4ed      	bmi.n	80037d0 <_vfiprintf_r+0x4c>
 80037f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037f6:	f000 fd1a 	bl	800422e <__retarget_lock_release_recursive>
 80037fa:	e7e9      	b.n	80037d0 <_vfiprintf_r+0x4c>
 80037fc:	2300      	movs	r3, #0
 80037fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003800:	2320      	movs	r3, #32
 8003802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003806:	f8cd 800c 	str.w	r8, [sp, #12]
 800380a:	2330      	movs	r3, #48	; 0x30
 800380c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80039d0 <_vfiprintf_r+0x24c>
 8003810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003814:	f04f 0901 	mov.w	r9, #1
 8003818:	4623      	mov	r3, r4
 800381a:	469a      	mov	sl, r3
 800381c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003820:	b10a      	cbz	r2, 8003826 <_vfiprintf_r+0xa2>
 8003822:	2a25      	cmp	r2, #37	; 0x25
 8003824:	d1f9      	bne.n	800381a <_vfiprintf_r+0x96>
 8003826:	ebba 0b04 	subs.w	fp, sl, r4
 800382a:	d00b      	beq.n	8003844 <_vfiprintf_r+0xc0>
 800382c:	465b      	mov	r3, fp
 800382e:	4622      	mov	r2, r4
 8003830:	4629      	mov	r1, r5
 8003832:	4630      	mov	r0, r6
 8003834:	f7ff ff93 	bl	800375e <__sfputs_r>
 8003838:	3001      	adds	r0, #1
 800383a:	f000 80aa 	beq.w	8003992 <_vfiprintf_r+0x20e>
 800383e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003840:	445a      	add	r2, fp
 8003842:	9209      	str	r2, [sp, #36]	; 0x24
 8003844:	f89a 3000 	ldrb.w	r3, [sl]
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80a2 	beq.w	8003992 <_vfiprintf_r+0x20e>
 800384e:	2300      	movs	r3, #0
 8003850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003858:	f10a 0a01 	add.w	sl, sl, #1
 800385c:	9304      	str	r3, [sp, #16]
 800385e:	9307      	str	r3, [sp, #28]
 8003860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003864:	931a      	str	r3, [sp, #104]	; 0x68
 8003866:	4654      	mov	r4, sl
 8003868:	2205      	movs	r2, #5
 800386a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800386e:	4858      	ldr	r0, [pc, #352]	; (80039d0 <_vfiprintf_r+0x24c>)
 8003870:	f7fc fcae 	bl	80001d0 <memchr>
 8003874:	9a04      	ldr	r2, [sp, #16]
 8003876:	b9d8      	cbnz	r0, 80038b0 <_vfiprintf_r+0x12c>
 8003878:	06d1      	lsls	r1, r2, #27
 800387a:	bf44      	itt	mi
 800387c:	2320      	movmi	r3, #32
 800387e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003882:	0713      	lsls	r3, r2, #28
 8003884:	bf44      	itt	mi
 8003886:	232b      	movmi	r3, #43	; 0x2b
 8003888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800388c:	f89a 3000 	ldrb.w	r3, [sl]
 8003890:	2b2a      	cmp	r3, #42	; 0x2a
 8003892:	d015      	beq.n	80038c0 <_vfiprintf_r+0x13c>
 8003894:	9a07      	ldr	r2, [sp, #28]
 8003896:	4654      	mov	r4, sl
 8003898:	2000      	movs	r0, #0
 800389a:	f04f 0c0a 	mov.w	ip, #10
 800389e:	4621      	mov	r1, r4
 80038a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038a4:	3b30      	subs	r3, #48	; 0x30
 80038a6:	2b09      	cmp	r3, #9
 80038a8:	d94e      	bls.n	8003948 <_vfiprintf_r+0x1c4>
 80038aa:	b1b0      	cbz	r0, 80038da <_vfiprintf_r+0x156>
 80038ac:	9207      	str	r2, [sp, #28]
 80038ae:	e014      	b.n	80038da <_vfiprintf_r+0x156>
 80038b0:	eba0 0308 	sub.w	r3, r0, r8
 80038b4:	fa09 f303 	lsl.w	r3, r9, r3
 80038b8:	4313      	orrs	r3, r2
 80038ba:	9304      	str	r3, [sp, #16]
 80038bc:	46a2      	mov	sl, r4
 80038be:	e7d2      	b.n	8003866 <_vfiprintf_r+0xe2>
 80038c0:	9b03      	ldr	r3, [sp, #12]
 80038c2:	1d19      	adds	r1, r3, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	9103      	str	r1, [sp, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bfbb      	ittet	lt
 80038cc:	425b      	neglt	r3, r3
 80038ce:	f042 0202 	orrlt.w	r2, r2, #2
 80038d2:	9307      	strge	r3, [sp, #28]
 80038d4:	9307      	strlt	r3, [sp, #28]
 80038d6:	bfb8      	it	lt
 80038d8:	9204      	strlt	r2, [sp, #16]
 80038da:	7823      	ldrb	r3, [r4, #0]
 80038dc:	2b2e      	cmp	r3, #46	; 0x2e
 80038de:	d10c      	bne.n	80038fa <_vfiprintf_r+0x176>
 80038e0:	7863      	ldrb	r3, [r4, #1]
 80038e2:	2b2a      	cmp	r3, #42	; 0x2a
 80038e4:	d135      	bne.n	8003952 <_vfiprintf_r+0x1ce>
 80038e6:	9b03      	ldr	r3, [sp, #12]
 80038e8:	1d1a      	adds	r2, r3, #4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	9203      	str	r2, [sp, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bfb8      	it	lt
 80038f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80038f6:	3402      	adds	r4, #2
 80038f8:	9305      	str	r3, [sp, #20]
 80038fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80039e0 <_vfiprintf_r+0x25c>
 80038fe:	7821      	ldrb	r1, [r4, #0]
 8003900:	2203      	movs	r2, #3
 8003902:	4650      	mov	r0, sl
 8003904:	f7fc fc64 	bl	80001d0 <memchr>
 8003908:	b140      	cbz	r0, 800391c <_vfiprintf_r+0x198>
 800390a:	2340      	movs	r3, #64	; 0x40
 800390c:	eba0 000a 	sub.w	r0, r0, sl
 8003910:	fa03 f000 	lsl.w	r0, r3, r0
 8003914:	9b04      	ldr	r3, [sp, #16]
 8003916:	4303      	orrs	r3, r0
 8003918:	3401      	adds	r4, #1
 800391a:	9304      	str	r3, [sp, #16]
 800391c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003920:	482c      	ldr	r0, [pc, #176]	; (80039d4 <_vfiprintf_r+0x250>)
 8003922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003926:	2206      	movs	r2, #6
 8003928:	f7fc fc52 	bl	80001d0 <memchr>
 800392c:	2800      	cmp	r0, #0
 800392e:	d03f      	beq.n	80039b0 <_vfiprintf_r+0x22c>
 8003930:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <_vfiprintf_r+0x254>)
 8003932:	bb1b      	cbnz	r3, 800397c <_vfiprintf_r+0x1f8>
 8003934:	9b03      	ldr	r3, [sp, #12]
 8003936:	3307      	adds	r3, #7
 8003938:	f023 0307 	bic.w	r3, r3, #7
 800393c:	3308      	adds	r3, #8
 800393e:	9303      	str	r3, [sp, #12]
 8003940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003942:	443b      	add	r3, r7
 8003944:	9309      	str	r3, [sp, #36]	; 0x24
 8003946:	e767      	b.n	8003818 <_vfiprintf_r+0x94>
 8003948:	fb0c 3202 	mla	r2, ip, r2, r3
 800394c:	460c      	mov	r4, r1
 800394e:	2001      	movs	r0, #1
 8003950:	e7a5      	b.n	800389e <_vfiprintf_r+0x11a>
 8003952:	2300      	movs	r3, #0
 8003954:	3401      	adds	r4, #1
 8003956:	9305      	str	r3, [sp, #20]
 8003958:	4619      	mov	r1, r3
 800395a:	f04f 0c0a 	mov.w	ip, #10
 800395e:	4620      	mov	r0, r4
 8003960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003964:	3a30      	subs	r2, #48	; 0x30
 8003966:	2a09      	cmp	r2, #9
 8003968:	d903      	bls.n	8003972 <_vfiprintf_r+0x1ee>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0c5      	beq.n	80038fa <_vfiprintf_r+0x176>
 800396e:	9105      	str	r1, [sp, #20]
 8003970:	e7c3      	b.n	80038fa <_vfiprintf_r+0x176>
 8003972:	fb0c 2101 	mla	r1, ip, r1, r2
 8003976:	4604      	mov	r4, r0
 8003978:	2301      	movs	r3, #1
 800397a:	e7f0      	b.n	800395e <_vfiprintf_r+0x1da>
 800397c:	ab03      	add	r3, sp, #12
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	462a      	mov	r2, r5
 8003982:	4b16      	ldr	r3, [pc, #88]	; (80039dc <_vfiprintf_r+0x258>)
 8003984:	a904      	add	r1, sp, #16
 8003986:	4630      	mov	r0, r6
 8003988:	f3af 8000 	nop.w
 800398c:	4607      	mov	r7, r0
 800398e:	1c78      	adds	r0, r7, #1
 8003990:	d1d6      	bne.n	8003940 <_vfiprintf_r+0x1bc>
 8003992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003994:	07d9      	lsls	r1, r3, #31
 8003996:	d405      	bmi.n	80039a4 <_vfiprintf_r+0x220>
 8003998:	89ab      	ldrh	r3, [r5, #12]
 800399a:	059a      	lsls	r2, r3, #22
 800399c:	d402      	bmi.n	80039a4 <_vfiprintf_r+0x220>
 800399e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039a0:	f000 fc45 	bl	800422e <__retarget_lock_release_recursive>
 80039a4:	89ab      	ldrh	r3, [r5, #12]
 80039a6:	065b      	lsls	r3, r3, #25
 80039a8:	f53f af12 	bmi.w	80037d0 <_vfiprintf_r+0x4c>
 80039ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039ae:	e711      	b.n	80037d4 <_vfiprintf_r+0x50>
 80039b0:	ab03      	add	r3, sp, #12
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	462a      	mov	r2, r5
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <_vfiprintf_r+0x258>)
 80039b8:	a904      	add	r1, sp, #16
 80039ba:	4630      	mov	r0, r6
 80039bc:	f000 f880 	bl	8003ac0 <_printf_i>
 80039c0:	e7e4      	b.n	800398c <_vfiprintf_r+0x208>
 80039c2:	bf00      	nop
 80039c4:	0800462c 	.word	0x0800462c
 80039c8:	0800464c 	.word	0x0800464c
 80039cc:	0800460c 	.word	0x0800460c
 80039d0:	080045d6 	.word	0x080045d6
 80039d4:	080045e0 	.word	0x080045e0
 80039d8:	00000000 	.word	0x00000000
 80039dc:	0800375f 	.word	0x0800375f
 80039e0:	080045dc 	.word	0x080045dc

080039e4 <_printf_common>:
 80039e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039e8:	4616      	mov	r6, r2
 80039ea:	4699      	mov	r9, r3
 80039ec:	688a      	ldr	r2, [r1, #8]
 80039ee:	690b      	ldr	r3, [r1, #16]
 80039f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039f4:	4293      	cmp	r3, r2
 80039f6:	bfb8      	it	lt
 80039f8:	4613      	movlt	r3, r2
 80039fa:	6033      	str	r3, [r6, #0]
 80039fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a00:	4607      	mov	r7, r0
 8003a02:	460c      	mov	r4, r1
 8003a04:	b10a      	cbz	r2, 8003a0a <_printf_common+0x26>
 8003a06:	3301      	adds	r3, #1
 8003a08:	6033      	str	r3, [r6, #0]
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	0699      	lsls	r1, r3, #26
 8003a0e:	bf42      	ittt	mi
 8003a10:	6833      	ldrmi	r3, [r6, #0]
 8003a12:	3302      	addmi	r3, #2
 8003a14:	6033      	strmi	r3, [r6, #0]
 8003a16:	6825      	ldr	r5, [r4, #0]
 8003a18:	f015 0506 	ands.w	r5, r5, #6
 8003a1c:	d106      	bne.n	8003a2c <_printf_common+0x48>
 8003a1e:	f104 0a19 	add.w	sl, r4, #25
 8003a22:	68e3      	ldr	r3, [r4, #12]
 8003a24:	6832      	ldr	r2, [r6, #0]
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	42ab      	cmp	r3, r5
 8003a2a:	dc26      	bgt.n	8003a7a <_printf_common+0x96>
 8003a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a30:	1e13      	subs	r3, r2, #0
 8003a32:	6822      	ldr	r2, [r4, #0]
 8003a34:	bf18      	it	ne
 8003a36:	2301      	movne	r3, #1
 8003a38:	0692      	lsls	r2, r2, #26
 8003a3a:	d42b      	bmi.n	8003a94 <_printf_common+0xb0>
 8003a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a40:	4649      	mov	r1, r9
 8003a42:	4638      	mov	r0, r7
 8003a44:	47c0      	blx	r8
 8003a46:	3001      	adds	r0, #1
 8003a48:	d01e      	beq.n	8003a88 <_printf_common+0xa4>
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	68e5      	ldr	r5, [r4, #12]
 8003a4e:	6832      	ldr	r2, [r6, #0]
 8003a50:	f003 0306 	and.w	r3, r3, #6
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	bf08      	it	eq
 8003a58:	1aad      	subeq	r5, r5, r2
 8003a5a:	68a3      	ldr	r3, [r4, #8]
 8003a5c:	6922      	ldr	r2, [r4, #16]
 8003a5e:	bf0c      	ite	eq
 8003a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a64:	2500      	movne	r5, #0
 8003a66:	4293      	cmp	r3, r2
 8003a68:	bfc4      	itt	gt
 8003a6a:	1a9b      	subgt	r3, r3, r2
 8003a6c:	18ed      	addgt	r5, r5, r3
 8003a6e:	2600      	movs	r6, #0
 8003a70:	341a      	adds	r4, #26
 8003a72:	42b5      	cmp	r5, r6
 8003a74:	d11a      	bne.n	8003aac <_printf_common+0xc8>
 8003a76:	2000      	movs	r0, #0
 8003a78:	e008      	b.n	8003a8c <_printf_common+0xa8>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	4652      	mov	r2, sl
 8003a7e:	4649      	mov	r1, r9
 8003a80:	4638      	mov	r0, r7
 8003a82:	47c0      	blx	r8
 8003a84:	3001      	adds	r0, #1
 8003a86:	d103      	bne.n	8003a90 <_printf_common+0xac>
 8003a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a90:	3501      	adds	r5, #1
 8003a92:	e7c6      	b.n	8003a22 <_printf_common+0x3e>
 8003a94:	18e1      	adds	r1, r4, r3
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	2030      	movs	r0, #48	; 0x30
 8003a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a9e:	4422      	add	r2, r4
 8003aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	e7c7      	b.n	8003a3c <_printf_common+0x58>
 8003aac:	2301      	movs	r3, #1
 8003aae:	4622      	mov	r2, r4
 8003ab0:	4649      	mov	r1, r9
 8003ab2:	4638      	mov	r0, r7
 8003ab4:	47c0      	blx	r8
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	d0e6      	beq.n	8003a88 <_printf_common+0xa4>
 8003aba:	3601      	adds	r6, #1
 8003abc:	e7d9      	b.n	8003a72 <_printf_common+0x8e>
	...

08003ac0 <_printf_i>:
 8003ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac4:	7e0f      	ldrb	r7, [r1, #24]
 8003ac6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ac8:	2f78      	cmp	r7, #120	; 0x78
 8003aca:	4691      	mov	r9, r2
 8003acc:	4680      	mov	r8, r0
 8003ace:	460c      	mov	r4, r1
 8003ad0:	469a      	mov	sl, r3
 8003ad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ad6:	d807      	bhi.n	8003ae8 <_printf_i+0x28>
 8003ad8:	2f62      	cmp	r7, #98	; 0x62
 8003ada:	d80a      	bhi.n	8003af2 <_printf_i+0x32>
 8003adc:	2f00      	cmp	r7, #0
 8003ade:	f000 80d8 	beq.w	8003c92 <_printf_i+0x1d2>
 8003ae2:	2f58      	cmp	r7, #88	; 0x58
 8003ae4:	f000 80a3 	beq.w	8003c2e <_printf_i+0x16e>
 8003ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003af0:	e03a      	b.n	8003b68 <_printf_i+0xa8>
 8003af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003af6:	2b15      	cmp	r3, #21
 8003af8:	d8f6      	bhi.n	8003ae8 <_printf_i+0x28>
 8003afa:	a101      	add	r1, pc, #4	; (adr r1, 8003b00 <_printf_i+0x40>)
 8003afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b00:	08003b59 	.word	0x08003b59
 8003b04:	08003b6d 	.word	0x08003b6d
 8003b08:	08003ae9 	.word	0x08003ae9
 8003b0c:	08003ae9 	.word	0x08003ae9
 8003b10:	08003ae9 	.word	0x08003ae9
 8003b14:	08003ae9 	.word	0x08003ae9
 8003b18:	08003b6d 	.word	0x08003b6d
 8003b1c:	08003ae9 	.word	0x08003ae9
 8003b20:	08003ae9 	.word	0x08003ae9
 8003b24:	08003ae9 	.word	0x08003ae9
 8003b28:	08003ae9 	.word	0x08003ae9
 8003b2c:	08003c79 	.word	0x08003c79
 8003b30:	08003b9d 	.word	0x08003b9d
 8003b34:	08003c5b 	.word	0x08003c5b
 8003b38:	08003ae9 	.word	0x08003ae9
 8003b3c:	08003ae9 	.word	0x08003ae9
 8003b40:	08003c9b 	.word	0x08003c9b
 8003b44:	08003ae9 	.word	0x08003ae9
 8003b48:	08003b9d 	.word	0x08003b9d
 8003b4c:	08003ae9 	.word	0x08003ae9
 8003b50:	08003ae9 	.word	0x08003ae9
 8003b54:	08003c63 	.word	0x08003c63
 8003b58:	682b      	ldr	r3, [r5, #0]
 8003b5a:	1d1a      	adds	r2, r3, #4
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	602a      	str	r2, [r5, #0]
 8003b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0a3      	b.n	8003cb4 <_printf_i+0x1f4>
 8003b6c:	6820      	ldr	r0, [r4, #0]
 8003b6e:	6829      	ldr	r1, [r5, #0]
 8003b70:	0606      	lsls	r6, r0, #24
 8003b72:	f101 0304 	add.w	r3, r1, #4
 8003b76:	d50a      	bpl.n	8003b8e <_printf_i+0xce>
 8003b78:	680e      	ldr	r6, [r1, #0]
 8003b7a:	602b      	str	r3, [r5, #0]
 8003b7c:	2e00      	cmp	r6, #0
 8003b7e:	da03      	bge.n	8003b88 <_printf_i+0xc8>
 8003b80:	232d      	movs	r3, #45	; 0x2d
 8003b82:	4276      	negs	r6, r6
 8003b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b88:	485e      	ldr	r0, [pc, #376]	; (8003d04 <_printf_i+0x244>)
 8003b8a:	230a      	movs	r3, #10
 8003b8c:	e019      	b.n	8003bc2 <_printf_i+0x102>
 8003b8e:	680e      	ldr	r6, [r1, #0]
 8003b90:	602b      	str	r3, [r5, #0]
 8003b92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b96:	bf18      	it	ne
 8003b98:	b236      	sxthne	r6, r6
 8003b9a:	e7ef      	b.n	8003b7c <_printf_i+0xbc>
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	6820      	ldr	r0, [r4, #0]
 8003ba0:	1d19      	adds	r1, r3, #4
 8003ba2:	6029      	str	r1, [r5, #0]
 8003ba4:	0601      	lsls	r1, r0, #24
 8003ba6:	d501      	bpl.n	8003bac <_printf_i+0xec>
 8003ba8:	681e      	ldr	r6, [r3, #0]
 8003baa:	e002      	b.n	8003bb2 <_printf_i+0xf2>
 8003bac:	0646      	lsls	r6, r0, #25
 8003bae:	d5fb      	bpl.n	8003ba8 <_printf_i+0xe8>
 8003bb0:	881e      	ldrh	r6, [r3, #0]
 8003bb2:	4854      	ldr	r0, [pc, #336]	; (8003d04 <_printf_i+0x244>)
 8003bb4:	2f6f      	cmp	r7, #111	; 0x6f
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2308      	moveq	r3, #8
 8003bba:	230a      	movne	r3, #10
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bc2:	6865      	ldr	r5, [r4, #4]
 8003bc4:	60a5      	str	r5, [r4, #8]
 8003bc6:	2d00      	cmp	r5, #0
 8003bc8:	bfa2      	ittt	ge
 8003bca:	6821      	ldrge	r1, [r4, #0]
 8003bcc:	f021 0104 	bicge.w	r1, r1, #4
 8003bd0:	6021      	strge	r1, [r4, #0]
 8003bd2:	b90e      	cbnz	r6, 8003bd8 <_printf_i+0x118>
 8003bd4:	2d00      	cmp	r5, #0
 8003bd6:	d04d      	beq.n	8003c74 <_printf_i+0x1b4>
 8003bd8:	4615      	mov	r5, r2
 8003bda:	fbb6 f1f3 	udiv	r1, r6, r3
 8003bde:	fb03 6711 	mls	r7, r3, r1, r6
 8003be2:	5dc7      	ldrb	r7, [r0, r7]
 8003be4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003be8:	4637      	mov	r7, r6
 8003bea:	42bb      	cmp	r3, r7
 8003bec:	460e      	mov	r6, r1
 8003bee:	d9f4      	bls.n	8003bda <_printf_i+0x11a>
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d10b      	bne.n	8003c0c <_printf_i+0x14c>
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	07de      	lsls	r6, r3, #31
 8003bf8:	d508      	bpl.n	8003c0c <_printf_i+0x14c>
 8003bfa:	6923      	ldr	r3, [r4, #16]
 8003bfc:	6861      	ldr	r1, [r4, #4]
 8003bfe:	4299      	cmp	r1, r3
 8003c00:	bfde      	ittt	le
 8003c02:	2330      	movle	r3, #48	; 0x30
 8003c04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c08:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003c0c:	1b52      	subs	r2, r2, r5
 8003c0e:	6122      	str	r2, [r4, #16]
 8003c10:	f8cd a000 	str.w	sl, [sp]
 8003c14:	464b      	mov	r3, r9
 8003c16:	aa03      	add	r2, sp, #12
 8003c18:	4621      	mov	r1, r4
 8003c1a:	4640      	mov	r0, r8
 8003c1c:	f7ff fee2 	bl	80039e4 <_printf_common>
 8003c20:	3001      	adds	r0, #1
 8003c22:	d14c      	bne.n	8003cbe <_printf_i+0x1fe>
 8003c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c28:	b004      	add	sp, #16
 8003c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c2e:	4835      	ldr	r0, [pc, #212]	; (8003d04 <_printf_i+0x244>)
 8003c30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c34:	6829      	ldr	r1, [r5, #0]
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c3c:	6029      	str	r1, [r5, #0]
 8003c3e:	061d      	lsls	r5, r3, #24
 8003c40:	d514      	bpl.n	8003c6c <_printf_i+0x1ac>
 8003c42:	07df      	lsls	r7, r3, #31
 8003c44:	bf44      	itt	mi
 8003c46:	f043 0320 	orrmi.w	r3, r3, #32
 8003c4a:	6023      	strmi	r3, [r4, #0]
 8003c4c:	b91e      	cbnz	r6, 8003c56 <_printf_i+0x196>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	f023 0320 	bic.w	r3, r3, #32
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	2310      	movs	r3, #16
 8003c58:	e7b0      	b.n	8003bbc <_printf_i+0xfc>
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	f043 0320 	orr.w	r3, r3, #32
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	2378      	movs	r3, #120	; 0x78
 8003c64:	4828      	ldr	r0, [pc, #160]	; (8003d08 <_printf_i+0x248>)
 8003c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c6a:	e7e3      	b.n	8003c34 <_printf_i+0x174>
 8003c6c:	0659      	lsls	r1, r3, #25
 8003c6e:	bf48      	it	mi
 8003c70:	b2b6      	uxthmi	r6, r6
 8003c72:	e7e6      	b.n	8003c42 <_printf_i+0x182>
 8003c74:	4615      	mov	r5, r2
 8003c76:	e7bb      	b.n	8003bf0 <_printf_i+0x130>
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	6826      	ldr	r6, [r4, #0]
 8003c7c:	6961      	ldr	r1, [r4, #20]
 8003c7e:	1d18      	adds	r0, r3, #4
 8003c80:	6028      	str	r0, [r5, #0]
 8003c82:	0635      	lsls	r5, r6, #24
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	d501      	bpl.n	8003c8c <_printf_i+0x1cc>
 8003c88:	6019      	str	r1, [r3, #0]
 8003c8a:	e002      	b.n	8003c92 <_printf_i+0x1d2>
 8003c8c:	0670      	lsls	r0, r6, #25
 8003c8e:	d5fb      	bpl.n	8003c88 <_printf_i+0x1c8>
 8003c90:	8019      	strh	r1, [r3, #0]
 8003c92:	2300      	movs	r3, #0
 8003c94:	6123      	str	r3, [r4, #16]
 8003c96:	4615      	mov	r5, r2
 8003c98:	e7ba      	b.n	8003c10 <_printf_i+0x150>
 8003c9a:	682b      	ldr	r3, [r5, #0]
 8003c9c:	1d1a      	adds	r2, r3, #4
 8003c9e:	602a      	str	r2, [r5, #0]
 8003ca0:	681d      	ldr	r5, [r3, #0]
 8003ca2:	6862      	ldr	r2, [r4, #4]
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f7fc fa92 	bl	80001d0 <memchr>
 8003cac:	b108      	cbz	r0, 8003cb2 <_printf_i+0x1f2>
 8003cae:	1b40      	subs	r0, r0, r5
 8003cb0:	6060      	str	r0, [r4, #4]
 8003cb2:	6863      	ldr	r3, [r4, #4]
 8003cb4:	6123      	str	r3, [r4, #16]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cbc:	e7a8      	b.n	8003c10 <_printf_i+0x150>
 8003cbe:	6923      	ldr	r3, [r4, #16]
 8003cc0:	462a      	mov	r2, r5
 8003cc2:	4649      	mov	r1, r9
 8003cc4:	4640      	mov	r0, r8
 8003cc6:	47d0      	blx	sl
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d0ab      	beq.n	8003c24 <_printf_i+0x164>
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	079b      	lsls	r3, r3, #30
 8003cd0:	d413      	bmi.n	8003cfa <_printf_i+0x23a>
 8003cd2:	68e0      	ldr	r0, [r4, #12]
 8003cd4:	9b03      	ldr	r3, [sp, #12]
 8003cd6:	4298      	cmp	r0, r3
 8003cd8:	bfb8      	it	lt
 8003cda:	4618      	movlt	r0, r3
 8003cdc:	e7a4      	b.n	8003c28 <_printf_i+0x168>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	4632      	mov	r2, r6
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	47d0      	blx	sl
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d09b      	beq.n	8003c24 <_printf_i+0x164>
 8003cec:	3501      	adds	r5, #1
 8003cee:	68e3      	ldr	r3, [r4, #12]
 8003cf0:	9903      	ldr	r1, [sp, #12]
 8003cf2:	1a5b      	subs	r3, r3, r1
 8003cf4:	42ab      	cmp	r3, r5
 8003cf6:	dcf2      	bgt.n	8003cde <_printf_i+0x21e>
 8003cf8:	e7eb      	b.n	8003cd2 <_printf_i+0x212>
 8003cfa:	2500      	movs	r5, #0
 8003cfc:	f104 0619 	add.w	r6, r4, #25
 8003d00:	e7f5      	b.n	8003cee <_printf_i+0x22e>
 8003d02:	bf00      	nop
 8003d04:	080045e7 	.word	0x080045e7
 8003d08:	080045f8 	.word	0x080045f8

08003d0c <_sbrk_r>:
 8003d0c:	b538      	push	{r3, r4, r5, lr}
 8003d0e:	4d06      	ldr	r5, [pc, #24]	; (8003d28 <_sbrk_r+0x1c>)
 8003d10:	2300      	movs	r3, #0
 8003d12:	4604      	mov	r4, r0
 8003d14:	4608      	mov	r0, r1
 8003d16:	602b      	str	r3, [r5, #0]
 8003d18:	f7fd f828 	bl	8000d6c <_sbrk>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d102      	bne.n	8003d26 <_sbrk_r+0x1a>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	b103      	cbz	r3, 8003d26 <_sbrk_r+0x1a>
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	bd38      	pop	{r3, r4, r5, pc}
 8003d28:	2000013c 	.word	0x2000013c

08003d2c <__swbuf_r>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	460e      	mov	r6, r1
 8003d30:	4614      	mov	r4, r2
 8003d32:	4605      	mov	r5, r0
 8003d34:	b118      	cbz	r0, 8003d3e <__swbuf_r+0x12>
 8003d36:	6983      	ldr	r3, [r0, #24]
 8003d38:	b90b      	cbnz	r3, 8003d3e <__swbuf_r+0x12>
 8003d3a:	f000 f9d9 	bl	80040f0 <__sinit>
 8003d3e:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <__swbuf_r+0x98>)
 8003d40:	429c      	cmp	r4, r3
 8003d42:	d12b      	bne.n	8003d9c <__swbuf_r+0x70>
 8003d44:	686c      	ldr	r4, [r5, #4]
 8003d46:	69a3      	ldr	r3, [r4, #24]
 8003d48:	60a3      	str	r3, [r4, #8]
 8003d4a:	89a3      	ldrh	r3, [r4, #12]
 8003d4c:	071a      	lsls	r2, r3, #28
 8003d4e:	d52f      	bpl.n	8003db0 <__swbuf_r+0x84>
 8003d50:	6923      	ldr	r3, [r4, #16]
 8003d52:	b36b      	cbz	r3, 8003db0 <__swbuf_r+0x84>
 8003d54:	6923      	ldr	r3, [r4, #16]
 8003d56:	6820      	ldr	r0, [r4, #0]
 8003d58:	1ac0      	subs	r0, r0, r3
 8003d5a:	6963      	ldr	r3, [r4, #20]
 8003d5c:	b2f6      	uxtb	r6, r6
 8003d5e:	4283      	cmp	r3, r0
 8003d60:	4637      	mov	r7, r6
 8003d62:	dc04      	bgt.n	8003d6e <__swbuf_r+0x42>
 8003d64:	4621      	mov	r1, r4
 8003d66:	4628      	mov	r0, r5
 8003d68:	f000 f92e 	bl	8003fc8 <_fflush_r>
 8003d6c:	bb30      	cbnz	r0, 8003dbc <__swbuf_r+0x90>
 8003d6e:	68a3      	ldr	r3, [r4, #8]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	60a3      	str	r3, [r4, #8]
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	6022      	str	r2, [r4, #0]
 8003d7a:	701e      	strb	r6, [r3, #0]
 8003d7c:	6963      	ldr	r3, [r4, #20]
 8003d7e:	3001      	adds	r0, #1
 8003d80:	4283      	cmp	r3, r0
 8003d82:	d004      	beq.n	8003d8e <__swbuf_r+0x62>
 8003d84:	89a3      	ldrh	r3, [r4, #12]
 8003d86:	07db      	lsls	r3, r3, #31
 8003d88:	d506      	bpl.n	8003d98 <__swbuf_r+0x6c>
 8003d8a:	2e0a      	cmp	r6, #10
 8003d8c:	d104      	bne.n	8003d98 <__swbuf_r+0x6c>
 8003d8e:	4621      	mov	r1, r4
 8003d90:	4628      	mov	r0, r5
 8003d92:	f000 f919 	bl	8003fc8 <_fflush_r>
 8003d96:	b988      	cbnz	r0, 8003dbc <__swbuf_r+0x90>
 8003d98:	4638      	mov	r0, r7
 8003d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <__swbuf_r+0x9c>)
 8003d9e:	429c      	cmp	r4, r3
 8003da0:	d101      	bne.n	8003da6 <__swbuf_r+0x7a>
 8003da2:	68ac      	ldr	r4, [r5, #8]
 8003da4:	e7cf      	b.n	8003d46 <__swbuf_r+0x1a>
 8003da6:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <__swbuf_r+0xa0>)
 8003da8:	429c      	cmp	r4, r3
 8003daa:	bf08      	it	eq
 8003dac:	68ec      	ldreq	r4, [r5, #12]
 8003dae:	e7ca      	b.n	8003d46 <__swbuf_r+0x1a>
 8003db0:	4621      	mov	r1, r4
 8003db2:	4628      	mov	r0, r5
 8003db4:	f000 f80c 	bl	8003dd0 <__swsetup_r>
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d0cb      	beq.n	8003d54 <__swbuf_r+0x28>
 8003dbc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003dc0:	e7ea      	b.n	8003d98 <__swbuf_r+0x6c>
 8003dc2:	bf00      	nop
 8003dc4:	0800462c 	.word	0x0800462c
 8003dc8:	0800464c 	.word	0x0800464c
 8003dcc:	0800460c 	.word	0x0800460c

08003dd0 <__swsetup_r>:
 8003dd0:	4b32      	ldr	r3, [pc, #200]	; (8003e9c <__swsetup_r+0xcc>)
 8003dd2:	b570      	push	{r4, r5, r6, lr}
 8003dd4:	681d      	ldr	r5, [r3, #0]
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	460c      	mov	r4, r1
 8003dda:	b125      	cbz	r5, 8003de6 <__swsetup_r+0x16>
 8003ddc:	69ab      	ldr	r3, [r5, #24]
 8003dde:	b913      	cbnz	r3, 8003de6 <__swsetup_r+0x16>
 8003de0:	4628      	mov	r0, r5
 8003de2:	f000 f985 	bl	80040f0 <__sinit>
 8003de6:	4b2e      	ldr	r3, [pc, #184]	; (8003ea0 <__swsetup_r+0xd0>)
 8003de8:	429c      	cmp	r4, r3
 8003dea:	d10f      	bne.n	8003e0c <__swsetup_r+0x3c>
 8003dec:	686c      	ldr	r4, [r5, #4]
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003df4:	0719      	lsls	r1, r3, #28
 8003df6:	d42c      	bmi.n	8003e52 <__swsetup_r+0x82>
 8003df8:	06dd      	lsls	r5, r3, #27
 8003dfa:	d411      	bmi.n	8003e20 <__swsetup_r+0x50>
 8003dfc:	2309      	movs	r3, #9
 8003dfe:	6033      	str	r3, [r6, #0]
 8003e00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e04:	81a3      	strh	r3, [r4, #12]
 8003e06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e0a:	e03e      	b.n	8003e8a <__swsetup_r+0xba>
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <__swsetup_r+0xd4>)
 8003e0e:	429c      	cmp	r4, r3
 8003e10:	d101      	bne.n	8003e16 <__swsetup_r+0x46>
 8003e12:	68ac      	ldr	r4, [r5, #8]
 8003e14:	e7eb      	b.n	8003dee <__swsetup_r+0x1e>
 8003e16:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <__swsetup_r+0xd8>)
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	bf08      	it	eq
 8003e1c:	68ec      	ldreq	r4, [r5, #12]
 8003e1e:	e7e6      	b.n	8003dee <__swsetup_r+0x1e>
 8003e20:	0758      	lsls	r0, r3, #29
 8003e22:	d512      	bpl.n	8003e4a <__swsetup_r+0x7a>
 8003e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e26:	b141      	cbz	r1, 8003e3a <__swsetup_r+0x6a>
 8003e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e2c:	4299      	cmp	r1, r3
 8003e2e:	d002      	beq.n	8003e36 <__swsetup_r+0x66>
 8003e30:	4630      	mov	r0, r6
 8003e32:	f7ff fb9d 	bl	8003570 <_free_r>
 8003e36:	2300      	movs	r3, #0
 8003e38:	6363      	str	r3, [r4, #52]	; 0x34
 8003e3a:	89a3      	ldrh	r3, [r4, #12]
 8003e3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e40:	81a3      	strh	r3, [r4, #12]
 8003e42:	2300      	movs	r3, #0
 8003e44:	6063      	str	r3, [r4, #4]
 8003e46:	6923      	ldr	r3, [r4, #16]
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	f043 0308 	orr.w	r3, r3, #8
 8003e50:	81a3      	strh	r3, [r4, #12]
 8003e52:	6923      	ldr	r3, [r4, #16]
 8003e54:	b94b      	cbnz	r3, 8003e6a <__swsetup_r+0x9a>
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e60:	d003      	beq.n	8003e6a <__swsetup_r+0x9a>
 8003e62:	4621      	mov	r1, r4
 8003e64:	4630      	mov	r0, r6
 8003e66:	f000 fa09 	bl	800427c <__smakebuf_r>
 8003e6a:	89a0      	ldrh	r0, [r4, #12]
 8003e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e70:	f010 0301 	ands.w	r3, r0, #1
 8003e74:	d00a      	beq.n	8003e8c <__swsetup_r+0xbc>
 8003e76:	2300      	movs	r3, #0
 8003e78:	60a3      	str	r3, [r4, #8]
 8003e7a:	6963      	ldr	r3, [r4, #20]
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	61a3      	str	r3, [r4, #24]
 8003e80:	6923      	ldr	r3, [r4, #16]
 8003e82:	b943      	cbnz	r3, 8003e96 <__swsetup_r+0xc6>
 8003e84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e88:	d1ba      	bne.n	8003e00 <__swsetup_r+0x30>
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	0781      	lsls	r1, r0, #30
 8003e8e:	bf58      	it	pl
 8003e90:	6963      	ldrpl	r3, [r4, #20]
 8003e92:	60a3      	str	r3, [r4, #8]
 8003e94:	e7f4      	b.n	8003e80 <__swsetup_r+0xb0>
 8003e96:	2000      	movs	r0, #0
 8003e98:	e7f7      	b.n	8003e8a <__swsetup_r+0xba>
 8003e9a:	bf00      	nop
 8003e9c:	2000000c 	.word	0x2000000c
 8003ea0:	0800462c 	.word	0x0800462c
 8003ea4:	0800464c 	.word	0x0800464c
 8003ea8:	0800460c 	.word	0x0800460c

08003eac <abort>:
 8003eac:	b508      	push	{r3, lr}
 8003eae:	2006      	movs	r0, #6
 8003eb0:	f000 fa58 	bl	8004364 <raise>
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	f7fc fee1 	bl	8000c7c <_exit>
	...

08003ebc <__sflush_r>:
 8003ebc:	898a      	ldrh	r2, [r1, #12]
 8003ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec2:	4605      	mov	r5, r0
 8003ec4:	0710      	lsls	r0, r2, #28
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	d458      	bmi.n	8003f7c <__sflush_r+0xc0>
 8003eca:	684b      	ldr	r3, [r1, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	dc05      	bgt.n	8003edc <__sflush_r+0x20>
 8003ed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	dc02      	bgt.n	8003edc <__sflush_r+0x20>
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ede:	2e00      	cmp	r6, #0
 8003ee0:	d0f9      	beq.n	8003ed6 <__sflush_r+0x1a>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ee8:	682f      	ldr	r7, [r5, #0]
 8003eea:	602b      	str	r3, [r5, #0]
 8003eec:	d032      	beq.n	8003f54 <__sflush_r+0x98>
 8003eee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	075a      	lsls	r2, r3, #29
 8003ef4:	d505      	bpl.n	8003f02 <__sflush_r+0x46>
 8003ef6:	6863      	ldr	r3, [r4, #4]
 8003ef8:	1ac0      	subs	r0, r0, r3
 8003efa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003efc:	b10b      	cbz	r3, 8003f02 <__sflush_r+0x46>
 8003efe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f00:	1ac0      	subs	r0, r0, r3
 8003f02:	2300      	movs	r3, #0
 8003f04:	4602      	mov	r2, r0
 8003f06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f08:	6a21      	ldr	r1, [r4, #32]
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	47b0      	blx	r6
 8003f0e:	1c43      	adds	r3, r0, #1
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	d106      	bne.n	8003f22 <__sflush_r+0x66>
 8003f14:	6829      	ldr	r1, [r5, #0]
 8003f16:	291d      	cmp	r1, #29
 8003f18:	d82c      	bhi.n	8003f74 <__sflush_r+0xb8>
 8003f1a:	4a2a      	ldr	r2, [pc, #168]	; (8003fc4 <__sflush_r+0x108>)
 8003f1c:	40ca      	lsrs	r2, r1
 8003f1e:	07d6      	lsls	r6, r2, #31
 8003f20:	d528      	bpl.n	8003f74 <__sflush_r+0xb8>
 8003f22:	2200      	movs	r2, #0
 8003f24:	6062      	str	r2, [r4, #4]
 8003f26:	04d9      	lsls	r1, r3, #19
 8003f28:	6922      	ldr	r2, [r4, #16]
 8003f2a:	6022      	str	r2, [r4, #0]
 8003f2c:	d504      	bpl.n	8003f38 <__sflush_r+0x7c>
 8003f2e:	1c42      	adds	r2, r0, #1
 8003f30:	d101      	bne.n	8003f36 <__sflush_r+0x7a>
 8003f32:	682b      	ldr	r3, [r5, #0]
 8003f34:	b903      	cbnz	r3, 8003f38 <__sflush_r+0x7c>
 8003f36:	6560      	str	r0, [r4, #84]	; 0x54
 8003f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f3a:	602f      	str	r7, [r5, #0]
 8003f3c:	2900      	cmp	r1, #0
 8003f3e:	d0ca      	beq.n	8003ed6 <__sflush_r+0x1a>
 8003f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f44:	4299      	cmp	r1, r3
 8003f46:	d002      	beq.n	8003f4e <__sflush_r+0x92>
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f7ff fb11 	bl	8003570 <_free_r>
 8003f4e:	2000      	movs	r0, #0
 8003f50:	6360      	str	r0, [r4, #52]	; 0x34
 8003f52:	e7c1      	b.n	8003ed8 <__sflush_r+0x1c>
 8003f54:	6a21      	ldr	r1, [r4, #32]
 8003f56:	2301      	movs	r3, #1
 8003f58:	4628      	mov	r0, r5
 8003f5a:	47b0      	blx	r6
 8003f5c:	1c41      	adds	r1, r0, #1
 8003f5e:	d1c7      	bne.n	8003ef0 <__sflush_r+0x34>
 8003f60:	682b      	ldr	r3, [r5, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0c4      	beq.n	8003ef0 <__sflush_r+0x34>
 8003f66:	2b1d      	cmp	r3, #29
 8003f68:	d001      	beq.n	8003f6e <__sflush_r+0xb2>
 8003f6a:	2b16      	cmp	r3, #22
 8003f6c:	d101      	bne.n	8003f72 <__sflush_r+0xb6>
 8003f6e:	602f      	str	r7, [r5, #0]
 8003f70:	e7b1      	b.n	8003ed6 <__sflush_r+0x1a>
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f78:	81a3      	strh	r3, [r4, #12]
 8003f7a:	e7ad      	b.n	8003ed8 <__sflush_r+0x1c>
 8003f7c:	690f      	ldr	r7, [r1, #16]
 8003f7e:	2f00      	cmp	r7, #0
 8003f80:	d0a9      	beq.n	8003ed6 <__sflush_r+0x1a>
 8003f82:	0793      	lsls	r3, r2, #30
 8003f84:	680e      	ldr	r6, [r1, #0]
 8003f86:	bf08      	it	eq
 8003f88:	694b      	ldreq	r3, [r1, #20]
 8003f8a:	600f      	str	r7, [r1, #0]
 8003f8c:	bf18      	it	ne
 8003f8e:	2300      	movne	r3, #0
 8003f90:	eba6 0807 	sub.w	r8, r6, r7
 8003f94:	608b      	str	r3, [r1, #8]
 8003f96:	f1b8 0f00 	cmp.w	r8, #0
 8003f9a:	dd9c      	ble.n	8003ed6 <__sflush_r+0x1a>
 8003f9c:	6a21      	ldr	r1, [r4, #32]
 8003f9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fa0:	4643      	mov	r3, r8
 8003fa2:	463a      	mov	r2, r7
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	47b0      	blx	r6
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	dc06      	bgt.n	8003fba <__sflush_r+0xfe>
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb2:	81a3      	strh	r3, [r4, #12]
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb8:	e78e      	b.n	8003ed8 <__sflush_r+0x1c>
 8003fba:	4407      	add	r7, r0
 8003fbc:	eba8 0800 	sub.w	r8, r8, r0
 8003fc0:	e7e9      	b.n	8003f96 <__sflush_r+0xda>
 8003fc2:	bf00      	nop
 8003fc4:	20400001 	.word	0x20400001

08003fc8 <_fflush_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	690b      	ldr	r3, [r1, #16]
 8003fcc:	4605      	mov	r5, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	b913      	cbnz	r3, 8003fd8 <_fflush_r+0x10>
 8003fd2:	2500      	movs	r5, #0
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	bd38      	pop	{r3, r4, r5, pc}
 8003fd8:	b118      	cbz	r0, 8003fe2 <_fflush_r+0x1a>
 8003fda:	6983      	ldr	r3, [r0, #24]
 8003fdc:	b90b      	cbnz	r3, 8003fe2 <_fflush_r+0x1a>
 8003fde:	f000 f887 	bl	80040f0 <__sinit>
 8003fe2:	4b14      	ldr	r3, [pc, #80]	; (8004034 <_fflush_r+0x6c>)
 8003fe4:	429c      	cmp	r4, r3
 8003fe6:	d11b      	bne.n	8004020 <_fflush_r+0x58>
 8003fe8:	686c      	ldr	r4, [r5, #4]
 8003fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0ef      	beq.n	8003fd2 <_fflush_r+0xa>
 8003ff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ff4:	07d0      	lsls	r0, r2, #31
 8003ff6:	d404      	bmi.n	8004002 <_fflush_r+0x3a>
 8003ff8:	0599      	lsls	r1, r3, #22
 8003ffa:	d402      	bmi.n	8004002 <_fflush_r+0x3a>
 8003ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ffe:	f000 f915 	bl	800422c <__retarget_lock_acquire_recursive>
 8004002:	4628      	mov	r0, r5
 8004004:	4621      	mov	r1, r4
 8004006:	f7ff ff59 	bl	8003ebc <__sflush_r>
 800400a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800400c:	07da      	lsls	r2, r3, #31
 800400e:	4605      	mov	r5, r0
 8004010:	d4e0      	bmi.n	8003fd4 <_fflush_r+0xc>
 8004012:	89a3      	ldrh	r3, [r4, #12]
 8004014:	059b      	lsls	r3, r3, #22
 8004016:	d4dd      	bmi.n	8003fd4 <_fflush_r+0xc>
 8004018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800401a:	f000 f908 	bl	800422e <__retarget_lock_release_recursive>
 800401e:	e7d9      	b.n	8003fd4 <_fflush_r+0xc>
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <_fflush_r+0x70>)
 8004022:	429c      	cmp	r4, r3
 8004024:	d101      	bne.n	800402a <_fflush_r+0x62>
 8004026:	68ac      	ldr	r4, [r5, #8]
 8004028:	e7df      	b.n	8003fea <_fflush_r+0x22>
 800402a:	4b04      	ldr	r3, [pc, #16]	; (800403c <_fflush_r+0x74>)
 800402c:	429c      	cmp	r4, r3
 800402e:	bf08      	it	eq
 8004030:	68ec      	ldreq	r4, [r5, #12]
 8004032:	e7da      	b.n	8003fea <_fflush_r+0x22>
 8004034:	0800462c 	.word	0x0800462c
 8004038:	0800464c 	.word	0x0800464c
 800403c:	0800460c 	.word	0x0800460c

08004040 <std>:
 8004040:	2300      	movs	r3, #0
 8004042:	b510      	push	{r4, lr}
 8004044:	4604      	mov	r4, r0
 8004046:	e9c0 3300 	strd	r3, r3, [r0]
 800404a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800404e:	6083      	str	r3, [r0, #8]
 8004050:	8181      	strh	r1, [r0, #12]
 8004052:	6643      	str	r3, [r0, #100]	; 0x64
 8004054:	81c2      	strh	r2, [r0, #14]
 8004056:	6183      	str	r3, [r0, #24]
 8004058:	4619      	mov	r1, r3
 800405a:	2208      	movs	r2, #8
 800405c:	305c      	adds	r0, #92	; 0x5c
 800405e:	f7ff fa09 	bl	8003474 <memset>
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <std+0x38>)
 8004064:	6263      	str	r3, [r4, #36]	; 0x24
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <std+0x3c>)
 8004068:	62a3      	str	r3, [r4, #40]	; 0x28
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <std+0x40>)
 800406c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <std+0x44>)
 8004070:	6224      	str	r4, [r4, #32]
 8004072:	6323      	str	r3, [r4, #48]	; 0x30
 8004074:	bd10      	pop	{r4, pc}
 8004076:	bf00      	nop
 8004078:	0800439d 	.word	0x0800439d
 800407c:	080043bf 	.word	0x080043bf
 8004080:	080043f7 	.word	0x080043f7
 8004084:	0800441b 	.word	0x0800441b

08004088 <_cleanup_r>:
 8004088:	4901      	ldr	r1, [pc, #4]	; (8004090 <_cleanup_r+0x8>)
 800408a:	f000 b8af 	b.w	80041ec <_fwalk_reent>
 800408e:	bf00      	nop
 8004090:	08003fc9 	.word	0x08003fc9

08004094 <__sfmoreglue>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	2268      	movs	r2, #104	; 0x68
 8004098:	1e4d      	subs	r5, r1, #1
 800409a:	4355      	muls	r5, r2
 800409c:	460e      	mov	r6, r1
 800409e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040a2:	f7ff fad1 	bl	8003648 <_malloc_r>
 80040a6:	4604      	mov	r4, r0
 80040a8:	b140      	cbz	r0, 80040bc <__sfmoreglue+0x28>
 80040aa:	2100      	movs	r1, #0
 80040ac:	e9c0 1600 	strd	r1, r6, [r0]
 80040b0:	300c      	adds	r0, #12
 80040b2:	60a0      	str	r0, [r4, #8]
 80040b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040b8:	f7ff f9dc 	bl	8003474 <memset>
 80040bc:	4620      	mov	r0, r4
 80040be:	bd70      	pop	{r4, r5, r6, pc}

080040c0 <__sfp_lock_acquire>:
 80040c0:	4801      	ldr	r0, [pc, #4]	; (80040c8 <__sfp_lock_acquire+0x8>)
 80040c2:	f000 b8b3 	b.w	800422c <__retarget_lock_acquire_recursive>
 80040c6:	bf00      	nop
 80040c8:	20000139 	.word	0x20000139

080040cc <__sfp_lock_release>:
 80040cc:	4801      	ldr	r0, [pc, #4]	; (80040d4 <__sfp_lock_release+0x8>)
 80040ce:	f000 b8ae 	b.w	800422e <__retarget_lock_release_recursive>
 80040d2:	bf00      	nop
 80040d4:	20000139 	.word	0x20000139

080040d8 <__sinit_lock_acquire>:
 80040d8:	4801      	ldr	r0, [pc, #4]	; (80040e0 <__sinit_lock_acquire+0x8>)
 80040da:	f000 b8a7 	b.w	800422c <__retarget_lock_acquire_recursive>
 80040de:	bf00      	nop
 80040e0:	2000013a 	.word	0x2000013a

080040e4 <__sinit_lock_release>:
 80040e4:	4801      	ldr	r0, [pc, #4]	; (80040ec <__sinit_lock_release+0x8>)
 80040e6:	f000 b8a2 	b.w	800422e <__retarget_lock_release_recursive>
 80040ea:	bf00      	nop
 80040ec:	2000013a 	.word	0x2000013a

080040f0 <__sinit>:
 80040f0:	b510      	push	{r4, lr}
 80040f2:	4604      	mov	r4, r0
 80040f4:	f7ff fff0 	bl	80040d8 <__sinit_lock_acquire>
 80040f8:	69a3      	ldr	r3, [r4, #24]
 80040fa:	b11b      	cbz	r3, 8004104 <__sinit+0x14>
 80040fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004100:	f7ff bff0 	b.w	80040e4 <__sinit_lock_release>
 8004104:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004108:	6523      	str	r3, [r4, #80]	; 0x50
 800410a:	4b13      	ldr	r3, [pc, #76]	; (8004158 <__sinit+0x68>)
 800410c:	4a13      	ldr	r2, [pc, #76]	; (800415c <__sinit+0x6c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	62a2      	str	r2, [r4, #40]	; 0x28
 8004112:	42a3      	cmp	r3, r4
 8004114:	bf04      	itt	eq
 8004116:	2301      	moveq	r3, #1
 8004118:	61a3      	streq	r3, [r4, #24]
 800411a:	4620      	mov	r0, r4
 800411c:	f000 f820 	bl	8004160 <__sfp>
 8004120:	6060      	str	r0, [r4, #4]
 8004122:	4620      	mov	r0, r4
 8004124:	f000 f81c 	bl	8004160 <__sfp>
 8004128:	60a0      	str	r0, [r4, #8]
 800412a:	4620      	mov	r0, r4
 800412c:	f000 f818 	bl	8004160 <__sfp>
 8004130:	2200      	movs	r2, #0
 8004132:	60e0      	str	r0, [r4, #12]
 8004134:	2104      	movs	r1, #4
 8004136:	6860      	ldr	r0, [r4, #4]
 8004138:	f7ff ff82 	bl	8004040 <std>
 800413c:	68a0      	ldr	r0, [r4, #8]
 800413e:	2201      	movs	r2, #1
 8004140:	2109      	movs	r1, #9
 8004142:	f7ff ff7d 	bl	8004040 <std>
 8004146:	68e0      	ldr	r0, [r4, #12]
 8004148:	2202      	movs	r2, #2
 800414a:	2112      	movs	r1, #18
 800414c:	f7ff ff78 	bl	8004040 <std>
 8004150:	2301      	movs	r3, #1
 8004152:	61a3      	str	r3, [r4, #24]
 8004154:	e7d2      	b.n	80040fc <__sinit+0xc>
 8004156:	bf00      	nop
 8004158:	08004524 	.word	0x08004524
 800415c:	08004089 	.word	0x08004089

08004160 <__sfp>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	4607      	mov	r7, r0
 8004164:	f7ff ffac 	bl	80040c0 <__sfp_lock_acquire>
 8004168:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <__sfp+0x84>)
 800416a:	681e      	ldr	r6, [r3, #0]
 800416c:	69b3      	ldr	r3, [r6, #24]
 800416e:	b913      	cbnz	r3, 8004176 <__sfp+0x16>
 8004170:	4630      	mov	r0, r6
 8004172:	f7ff ffbd 	bl	80040f0 <__sinit>
 8004176:	3648      	adds	r6, #72	; 0x48
 8004178:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800417c:	3b01      	subs	r3, #1
 800417e:	d503      	bpl.n	8004188 <__sfp+0x28>
 8004180:	6833      	ldr	r3, [r6, #0]
 8004182:	b30b      	cbz	r3, 80041c8 <__sfp+0x68>
 8004184:	6836      	ldr	r6, [r6, #0]
 8004186:	e7f7      	b.n	8004178 <__sfp+0x18>
 8004188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800418c:	b9d5      	cbnz	r5, 80041c4 <__sfp+0x64>
 800418e:	4b16      	ldr	r3, [pc, #88]	; (80041e8 <__sfp+0x88>)
 8004190:	60e3      	str	r3, [r4, #12]
 8004192:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004196:	6665      	str	r5, [r4, #100]	; 0x64
 8004198:	f000 f847 	bl	800422a <__retarget_lock_init_recursive>
 800419c:	f7ff ff96 	bl	80040cc <__sfp_lock_release>
 80041a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80041a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80041a8:	6025      	str	r5, [r4, #0]
 80041aa:	61a5      	str	r5, [r4, #24]
 80041ac:	2208      	movs	r2, #8
 80041ae:	4629      	mov	r1, r5
 80041b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80041b4:	f7ff f95e 	bl	8003474 <memset>
 80041b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80041bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041c0:	4620      	mov	r0, r4
 80041c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041c4:	3468      	adds	r4, #104	; 0x68
 80041c6:	e7d9      	b.n	800417c <__sfp+0x1c>
 80041c8:	2104      	movs	r1, #4
 80041ca:	4638      	mov	r0, r7
 80041cc:	f7ff ff62 	bl	8004094 <__sfmoreglue>
 80041d0:	4604      	mov	r4, r0
 80041d2:	6030      	str	r0, [r6, #0]
 80041d4:	2800      	cmp	r0, #0
 80041d6:	d1d5      	bne.n	8004184 <__sfp+0x24>
 80041d8:	f7ff ff78 	bl	80040cc <__sfp_lock_release>
 80041dc:	230c      	movs	r3, #12
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	e7ee      	b.n	80041c0 <__sfp+0x60>
 80041e2:	bf00      	nop
 80041e4:	08004524 	.word	0x08004524
 80041e8:	ffff0001 	.word	0xffff0001

080041ec <_fwalk_reent>:
 80041ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f0:	4606      	mov	r6, r0
 80041f2:	4688      	mov	r8, r1
 80041f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80041f8:	2700      	movs	r7, #0
 80041fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041fe:	f1b9 0901 	subs.w	r9, r9, #1
 8004202:	d505      	bpl.n	8004210 <_fwalk_reent+0x24>
 8004204:	6824      	ldr	r4, [r4, #0]
 8004206:	2c00      	cmp	r4, #0
 8004208:	d1f7      	bne.n	80041fa <_fwalk_reent+0xe>
 800420a:	4638      	mov	r0, r7
 800420c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004210:	89ab      	ldrh	r3, [r5, #12]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d907      	bls.n	8004226 <_fwalk_reent+0x3a>
 8004216:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800421a:	3301      	adds	r3, #1
 800421c:	d003      	beq.n	8004226 <_fwalk_reent+0x3a>
 800421e:	4629      	mov	r1, r5
 8004220:	4630      	mov	r0, r6
 8004222:	47c0      	blx	r8
 8004224:	4307      	orrs	r7, r0
 8004226:	3568      	adds	r5, #104	; 0x68
 8004228:	e7e9      	b.n	80041fe <_fwalk_reent+0x12>

0800422a <__retarget_lock_init_recursive>:
 800422a:	4770      	bx	lr

0800422c <__retarget_lock_acquire_recursive>:
 800422c:	4770      	bx	lr

0800422e <__retarget_lock_release_recursive>:
 800422e:	4770      	bx	lr

08004230 <__swhatbuf_r>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	460e      	mov	r6, r1
 8004234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004238:	2900      	cmp	r1, #0
 800423a:	b096      	sub	sp, #88	; 0x58
 800423c:	4614      	mov	r4, r2
 800423e:	461d      	mov	r5, r3
 8004240:	da08      	bge.n	8004254 <__swhatbuf_r+0x24>
 8004242:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	602a      	str	r2, [r5, #0]
 800424a:	061a      	lsls	r2, r3, #24
 800424c:	d410      	bmi.n	8004270 <__swhatbuf_r+0x40>
 800424e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004252:	e00e      	b.n	8004272 <__swhatbuf_r+0x42>
 8004254:	466a      	mov	r2, sp
 8004256:	f000 f907 	bl	8004468 <_fstat_r>
 800425a:	2800      	cmp	r0, #0
 800425c:	dbf1      	blt.n	8004242 <__swhatbuf_r+0x12>
 800425e:	9a01      	ldr	r2, [sp, #4]
 8004260:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004264:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004268:	425a      	negs	r2, r3
 800426a:	415a      	adcs	r2, r3
 800426c:	602a      	str	r2, [r5, #0]
 800426e:	e7ee      	b.n	800424e <__swhatbuf_r+0x1e>
 8004270:	2340      	movs	r3, #64	; 0x40
 8004272:	2000      	movs	r0, #0
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	b016      	add	sp, #88	; 0x58
 8004278:	bd70      	pop	{r4, r5, r6, pc}
	...

0800427c <__smakebuf_r>:
 800427c:	898b      	ldrh	r3, [r1, #12]
 800427e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004280:	079d      	lsls	r5, r3, #30
 8004282:	4606      	mov	r6, r0
 8004284:	460c      	mov	r4, r1
 8004286:	d507      	bpl.n	8004298 <__smakebuf_r+0x1c>
 8004288:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800428c:	6023      	str	r3, [r4, #0]
 800428e:	6123      	str	r3, [r4, #16]
 8004290:	2301      	movs	r3, #1
 8004292:	6163      	str	r3, [r4, #20]
 8004294:	b002      	add	sp, #8
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	ab01      	add	r3, sp, #4
 800429a:	466a      	mov	r2, sp
 800429c:	f7ff ffc8 	bl	8004230 <__swhatbuf_r>
 80042a0:	9900      	ldr	r1, [sp, #0]
 80042a2:	4605      	mov	r5, r0
 80042a4:	4630      	mov	r0, r6
 80042a6:	f7ff f9cf 	bl	8003648 <_malloc_r>
 80042aa:	b948      	cbnz	r0, 80042c0 <__smakebuf_r+0x44>
 80042ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042b0:	059a      	lsls	r2, r3, #22
 80042b2:	d4ef      	bmi.n	8004294 <__smakebuf_r+0x18>
 80042b4:	f023 0303 	bic.w	r3, r3, #3
 80042b8:	f043 0302 	orr.w	r3, r3, #2
 80042bc:	81a3      	strh	r3, [r4, #12]
 80042be:	e7e3      	b.n	8004288 <__smakebuf_r+0xc>
 80042c0:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <__smakebuf_r+0x7c>)
 80042c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80042c4:	89a3      	ldrh	r3, [r4, #12]
 80042c6:	6020      	str	r0, [r4, #0]
 80042c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042cc:	81a3      	strh	r3, [r4, #12]
 80042ce:	9b00      	ldr	r3, [sp, #0]
 80042d0:	6163      	str	r3, [r4, #20]
 80042d2:	9b01      	ldr	r3, [sp, #4]
 80042d4:	6120      	str	r0, [r4, #16]
 80042d6:	b15b      	cbz	r3, 80042f0 <__smakebuf_r+0x74>
 80042d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042dc:	4630      	mov	r0, r6
 80042de:	f000 f8d5 	bl	800448c <_isatty_r>
 80042e2:	b128      	cbz	r0, 80042f0 <__smakebuf_r+0x74>
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	f023 0303 	bic.w	r3, r3, #3
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	81a3      	strh	r3, [r4, #12]
 80042f0:	89a0      	ldrh	r0, [r4, #12]
 80042f2:	4305      	orrs	r5, r0
 80042f4:	81a5      	strh	r5, [r4, #12]
 80042f6:	e7cd      	b.n	8004294 <__smakebuf_r+0x18>
 80042f8:	08004089 	.word	0x08004089

080042fc <__malloc_lock>:
 80042fc:	4801      	ldr	r0, [pc, #4]	; (8004304 <__malloc_lock+0x8>)
 80042fe:	f7ff bf95 	b.w	800422c <__retarget_lock_acquire_recursive>
 8004302:	bf00      	nop
 8004304:	20000138 	.word	0x20000138

08004308 <__malloc_unlock>:
 8004308:	4801      	ldr	r0, [pc, #4]	; (8004310 <__malloc_unlock+0x8>)
 800430a:	f7ff bf90 	b.w	800422e <__retarget_lock_release_recursive>
 800430e:	bf00      	nop
 8004310:	20000138 	.word	0x20000138

08004314 <_raise_r>:
 8004314:	291f      	cmp	r1, #31
 8004316:	b538      	push	{r3, r4, r5, lr}
 8004318:	4604      	mov	r4, r0
 800431a:	460d      	mov	r5, r1
 800431c:	d904      	bls.n	8004328 <_raise_r+0x14>
 800431e:	2316      	movs	r3, #22
 8004320:	6003      	str	r3, [r0, #0]
 8004322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004326:	bd38      	pop	{r3, r4, r5, pc}
 8004328:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800432a:	b112      	cbz	r2, 8004332 <_raise_r+0x1e>
 800432c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004330:	b94b      	cbnz	r3, 8004346 <_raise_r+0x32>
 8004332:	4620      	mov	r0, r4
 8004334:	f000 f830 	bl	8004398 <_getpid_r>
 8004338:	462a      	mov	r2, r5
 800433a:	4601      	mov	r1, r0
 800433c:	4620      	mov	r0, r4
 800433e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004342:	f000 b817 	b.w	8004374 <_kill_r>
 8004346:	2b01      	cmp	r3, #1
 8004348:	d00a      	beq.n	8004360 <_raise_r+0x4c>
 800434a:	1c59      	adds	r1, r3, #1
 800434c:	d103      	bne.n	8004356 <_raise_r+0x42>
 800434e:	2316      	movs	r3, #22
 8004350:	6003      	str	r3, [r0, #0]
 8004352:	2001      	movs	r0, #1
 8004354:	e7e7      	b.n	8004326 <_raise_r+0x12>
 8004356:	2400      	movs	r4, #0
 8004358:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800435c:	4628      	mov	r0, r5
 800435e:	4798      	blx	r3
 8004360:	2000      	movs	r0, #0
 8004362:	e7e0      	b.n	8004326 <_raise_r+0x12>

08004364 <raise>:
 8004364:	4b02      	ldr	r3, [pc, #8]	; (8004370 <raise+0xc>)
 8004366:	4601      	mov	r1, r0
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	f7ff bfd3 	b.w	8004314 <_raise_r>
 800436e:	bf00      	nop
 8004370:	2000000c 	.word	0x2000000c

08004374 <_kill_r>:
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4d07      	ldr	r5, [pc, #28]	; (8004394 <_kill_r+0x20>)
 8004378:	2300      	movs	r3, #0
 800437a:	4604      	mov	r4, r0
 800437c:	4608      	mov	r0, r1
 800437e:	4611      	mov	r1, r2
 8004380:	602b      	str	r3, [r5, #0]
 8004382:	f7fc fc6b 	bl	8000c5c <_kill>
 8004386:	1c43      	adds	r3, r0, #1
 8004388:	d102      	bne.n	8004390 <_kill_r+0x1c>
 800438a:	682b      	ldr	r3, [r5, #0]
 800438c:	b103      	cbz	r3, 8004390 <_kill_r+0x1c>
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	bd38      	pop	{r3, r4, r5, pc}
 8004392:	bf00      	nop
 8004394:	2000013c 	.word	0x2000013c

08004398 <_getpid_r>:
 8004398:	f7fc bc58 	b.w	8000c4c <_getpid>

0800439c <__sread>:
 800439c:	b510      	push	{r4, lr}
 800439e:	460c      	mov	r4, r1
 80043a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a4:	f000 f894 	bl	80044d0 <_read_r>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	bfab      	itete	ge
 80043ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043ae:	89a3      	ldrhlt	r3, [r4, #12]
 80043b0:	181b      	addge	r3, r3, r0
 80043b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043b6:	bfac      	ite	ge
 80043b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80043ba:	81a3      	strhlt	r3, [r4, #12]
 80043bc:	bd10      	pop	{r4, pc}

080043be <__swrite>:
 80043be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c2:	461f      	mov	r7, r3
 80043c4:	898b      	ldrh	r3, [r1, #12]
 80043c6:	05db      	lsls	r3, r3, #23
 80043c8:	4605      	mov	r5, r0
 80043ca:	460c      	mov	r4, r1
 80043cc:	4616      	mov	r6, r2
 80043ce:	d505      	bpl.n	80043dc <__swrite+0x1e>
 80043d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d4:	2302      	movs	r3, #2
 80043d6:	2200      	movs	r2, #0
 80043d8:	f000 f868 	bl	80044ac <_lseek_r>
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043e6:	81a3      	strh	r3, [r4, #12]
 80043e8:	4632      	mov	r2, r6
 80043ea:	463b      	mov	r3, r7
 80043ec:	4628      	mov	r0, r5
 80043ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043f2:	f000 b817 	b.w	8004424 <_write_r>

080043f6 <__sseek>:
 80043f6:	b510      	push	{r4, lr}
 80043f8:	460c      	mov	r4, r1
 80043fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043fe:	f000 f855 	bl	80044ac <_lseek_r>
 8004402:	1c43      	adds	r3, r0, #1
 8004404:	89a3      	ldrh	r3, [r4, #12]
 8004406:	bf15      	itete	ne
 8004408:	6560      	strne	r0, [r4, #84]	; 0x54
 800440a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800440e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004412:	81a3      	strheq	r3, [r4, #12]
 8004414:	bf18      	it	ne
 8004416:	81a3      	strhne	r3, [r4, #12]
 8004418:	bd10      	pop	{r4, pc}

0800441a <__sclose>:
 800441a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800441e:	f000 b813 	b.w	8004448 <_close_r>
	...

08004424 <_write_r>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	4d07      	ldr	r5, [pc, #28]	; (8004444 <_write_r+0x20>)
 8004428:	4604      	mov	r4, r0
 800442a:	4608      	mov	r0, r1
 800442c:	4611      	mov	r1, r2
 800442e:	2200      	movs	r2, #0
 8004430:	602a      	str	r2, [r5, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	f7fc fc49 	bl	8000cca <_write>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d102      	bne.n	8004442 <_write_r+0x1e>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	b103      	cbz	r3, 8004442 <_write_r+0x1e>
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	bd38      	pop	{r3, r4, r5, pc}
 8004444:	2000013c 	.word	0x2000013c

08004448 <_close_r>:
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	4d06      	ldr	r5, [pc, #24]	; (8004464 <_close_r+0x1c>)
 800444c:	2300      	movs	r3, #0
 800444e:	4604      	mov	r4, r0
 8004450:	4608      	mov	r0, r1
 8004452:	602b      	str	r3, [r5, #0]
 8004454:	f7fc fc55 	bl	8000d02 <_close>
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d102      	bne.n	8004462 <_close_r+0x1a>
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	b103      	cbz	r3, 8004462 <_close_r+0x1a>
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	bd38      	pop	{r3, r4, r5, pc}
 8004464:	2000013c 	.word	0x2000013c

08004468 <_fstat_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	4d07      	ldr	r5, [pc, #28]	; (8004488 <_fstat_r+0x20>)
 800446c:	2300      	movs	r3, #0
 800446e:	4604      	mov	r4, r0
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	602b      	str	r3, [r5, #0]
 8004476:	f7fc fc50 	bl	8000d1a <_fstat>
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	d102      	bne.n	8004484 <_fstat_r+0x1c>
 800447e:	682b      	ldr	r3, [r5, #0]
 8004480:	b103      	cbz	r3, 8004484 <_fstat_r+0x1c>
 8004482:	6023      	str	r3, [r4, #0]
 8004484:	bd38      	pop	{r3, r4, r5, pc}
 8004486:	bf00      	nop
 8004488:	2000013c 	.word	0x2000013c

0800448c <_isatty_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4d06      	ldr	r5, [pc, #24]	; (80044a8 <_isatty_r+0x1c>)
 8004490:	2300      	movs	r3, #0
 8004492:	4604      	mov	r4, r0
 8004494:	4608      	mov	r0, r1
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	f7fc fc4f 	bl	8000d3a <_isatty>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_isatty_r+0x1a>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_isatty_r+0x1a>
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	2000013c 	.word	0x2000013c

080044ac <_lseek_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4d07      	ldr	r5, [pc, #28]	; (80044cc <_lseek_r+0x20>)
 80044b0:	4604      	mov	r4, r0
 80044b2:	4608      	mov	r0, r1
 80044b4:	4611      	mov	r1, r2
 80044b6:	2200      	movs	r2, #0
 80044b8:	602a      	str	r2, [r5, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f7fc fc48 	bl	8000d50 <_lseek>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d102      	bne.n	80044ca <_lseek_r+0x1e>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	b103      	cbz	r3, 80044ca <_lseek_r+0x1e>
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
 80044cc:	2000013c 	.word	0x2000013c

080044d0 <_read_r>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	4d07      	ldr	r5, [pc, #28]	; (80044f0 <_read_r+0x20>)
 80044d4:	4604      	mov	r4, r0
 80044d6:	4608      	mov	r0, r1
 80044d8:	4611      	mov	r1, r2
 80044da:	2200      	movs	r2, #0
 80044dc:	602a      	str	r2, [r5, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	f7fc fbd6 	bl	8000c90 <_read>
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	d102      	bne.n	80044ee <_read_r+0x1e>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	b103      	cbz	r3, 80044ee <_read_r+0x1e>
 80044ec:	6023      	str	r3, [r4, #0]
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
 80044f0:	2000013c 	.word	0x2000013c

080044f4 <_init>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	bf00      	nop
 80044f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fa:	bc08      	pop	{r3}
 80044fc:	469e      	mov	lr, r3
 80044fe:	4770      	bx	lr

08004500 <_fini>:
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004502:	bf00      	nop
 8004504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004506:	bc08      	pop	{r3}
 8004508:	469e      	mov	lr, r3
 800450a:	4770      	bx	lr
