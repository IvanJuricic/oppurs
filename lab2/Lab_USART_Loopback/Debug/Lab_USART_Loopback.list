
Lab_USART_Loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000285c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a54  08002a54  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a54  08002a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a5c  08002a5c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a5c  08002a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a60  08002a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000000ec  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000158  20000158  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008470  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000171a  00000000  00000000  0002850c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  00029c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000648  00000000  00000000  0002a2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002493  00000000  00000000  0002a940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008dd5  00000000  00000000  0002cdd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c494e  00000000  00000000  00035ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fa4f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001eb8  00000000  00000000  000fa548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080029d4 	.word	0x080029d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080029d4 	.word	0x080029d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	int flag = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
	char c;

	MX_USART2_UART_Init();
 800058e:	f000 f89f 	bl	80006d0 <MX_USART2_UART_Init>

	while(1) {
		if(USART2_Dequeue(&c) != 0 && flag == 0) {
 8000592:	1cfb      	adds	r3, r7, #3
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f963 	bl	8000860 <USART2_Dequeue>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d0f8      	beq.n	8000592 <main+0xe>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1f5      	bne.n	8000592 <main+0xe>
			if(c == 'x') {
 80005a6:	78fb      	ldrb	r3, [r7, #3]
 80005a8:	2b78      	cmp	r3, #120	; 0x78
 80005aa:	d105      	bne.n	80005b8 <main+0x34>
				print(EXIT_MSG);
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <main+0x40>)
 80005ae:	f000 f98b 	bl	80008c8 <print>
				flag = 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	607b      	str	r3, [r7, #4]
				continue;
 80005b6:	e003      	b.n	80005c0 <main+0x3c>
			}
			USART2_SendChar(c);
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f93e 	bl	800083c <USART2_SendChar>
		if(USART2_Dequeue(&c) != 0 && flag == 0) {
 80005c0:	e7e7      	b.n	8000592 <main+0xe>
 80005c2:	bf00      	nop
 80005c4:	080029ec 	.word	0x080029ec

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <Error_Handler+0x8>

080005d2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <NMI_Handler+0x4>

080005d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <HardFault_Handler+0x4>

080005de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <MemManage_Handler+0x4>

080005e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <BusFault_Handler+0x4>

080005ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <UsageFault_Handler+0x4>

080005f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061e:	f000 f9a1 	bl	8000964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <USART2_IRQHandler+0x14>)
 800062e:	f000 fde9 	bl	8001204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART_IRQHandler(&huart2);
 8000632:	4802      	ldr	r0, [pc, #8]	; (800063c <USART2_IRQHandler+0x14>)
 8000634:	f000 f8c6 	bl	80007c4 <USER_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200000fc 	.word	0x200000fc

08000640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000648:	4a14      	ldr	r2, [pc, #80]	; (800069c <_sbrk+0x5c>)
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <_sbrk+0x60>)
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <_sbrk+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d102      	bne.n	8000662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <_sbrk+0x64>)
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <_sbrk+0x68>)
 8000660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <_sbrk+0x64>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	693a      	ldr	r2, [r7, #16]
 800066c:	429a      	cmp	r2, r3
 800066e:	d207      	bcs.n	8000680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000670:	f001 fcfc 	bl	800206c <__errno>
 8000674:	4603      	mov	r3, r0
 8000676:	220c      	movs	r2, #12
 8000678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800067a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800067e:	e009      	b.n	8000694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <_sbrk+0x64>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <_sbrk+0x64>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <_sbrk+0x64>)
 8000690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000692:	68fb      	ldr	r3, [r7, #12]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20020000 	.word	0x20020000
 80006a0:	00000400 	.word	0x00000400
 80006a4:	200000f8 	.word	0x200000f8
 80006a8:	20000158 	.word	0x20000158

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <SystemInit+0x20>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b6:	4a05      	ldr	r2, [pc, #20]	; (80006cc <SystemInit+0x20>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART2_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000708:	f000 fc94 	bl	8001034 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f7ff ff59 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000fc 	.word	0x200000fc
 8000720:	40004400 	.word	0x40004400

08000724 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a1d      	ldr	r2, [pc, #116]	; (80007b8 <HAL_UART_MspInit+0x94>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d133      	bne.n	80007ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <HAL_UART_MspInit+0x98>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <HAL_UART_MspInit+0x98>)
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	6413      	str	r3, [r2, #64]	; 0x40
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <HAL_UART_MspInit+0x98>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_UART_MspInit+0x98>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <HAL_UART_MspInit+0x98>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_UART_MspInit+0x98>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800077e:	230c      	movs	r3, #12
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800078e:	2307      	movs	r3, #7
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	4809      	ldr	r0, [pc, #36]	; (80007c0 <HAL_UART_MspInit+0x9c>)
 800079a:	f000 fa7b 	bl	8000c94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2026      	movs	r0, #38	; 0x26
 80007a4:	f000 f9ab 	bl	8000afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007a8:	2026      	movs	r0, #38	; 0x26
 80007aa:	f000 f9c4 	bl	8000b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	; 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40004400 	.word	0x40004400
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020000 	.word	0x40020000

080007c4 <USER_UART_IRQHandler>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USER_UART_IRQHandler(UART_HandleTypeDef* huart) {
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a15      	ldr	r2, [pc, #84]	; (8000828 <USER_UART_IRQHandler+0x64>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d122      	bne.n	800081c <USER_UART_IRQHandler+0x58>
		char rx_data;
		rx_data = __HAL_UART_FLUSH_DRREGISTER(huart);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	73fb      	strb	r3, [r7, #15]

		static char rx_head;
		rx_head = RX_BUFF_HEAD + 1;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <USER_UART_IRQHandler+0x68>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	3301      	adds	r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <USER_UART_IRQHandler+0x6c>)
 80007ea:	701a      	strb	r2, [r3, #0]
		if(rx_head == BUFF_SIZE) {
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <USER_UART_IRQHandler+0x6c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b32      	cmp	r3, #50	; 0x32
 80007f2:	d102      	bne.n	80007fa <USER_UART_IRQHandler+0x36>
			rx_head = 0;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <USER_UART_IRQHandler+0x6c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
		}
		if(rx_head != RX_BUFF_TAIL) {
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <USER_UART_IRQHandler+0x6c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <USER_UART_IRQHandler+0x70>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	429a      	cmp	r2, r3
 8000806:	d009      	beq.n	800081c <USER_UART_IRQHandler+0x58>
			RX_BUFF[RX_BUFF_HEAD] = rx_data;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <USER_UART_IRQHandler+0x68>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	490a      	ldr	r1, [pc, #40]	; (8000838 <USER_UART_IRQHandler+0x74>)
 800080e:	7bfa      	ldrb	r2, [r7, #15]
 8000810:	54ca      	strb	r2, [r1, r3]
			RX_BUFF_HEAD = rx_head;
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <USER_UART_IRQHandler+0x6c>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <USER_UART_IRQHandler+0x68>)
 800081a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	40004400 	.word	0x40004400
 800082c:	200000f0 	.word	0x200000f0
 8000830:	20000140 	.word	0x20000140
 8000834:	200000f4 	.word	0x200000f4
 8000838:	20000088 	.word	0x20000088

0800083c <USART2_SendChar>:

void USART2_SendChar(uint8_t c) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &c, sizeof(c), 10);
 8000846:	1df9      	adds	r1, r7, #7
 8000848:	230a      	movs	r3, #10
 800084a:	2201      	movs	r2, #1
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <USART2_SendChar+0x20>)
 800084e:	f000 fc46 	bl	80010de <HAL_UART_Transmit>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000fc 	.word	0x200000fc

08000860 <USART2_Dequeue>:

int USART2_Dequeue(char *c) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	int ret;
	ret = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
	*c = 0;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000872:	2026      	movs	r0, #38	; 0x26
 8000874:	f000 f96d 	bl	8000b52 <HAL_NVIC_DisableIRQ>

	if(RX_BUFF_HEAD != RX_BUFF_TAIL) {
 8000878:	4b10      	ldr	r3, [pc, #64]	; (80008bc <USART2_Dequeue+0x5c>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <USART2_Dequeue+0x60>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	429a      	cmp	r2, r3
 8000882:	d013      	beq.n	80008ac <USART2_Dequeue+0x4c>

		*c = RX_BUFF[RX_BUFF_TAIL];
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <USART2_Dequeue+0x60>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <USART2_Dequeue+0x64>)
 800088a:	5cd2      	ldrb	r2, [r2, r3]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	701a      	strb	r2, [r3, #0]
		RX_BUFF_TAIL++;
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <USART2_Dequeue+0x60>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <USART2_Dequeue+0x60>)
 8000898:	6013      	str	r3, [r2, #0]

		if(RX_BUFF_TAIL == BUFF_SIZE) {
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <USART2_Dequeue+0x60>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b32      	cmp	r3, #50	; 0x32
 80008a0:	d102      	bne.n	80008a8 <USART2_Dequeue+0x48>
			RX_BUFF_TAIL = 0;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <USART2_Dequeue+0x60>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
		}

		ret = 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
	}

	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ac:	2026      	movs	r0, #38	; 0x26
 80008ae:	f000 f942 	bl	8000b36 <HAL_NVIC_EnableIRQ>
	return ret;
 80008b2:	68fb      	ldr	r3, [r7, #12]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000f0 	.word	0x200000f0
 80008c0:	200000f4 	.word	0x200000f4
 80008c4:	20000088 	.word	0x20000088

080008c8 <print>:

void print(char *msg) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	memset(TX_BUFF, '\0', MSG_BUFF);
 80008d0:	2232      	movs	r2, #50	; 0x32
 80008d2:	2100      	movs	r1, #0
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <print+0x3c>)
 80008d6:	f001 fbf3 	bl	80020c0 <memset>
	snprintf(TX_BUFF, MSG_BUFF, "%s\n", msg);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <print+0x40>)
 80008de:	2132      	movs	r1, #50	; 0x32
 80008e0:	4808      	ldr	r0, [pc, #32]	; (8000904 <print+0x3c>)
 80008e2:	f001 fbf5 	bl	80020d0 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)TX_BUFF, strlen(TX_BUFF), 10);
 80008e6:	4807      	ldr	r0, [pc, #28]	; (8000904 <print+0x3c>)
 80008e8:	f7ff fc72 	bl	80001d0 <strlen>
 80008ec:	4603      	mov	r3, r0
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	230a      	movs	r3, #10
 80008f2:	4904      	ldr	r1, [pc, #16]	; (8000904 <print+0x3c>)
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <print+0x44>)
 80008f6:	f000 fbf2 	bl	80010de <HAL_UART_Transmit>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000bc 	.word	0x200000bc
 8000908:	08002a14 	.word	0x08002a14
 800090c:	200000fc 	.word	0x200000fc

08000910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000948 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000916:	490e      	ldr	r1, [pc, #56]	; (8000950 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000918:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800092c:	4c0b      	ldr	r4, [pc, #44]	; (800095c <LoopFillZerobss+0x26>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800093a:	f7ff feb7 	bl	80006ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093e:	f001 fb9b 	bl	8002078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000942:	f7ff fe1f 	bl	8000584 <main>
  bx  lr    
 8000946:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000954:	08002a64 	.word	0x08002a64
  ldr r2, =_sbss
 8000958:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800095c:	20000158 	.word	0x20000158

08000960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC_IRQHandler>
	...

08000964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_IncTick+0x20>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_IncTick+0x24>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4413      	add	r3, r2
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_IncTick+0x24>)
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000004 	.word	0x20000004
 8000988:	20000144 	.word	0x20000144

0800098c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return uwTick;
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <HAL_GetTick+0x14>)
 8000992:	681b      	ldr	r3, [r3, #0]
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20000144 	.word	0x20000144

080009a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <__NVIC_GetPriorityGrouping+0x18>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	f003 0307 	and.w	r3, r3, #7
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	db0b      	blt.n	80009ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	f003 021f 	and.w	r2, r3, #31
 80009d8:	4907      	ldr	r1, [pc, #28]	; (80009f8 <__NVIC_EnableIRQ+0x38>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	2001      	movs	r0, #1
 80009e2:	fa00 f202 	lsl.w	r2, r0, r2
 80009e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100

080009fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db12      	blt.n	8000a34 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	490a      	ldr	r1, [pc, #40]	; (8000a40 <__NVIC_DisableIRQ+0x44>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	3320      	adds	r3, #32
 8000a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a28:	f3bf 8f4f 	dsb	sy
}
 8000a2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a2e:	f3bf 8f6f 	isb	sy
}
 8000a32:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
         );
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff48 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ffbc 	bl	8000a98 <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff8b 	bl	8000a44 <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff3b 	bl	80009c0 <__NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff4b 	bl	80009fc <__NVIC_DisableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff ff06 	bl	800098c <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d008      	beq.n	8000ba0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e052      	b.n	8000c46 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f022 0216 	bic.w	r2, r2, #22
 8000bae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	695a      	ldr	r2, [r3, #20]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bbe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d103      	bne.n	8000bd0 <HAL_DMA_Abort+0x62>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d007      	beq.n	8000be0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f022 0208 	bic.w	r2, r2, #8
 8000bde:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f022 0201 	bic.w	r2, r2, #1
 8000bee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000bf0:	e013      	b.n	8000c1a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000bf2:	f7ff fecb 	bl	800098c <HAL_GetTick>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	2b05      	cmp	r3, #5
 8000bfe:	d90c      	bls.n	8000c1a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2220      	movs	r2, #32
 8000c04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2203      	movs	r2, #3
 8000c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e015      	b.n	8000c46 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1e4      	bne.n	8000bf2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c2c:	223f      	movs	r2, #63	; 0x3f
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2201      	movs	r2, #1
 8000c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d004      	beq.n	8000c6c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e00c      	b.n	8000c86 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2205      	movs	r2, #5
 8000c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f022 0201 	bic.w	r2, r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
 8000cae:	e16b      	b.n	8000f88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	f040 815a 	bne.w	8000f82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d005      	beq.n	8000ce6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d130      	bne.n	8000d48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	68da      	ldr	r2, [r3, #12]
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	091b      	lsrs	r3, r3, #4
 8000d32:	f003 0201 	and.w	r2, r3, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d017      	beq.n	8000d84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d123      	bne.n	8000dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	08da      	lsrs	r2, r3, #3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3208      	adds	r2, #8
 8000d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	691a      	ldr	r2, [r3, #16]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3208      	adds	r2, #8
 8000dd2:	69b9      	ldr	r1, [r7, #24]
 8000dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0203 	and.w	r2, r3, #3
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 80b4 	beq.w	8000f82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b60      	ldr	r3, [pc, #384]	; (8000fa0 <HAL_GPIO_Init+0x30c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a5f      	ldr	r2, [pc, #380]	; (8000fa0 <HAL_GPIO_Init+0x30c>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b5d      	ldr	r3, [pc, #372]	; (8000fa0 <HAL_GPIO_Init+0x30c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e36:	4a5b      	ldr	r2, [pc, #364]	; (8000fa4 <HAL_GPIO_Init+0x310>)
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a52      	ldr	r2, [pc, #328]	; (8000fa8 <HAL_GPIO_Init+0x314>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d02b      	beq.n	8000eba <HAL_GPIO_Init+0x226>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a51      	ldr	r2, [pc, #324]	; (8000fac <HAL_GPIO_Init+0x318>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d025      	beq.n	8000eb6 <HAL_GPIO_Init+0x222>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a50      	ldr	r2, [pc, #320]	; (8000fb0 <HAL_GPIO_Init+0x31c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d01f      	beq.n	8000eb2 <HAL_GPIO_Init+0x21e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4f      	ldr	r2, [pc, #316]	; (8000fb4 <HAL_GPIO_Init+0x320>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d019      	beq.n	8000eae <HAL_GPIO_Init+0x21a>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4e      	ldr	r2, [pc, #312]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d013      	beq.n	8000eaa <HAL_GPIO_Init+0x216>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4d      	ldr	r2, [pc, #308]	; (8000fbc <HAL_GPIO_Init+0x328>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00d      	beq.n	8000ea6 <HAL_GPIO_Init+0x212>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4c      	ldr	r2, [pc, #304]	; (8000fc0 <HAL_GPIO_Init+0x32c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d007      	beq.n	8000ea2 <HAL_GPIO_Init+0x20e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4b      	ldr	r2, [pc, #300]	; (8000fc4 <HAL_GPIO_Init+0x330>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_GPIO_Init+0x20a>
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	e00e      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000e9e:	2308      	movs	r3, #8
 8000ea0:	e00c      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000ea2:	2306      	movs	r3, #6
 8000ea4:	e00a      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	e008      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000eaa:	2304      	movs	r3, #4
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e004      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e002      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <HAL_GPIO_Init+0x228>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	69fa      	ldr	r2, [r7, #28]
 8000ebe:	f002 0203 	and.w	r2, r2, #3
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	4093      	lsls	r3, r2
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ecc:	4935      	ldr	r1, [pc, #212]	; (8000fa4 <HAL_GPIO_Init+0x310>)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eda:	4b3b      	ldr	r3, [pc, #236]	; (8000fc8 <HAL_GPIO_Init+0x334>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000efe:	4a32      	ldr	r2, [pc, #200]	; (8000fc8 <HAL_GPIO_Init+0x334>)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f04:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <HAL_GPIO_Init+0x334>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f28:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <HAL_GPIO_Init+0x334>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f2e:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <HAL_GPIO_Init+0x334>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f52:	4a1d      	ldr	r2, [pc, #116]	; (8000fc8 <HAL_GPIO_Init+0x334>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <HAL_GPIO_Init+0x334>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <HAL_GPIO_Init+0x334>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3301      	adds	r3, #1
 8000f86:	61fb      	str	r3, [r7, #28]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	f67f ae90 	bls.w	8000cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40013800 	.word	0x40013800
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020c00 	.word	0x40020c00
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40021400 	.word	0x40021400
 8000fc0:	40021800 	.word	0x40021800
 8000fc4:	40021c00 	.word	0x40021c00
 8000fc8:	40013c00 	.word	0x40013c00

08000fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000fe8:	f7ff fff0 	bl	8000fcc <HAL_RCC_GetHCLKFreq>
 8000fec:	4602      	mov	r2, r0
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	0a9b      	lsrs	r3, r3, #10
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	4903      	ldr	r1, [pc, #12]	; (8001008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000ffa:	5ccb      	ldrb	r3, [r1, r3]
 8000ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001000:	4618      	mov	r0, r3
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800
 8001008:	08002a18 	.word	0x08002a18

0800100c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001010:	f7ff ffdc 	bl	8000fcc <HAL_RCC_GetHCLKFreq>
 8001014:	4602      	mov	r2, r0
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	0b5b      	lsrs	r3, r3, #13
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	4903      	ldr	r1, [pc, #12]	; (8001030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001022:	5ccb      	ldrb	r3, [r1, r3]
 8001024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001028:	4618      	mov	r0, r3
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	08002a18 	.word	0x08002a18

08001034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e047      	b.n	80010d6 <HAL_UART_Init+0xa2>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d106      	bne.n	8001060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fb62 	bl	8000724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2224      	movs	r2, #36	; 0x24
 8001064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68da      	ldr	r2, [r3, #12]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 fd83 	bl	8001b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800108c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800109c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010ac:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68da      	ldr	r2, [r3, #12]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f042 0220 	orr.w	r2, r2, #32
 80010bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2220      	movs	r2, #32
 80010c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2220      	movs	r2, #32
 80010d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b08a      	sub	sp, #40	; 0x28
 80010e2:	af02      	add	r7, sp, #8
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4613      	mov	r3, r2
 80010ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b20      	cmp	r3, #32
 80010fc:	d17c      	bne.n	80011f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <HAL_UART_Transmit+0x2c>
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e075      	b.n	80011fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <HAL_UART_Transmit+0x3e>
 8001118:	2302      	movs	r3, #2
 800111a:	e06e      	b.n	80011fa <HAL_UART_Transmit+0x11c>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2221      	movs	r2, #33	; 0x21
 800112e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001132:	f7ff fc2b 	bl	800098c <HAL_GetTick>
 8001136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	88fa      	ldrh	r2, [r7, #6]
 800113c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	88fa      	ldrh	r2, [r7, #6]
 8001142:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800114c:	d108      	bne.n	8001160 <HAL_UART_Transmit+0x82>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d104      	bne.n	8001160 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	e003      	b.n	8001168 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001170:	e02a      	b.n	80011c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2200      	movs	r2, #0
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f000 faf9 	bl	8001774 <UART_WaitOnFlagUntilTimeout>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e036      	b.n	80011fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10b      	bne.n	80011aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	3302      	adds	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	e007      	b.n	80011ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	3301      	adds	r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1cf      	bne.n	8001172 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2200      	movs	r2, #0
 80011da:	2140      	movs	r1, #64	; 0x40
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f000 fac9 	bl	8001774 <UART_WaitOnFlagUntilTimeout>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e006      	b.n	80011fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2220      	movs	r2, #32
 80011f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e000      	b.n	80011fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80011f8:	2302      	movs	r3, #2
  }
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0ba      	sub	sp, #232	; 0xe8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10f      	bne.n	800126a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800124a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	2b00      	cmp	r3, #0
 8001254:	d009      	beq.n	800126a <HAL_UART_IRQHandler+0x66>
 8001256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800125a:	f003 0320 	and.w	r3, r3, #32
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fbd3 	bl	8001a0e <UART_Receive_IT>
      return;
 8001268:	e256      	b.n	8001718 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800126a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80de 	beq.w	8001430 <HAL_UART_IRQHandler+0x22c>
 8001274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b00      	cmp	r3, #0
 800127e:	d106      	bne.n	800128e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001284:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80d1 	beq.w	8001430 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800128e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00b      	beq.n	80012b2 <HAL_UART_IRQHandler+0xae>
 800129a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80012b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00b      	beq.n	80012d6 <HAL_UART_IRQHandler+0xd2>
 80012be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f043 0202 	orr.w	r2, r3, #2
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80012d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <HAL_UART_IRQHandler+0xf6>
 80012e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f043 0204 	orr.w	r2, r3, #4
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80012fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	2b00      	cmp	r3, #0
 8001304:	d011      	beq.n	800132a <HAL_UART_IRQHandler+0x126>
 8001306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800130a:	f003 0320 	and.w	r3, r3, #32
 800130e:	2b00      	cmp	r3, #0
 8001310:	d105      	bne.n	800131e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f043 0208 	orr.w	r2, r3, #8
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 81ed 	beq.w	800170e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001338:	f003 0320 	and.w	r3, r3, #32
 800133c:	2b00      	cmp	r3, #0
 800133e:	d008      	beq.n	8001352 <HAL_UART_IRQHandler+0x14e>
 8001340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001344:	f003 0320 	and.w	r3, r3, #32
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 fb5e 	bl	8001a0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135c:	2b40      	cmp	r3, #64	; 0x40
 800135e:	bf0c      	ite	eq
 8001360:	2301      	moveq	r3, #1
 8001362:	2300      	movne	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d103      	bne.n	800137e <HAL_UART_IRQHandler+0x17a>
 8001376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800137a:	2b00      	cmp	r3, #0
 800137c:	d04f      	beq.n	800141e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 fa66 	bl	8001850 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800138e:	2b40      	cmp	r3, #64	; 0x40
 8001390:	d141      	bne.n	8001416 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3314      	adds	r3, #20
 8001398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800139c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013a0:	e853 3f00 	ldrex	r3, [r3]
 80013a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80013a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3314      	adds	r3, #20
 80013ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80013be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80013c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80013ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80013ce:	e841 2300 	strex	r3, r2, [r1]
 80013d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80013d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1d9      	bne.n	8001392 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d013      	beq.n	800140e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ea:	4a7d      	ldr	r2, [pc, #500]	; (80015e0 <HAL_UART_IRQHandler+0x3dc>)
 80013ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fc2b 	bl	8000c4e <HAL_DMA_Abort_IT>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d016      	beq.n	800142c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001408:	4610      	mov	r0, r2
 800140a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800140c:	e00e      	b.n	800142c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f99a 	bl	8001748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001414:	e00a      	b.n	800142c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f996 	bl	8001748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800141c:	e006      	b.n	800142c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f992 	bl	8001748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800142a:	e170      	b.n	800170e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800142c:	bf00      	nop
    return;
 800142e:	e16e      	b.n	800170e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	2b01      	cmp	r3, #1
 8001436:	f040 814a 	bne.w	80016ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800143a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8143 	beq.w	80016ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 813c 	beq.w	80016ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001476:	2b40      	cmp	r3, #64	; 0x40
 8001478:	f040 80b4 	bne.w	80015e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001488:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 8140 	beq.w	8001712 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800149a:	429a      	cmp	r2, r3
 800149c:	f080 8139 	bcs.w	8001712 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80014a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b2:	f000 8088 	beq.w	80015c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	330c      	adds	r3, #12
 80014bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014c4:	e853 3f00 	ldrex	r3, [r3]
 80014c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80014cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	330c      	adds	r3, #12
 80014de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80014e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80014e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80014ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80014f2:	e841 2300 	strex	r3, r2, [r1]
 80014f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80014fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1d9      	bne.n	80014b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3314      	adds	r3, #20
 8001508:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800150a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800150c:	e853 3f00 	ldrex	r3, [r3]
 8001510:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3314      	adds	r3, #20
 8001522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001526:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800152a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800152c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800152e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001532:	e841 2300 	strex	r3, r2, [r1]
 8001536:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1e1      	bne.n	8001502 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3314      	adds	r3, #20
 8001544:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001548:	e853 3f00 	ldrex	r3, [r3]
 800154c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800154e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3314      	adds	r3, #20
 800155e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001562:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001564:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001566:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001568:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800156a:	e841 2300 	strex	r3, r2, [r1]
 800156e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1e3      	bne.n	800153e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2220      	movs	r2, #32
 800157a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	330c      	adds	r3, #12
 800158a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800158c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800158e:	e853 3f00 	ldrex	r3, [r3]
 8001592:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001596:	f023 0310 	bic.w	r3, r3, #16
 800159a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	330c      	adds	r3, #12
 80015a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80015a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80015aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80015ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015b0:	e841 2300 	strex	r3, r2, [r1]
 80015b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80015b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e3      	bne.n	8001584 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fad4 	bl	8000b6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f8c0 	bl	800175c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80015dc:	e099      	b.n	8001712 <HAL_UART_IRQHandler+0x50e>
 80015de:	bf00      	nop
 80015e0:	08001917 	.word	0x08001917
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 808b 	beq.w	8001716 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8086 	beq.w	8001716 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	330c      	adds	r3, #12
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001614:	e853 3f00 	ldrex	r3, [r3]
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800161a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	330c      	adds	r3, #12
 800162a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800162e:	647a      	str	r2, [r7, #68]	; 0x44
 8001630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001636:	e841 2300 	strex	r3, r2, [r1]
 800163a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800163c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1e3      	bne.n	800160a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3314      	adds	r3, #20
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	e853 3f00 	ldrex	r3, [r3]
 8001650:	623b      	str	r3, [r7, #32]
   return(result);
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3314      	adds	r3, #20
 8001662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001666:	633a      	str	r2, [r7, #48]	; 0x30
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800166a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800166c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800166e:	e841 2300 	strex	r3, r2, [r1]
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1e3      	bne.n	8001642 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2220      	movs	r2, #32
 800167e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	330c      	adds	r3, #12
 800168e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	e853 3f00 	ldrex	r3, [r3]
 8001696:	60fb      	str	r3, [r7, #12]
   return(result);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f023 0310 	bic.w	r3, r3, #16
 800169e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	330c      	adds	r3, #12
 80016a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80016ac:	61fa      	str	r2, [r7, #28]
 80016ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016b0:	69b9      	ldr	r1, [r7, #24]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	e841 2300 	strex	r3, r2, [r1]
 80016b8:	617b      	str	r3, [r7, #20]
   return(result);
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e3      	bne.n	8001688 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80016c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80016c4:	4619      	mov	r1, r3
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f848 	bl	800175c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80016cc:	e023      	b.n	8001716 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80016ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_UART_IRQHandler+0x4ea>
 80016da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f929 	bl	800193e <UART_Transmit_IT>
    return;
 80016ec:	e014      	b.n	8001718 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80016ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00e      	beq.n	8001718 <HAL_UART_IRQHandler+0x514>
 80016fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001702:	2b00      	cmp	r3, #0
 8001704:	d008      	beq.n	8001718 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f969 	bl	80019de <UART_EndTransmit_IT>
    return;
 800170c:	e004      	b.n	8001718 <HAL_UART_IRQHandler+0x514>
    return;
 800170e:	bf00      	nop
 8001710:	e002      	b.n	8001718 <HAL_UART_IRQHandler+0x514>
      return;
 8001712:	bf00      	nop
 8001714:	e000      	b.n	8001718 <HAL_UART_IRQHandler+0x514>
      return;
 8001716:	bf00      	nop
  }
}
 8001718:	37e8      	adds	r7, #232	; 0xe8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop

08001720 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b090      	sub	sp, #64	; 0x40
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	4613      	mov	r3, r2
 8001782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001784:	e050      	b.n	8001828 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800178c:	d04c      	beq.n	8001828 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800178e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001790:	2b00      	cmp	r3, #0
 8001792:	d007      	beq.n	80017a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001794:	f7ff f8fa 	bl	800098c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d241      	bcs.n	8001828 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	330c      	adds	r3, #12
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ae:	e853 3f00 	ldrex	r3, [r3]
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	330c      	adds	r3, #12
 80017c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017c4:	637a      	str	r2, [r7, #52]	; 0x34
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017cc:	e841 2300 	strex	r3, r2, [r1]
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1e5      	bne.n	80017a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3314      	adds	r3, #20
 80017de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	e853 3f00 	ldrex	r3, [r3]
 80017e6:	613b      	str	r3, [r7, #16]
   return(result);
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3314      	adds	r3, #20
 80017f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017f8:	623a      	str	r2, [r7, #32]
 80017fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017fc:	69f9      	ldr	r1, [r7, #28]
 80017fe:	6a3a      	ldr	r2, [r7, #32]
 8001800:	e841 2300 	strex	r3, r2, [r1]
 8001804:	61bb      	str	r3, [r7, #24]
   return(result);
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1e5      	bne.n	80017d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2220      	movs	r2, #32
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2220      	movs	r2, #32
 8001818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e00f      	b.n	8001848 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	4013      	ands	r3, r2
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	429a      	cmp	r2, r3
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	429a      	cmp	r2, r3
 8001844:	d09f      	beq.n	8001786 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3740      	adds	r7, #64	; 0x40
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001850:	b480      	push	{r7}
 8001852:	b095      	sub	sp, #84	; 0x54
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	330c      	adds	r3, #12
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001862:	e853 3f00 	ldrex	r3, [r3]
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800186a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800186e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	330c      	adds	r3, #12
 8001876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001878:	643a      	str	r2, [r7, #64]	; 0x40
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800187c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800187e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001880:	e841 2300 	strex	r3, r2, [r1]
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1e5      	bne.n	8001858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	3314      	adds	r3, #20
 8001892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	e853 3f00 	ldrex	r3, [r3]
 800189a:	61fb      	str	r3, [r7, #28]
   return(result);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f023 0301 	bic.w	r3, r3, #1
 80018a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3314      	adds	r3, #20
 80018aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b4:	e841 2300 	strex	r3, r2, [r1]
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1e5      	bne.n	800188c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d119      	bne.n	80018fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	330c      	adds	r3, #12
 80018ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	e853 3f00 	ldrex	r3, [r3]
 80018d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f023 0310 	bic.w	r3, r3, #16
 80018de:	647b      	str	r3, [r7, #68]	; 0x44
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	330c      	adds	r3, #12
 80018e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018e8:	61ba      	str	r2, [r7, #24]
 80018ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ec:	6979      	ldr	r1, [r7, #20]
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	e841 2300 	strex	r3, r2, [r1]
 80018f4:	613b      	str	r3, [r7, #16]
   return(result);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1e5      	bne.n	80018c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2220      	movs	r2, #32
 8001900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	631a      	str	r2, [r3, #48]	; 0x30
}
 800190a:	bf00      	nop
 800190c:	3754      	adds	r7, #84	; 0x54
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001922:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f7ff ff09 	bl	8001748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b21      	cmp	r3, #33	; 0x21
 8001950:	d13e      	bne.n	80019d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800195a:	d114      	bne.n	8001986 <UART_Transmit_IT+0x48>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d110      	bne.n	8001986 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001978:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	1c9a      	adds	r2, r3, #2
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	621a      	str	r2, [r3, #32]
 8001984:	e008      	b.n	8001998 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	1c59      	adds	r1, r3, #1
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6211      	str	r1, [r2, #32]
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800199c:	b29b      	uxth	r3, r3
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4619      	mov	r1, r3
 80019a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10f      	bne.n	80019cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e000      	b.n	80019d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80019d0:	2302      	movs	r3, #2
  }
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2220      	movs	r2, #32
 80019fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fe8e 	bl	8001720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b08c      	sub	sp, #48	; 0x30
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b22      	cmp	r3, #34	; 0x22
 8001a20:	f040 80ab 	bne.w	8001b7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a2c:	d117      	bne.n	8001a5e <UART_Receive_IT+0x50>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d113      	bne.n	8001a5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	1c9a      	adds	r2, r3, #2
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a5c:	e026      	b.n	8001aac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a70:	d007      	beq.n	8001a82 <UART_Receive_IT+0x74>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10a      	bne.n	8001a90 <UART_Receive_IT+0x82>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	e008      	b.n	8001aa2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d15a      	bne.n	8001b76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0220 	bic.w	r2, r2, #32
 8001ace:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0201 	bic.w	r2, r2, #1
 8001aee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d135      	bne.n	8001b6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	330c      	adds	r3, #12
 8001b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	e853 3f00 	ldrex	r3, [r3]
 8001b14:	613b      	str	r3, [r7, #16]
   return(result);
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	f023 0310 	bic.w	r3, r3, #16
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	330c      	adds	r3, #12
 8001b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b26:	623a      	str	r2, [r7, #32]
 8001b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b2a:	69f9      	ldr	r1, [r7, #28]
 8001b2c:	6a3a      	ldr	r2, [r7, #32]
 8001b2e:	e841 2300 	strex	r3, r2, [r1]
 8001b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1e5      	bne.n	8001b06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b10      	cmp	r3, #16
 8001b46:	d10a      	bne.n	8001b5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b62:	4619      	mov	r1, r3
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff fdf9 	bl	800175c <HAL_UARTEx_RxEventCallback>
 8001b6a:	e002      	b.n	8001b72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fde1 	bl	8001734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e002      	b.n	8001b7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e000      	b.n	8001b7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8001b7a:	2302      	movs	r3, #2
  }
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3730      	adds	r7, #48	; 0x30
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b88:	b0c0      	sub	sp, #256	; 0x100
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ba0:	68d9      	ldr	r1, [r3, #12]
 8001ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	ea40 0301 	orr.w	r3, r0, r1
 8001bac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001bdc:	f021 010c 	bic.w	r1, r1, #12
 8001be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001bea:	430b      	orrs	r3, r1
 8001bec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bfe:	6999      	ldr	r1, [r3, #24]
 8001c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	ea40 0301 	orr.w	r3, r0, r1
 8001c0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b8f      	ldr	r3, [pc, #572]	; (8001e50 <UART_SetConfig+0x2cc>)
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d005      	beq.n	8001c24 <UART_SetConfig+0xa0>
 8001c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b8d      	ldr	r3, [pc, #564]	; (8001e54 <UART_SetConfig+0x2d0>)
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d104      	bne.n	8001c2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c24:	f7ff f9f2 	bl	800100c <HAL_RCC_GetPCLK2Freq>
 8001c28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001c2c:	e003      	b.n	8001c36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c2e:	f7ff f9d9 	bl	8000fe4 <HAL_RCC_GetPCLK1Freq>
 8001c32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c40:	f040 810c 	bne.w	8001e5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001c52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001c56:	4622      	mov	r2, r4
 8001c58:	462b      	mov	r3, r5
 8001c5a:	1891      	adds	r1, r2, r2
 8001c5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c5e:	415b      	adcs	r3, r3
 8001c60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c66:	4621      	mov	r1, r4
 8001c68:	eb12 0801 	adds.w	r8, r2, r1
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	eb43 0901 	adc.w	r9, r3, r1
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c86:	4690      	mov	r8, r2
 8001c88:	4699      	mov	r9, r3
 8001c8a:	4623      	mov	r3, r4
 8001c8c:	eb18 0303 	adds.w	r3, r8, r3
 8001c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c94:	462b      	mov	r3, r5
 8001c96:	eb49 0303 	adc.w	r3, r9, r3
 8001c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001caa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001cae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	18db      	adds	r3, r3, r3
 8001cb6:	653b      	str	r3, [r7, #80]	; 0x50
 8001cb8:	4613      	mov	r3, r2
 8001cba:	eb42 0303 	adc.w	r3, r2, r3
 8001cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8001cc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001cc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001cc8:	f7fe fada 	bl	8000280 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4b61      	ldr	r3, [pc, #388]	; (8001e58 <UART_SetConfig+0x2d4>)
 8001cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	011c      	lsls	r4, r3, #4
 8001cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ce4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ce8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001cec:	4642      	mov	r2, r8
 8001cee:	464b      	mov	r3, r9
 8001cf0:	1891      	adds	r1, r2, r2
 8001cf2:	64b9      	str	r1, [r7, #72]	; 0x48
 8001cf4:	415b      	adcs	r3, r3
 8001cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	eb12 0a01 	adds.w	sl, r2, r1
 8001d02:	4649      	mov	r1, r9
 8001d04:	eb43 0b01 	adc.w	fp, r3, r1
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d1c:	4692      	mov	sl, r2
 8001d1e:	469b      	mov	fp, r3
 8001d20:	4643      	mov	r3, r8
 8001d22:	eb1a 0303 	adds.w	r3, sl, r3
 8001d26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	eb4b 0303 	adc.w	r3, fp, r3
 8001d30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001d44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	18db      	adds	r3, r3, r3
 8001d4c:	643b      	str	r3, [r7, #64]	; 0x40
 8001d4e:	4613      	mov	r3, r2
 8001d50:	eb42 0303 	adc.w	r3, r2, r3
 8001d54:	647b      	str	r3, [r7, #68]	; 0x44
 8001d56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d5e:	f7fe fa8f 	bl	8000280 <__aeabi_uldivmod>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4611      	mov	r1, r2
 8001d68:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <UART_SetConfig+0x2d4>)
 8001d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2264      	movs	r2, #100	; 0x64
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	1acb      	subs	r3, r1, r3
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001d7e:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <UART_SetConfig+0x2d4>)
 8001d80:	fba3 2302 	umull	r2, r3, r3, r2
 8001d84:	095b      	lsrs	r3, r3, #5
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d8c:	441c      	add	r4, r3
 8001d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d92:	2200      	movs	r2, #0
 8001d94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001d9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001da0:	4642      	mov	r2, r8
 8001da2:	464b      	mov	r3, r9
 8001da4:	1891      	adds	r1, r2, r2
 8001da6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001da8:	415b      	adcs	r3, r3
 8001daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001db0:	4641      	mov	r1, r8
 8001db2:	1851      	adds	r1, r2, r1
 8001db4:	6339      	str	r1, [r7, #48]	; 0x30
 8001db6:	4649      	mov	r1, r9
 8001db8:	414b      	adcs	r3, r1
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001dc8:	4659      	mov	r1, fp
 8001dca:	00cb      	lsls	r3, r1, #3
 8001dcc:	4651      	mov	r1, sl
 8001dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dd2:	4651      	mov	r1, sl
 8001dd4:	00ca      	lsls	r2, r1, #3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4642      	mov	r2, r8
 8001dde:	189b      	adds	r3, r3, r2
 8001de0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001de4:	464b      	mov	r3, r9
 8001de6:	460a      	mov	r2, r1
 8001de8:	eb42 0303 	adc.w	r3, r2, r3
 8001dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001dfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001e04:	460b      	mov	r3, r1
 8001e06:	18db      	adds	r3, r3, r3
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	eb42 0303 	adc.w	r3, r2, r3
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e1a:	f7fe fa31 	bl	8000280 <__aeabi_uldivmod>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <UART_SetConfig+0x2d4>)
 8001e24:	fba3 1302 	umull	r1, r3, r3, r2
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	2164      	movs	r1, #100	; 0x64
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	3332      	adds	r3, #50	; 0x32
 8001e36:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <UART_SetConfig+0x2d4>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	095b      	lsrs	r3, r3, #5
 8001e3e:	f003 0207 	and.w	r2, r3, #7
 8001e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4422      	add	r2, r4
 8001e4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e4c:	e105      	b.n	800205a <UART_SetConfig+0x4d6>
 8001e4e:	bf00      	nop
 8001e50:	40011000 	.word	0x40011000
 8001e54:	40011400 	.word	0x40011400
 8001e58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e60:	2200      	movs	r2, #0
 8001e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e6e:	4642      	mov	r2, r8
 8001e70:	464b      	mov	r3, r9
 8001e72:	1891      	adds	r1, r2, r2
 8001e74:	6239      	str	r1, [r7, #32]
 8001e76:	415b      	adcs	r3, r3
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e7e:	4641      	mov	r1, r8
 8001e80:	1854      	adds	r4, r2, r1
 8001e82:	4649      	mov	r1, r9
 8001e84:	eb43 0501 	adc.w	r5, r3, r1
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	00eb      	lsls	r3, r5, #3
 8001e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e96:	00e2      	lsls	r2, r4, #3
 8001e98:	4614      	mov	r4, r2
 8001e9a:	461d      	mov	r5, r3
 8001e9c:	4643      	mov	r3, r8
 8001e9e:	18e3      	adds	r3, r4, r3
 8001ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ea4:	464b      	mov	r3, r9
 8001ea6:	eb45 0303 	adc.w	r3, r5, r3
 8001eaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001eba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001eca:	4629      	mov	r1, r5
 8001ecc:	008b      	lsls	r3, r1, #2
 8001ece:	4621      	mov	r1, r4
 8001ed0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	008a      	lsls	r2, r1, #2
 8001ed8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001edc:	f7fe f9d0 	bl	8000280 <__aeabi_uldivmod>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4b60      	ldr	r3, [pc, #384]	; (8002068 <UART_SetConfig+0x4e4>)
 8001ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	011c      	lsls	r4, r3, #4
 8001eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ef8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001efc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001f00:	4642      	mov	r2, r8
 8001f02:	464b      	mov	r3, r9
 8001f04:	1891      	adds	r1, r2, r2
 8001f06:	61b9      	str	r1, [r7, #24]
 8001f08:	415b      	adcs	r3, r3
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f10:	4641      	mov	r1, r8
 8001f12:	1851      	adds	r1, r2, r1
 8001f14:	6139      	str	r1, [r7, #16]
 8001f16:	4649      	mov	r1, r9
 8001f18:	414b      	adcs	r3, r1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f28:	4659      	mov	r1, fp
 8001f2a:	00cb      	lsls	r3, r1, #3
 8001f2c:	4651      	mov	r1, sl
 8001f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f32:	4651      	mov	r1, sl
 8001f34:	00ca      	lsls	r2, r1, #3
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4642      	mov	r2, r8
 8001f3e:	189b      	adds	r3, r3, r2
 8001f40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f44:	464b      	mov	r3, r9
 8001f46:	460a      	mov	r2, r1
 8001f48:	eb42 0303 	adc.w	r3, r2, r3
 8001f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001f68:	4649      	mov	r1, r9
 8001f6a:	008b      	lsls	r3, r1, #2
 8001f6c:	4641      	mov	r1, r8
 8001f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f72:	4641      	mov	r1, r8
 8001f74:	008a      	lsls	r2, r1, #2
 8001f76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001f7a:	f7fe f981 	bl	8000280 <__aeabi_uldivmod>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <UART_SetConfig+0x4e4>)
 8001f84:	fba3 1302 	umull	r1, r3, r3, r2
 8001f88:	095b      	lsrs	r3, r3, #5
 8001f8a:	2164      	movs	r1, #100	; 0x64
 8001f8c:	fb01 f303 	mul.w	r3, r1, r3
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	3332      	adds	r3, #50	; 0x32
 8001f96:	4a34      	ldr	r2, [pc, #208]	; (8002068 <UART_SetConfig+0x4e4>)
 8001f98:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa2:	441c      	add	r4, r3
 8001fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fa8:	2200      	movs	r2, #0
 8001faa:	673b      	str	r3, [r7, #112]	; 0x70
 8001fac:	677a      	str	r2, [r7, #116]	; 0x74
 8001fae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001fb2:	4642      	mov	r2, r8
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	1891      	adds	r1, r2, r2
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	415b      	adcs	r3, r3
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fc2:	4641      	mov	r1, r8
 8001fc4:	1851      	adds	r1, r2, r1
 8001fc6:	6039      	str	r1, [r7, #0]
 8001fc8:	4649      	mov	r1, r9
 8001fca:	414b      	adcs	r3, r1
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001fda:	4659      	mov	r1, fp
 8001fdc:	00cb      	lsls	r3, r1, #3
 8001fde:	4651      	mov	r1, sl
 8001fe0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fe4:	4651      	mov	r1, sl
 8001fe6:	00ca      	lsls	r2, r1, #3
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	4603      	mov	r3, r0
 8001fee:	4642      	mov	r2, r8
 8001ff0:	189b      	adds	r3, r3, r2
 8001ff2:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ff4:	464b      	mov	r3, r9
 8001ff6:	460a      	mov	r2, r1
 8001ff8:	eb42 0303 	adc.w	r3, r2, r3
 8001ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	663b      	str	r3, [r7, #96]	; 0x60
 8002008:	667a      	str	r2, [r7, #100]	; 0x64
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002016:	4649      	mov	r1, r9
 8002018:	008b      	lsls	r3, r1, #2
 800201a:	4641      	mov	r1, r8
 800201c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002020:	4641      	mov	r1, r8
 8002022:	008a      	lsls	r2, r1, #2
 8002024:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002028:	f7fe f92a 	bl	8000280 <__aeabi_uldivmod>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <UART_SetConfig+0x4e4>)
 8002032:	fba3 1302 	umull	r1, r3, r3, r2
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	2164      	movs	r1, #100	; 0x64
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	3332      	adds	r3, #50	; 0x32
 8002044:	4a08      	ldr	r2, [pc, #32]	; (8002068 <UART_SetConfig+0x4e4>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	f003 020f 	and.w	r2, r3, #15
 8002050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4422      	add	r2, r4
 8002058:	609a      	str	r2, [r3, #8]
}
 800205a:	bf00      	nop
 800205c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002060:	46bd      	mov	sp, r7
 8002062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002066:	bf00      	nop
 8002068:	51eb851f 	.word	0x51eb851f

0800206c <__errno>:
 800206c:	4b01      	ldr	r3, [pc, #4]	; (8002074 <__errno+0x8>)
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000008 	.word	0x20000008

08002078 <__libc_init_array>:
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	4d0d      	ldr	r5, [pc, #52]	; (80020b0 <__libc_init_array+0x38>)
 800207c:	4c0d      	ldr	r4, [pc, #52]	; (80020b4 <__libc_init_array+0x3c>)
 800207e:	1b64      	subs	r4, r4, r5
 8002080:	10a4      	asrs	r4, r4, #2
 8002082:	2600      	movs	r6, #0
 8002084:	42a6      	cmp	r6, r4
 8002086:	d109      	bne.n	800209c <__libc_init_array+0x24>
 8002088:	4d0b      	ldr	r5, [pc, #44]	; (80020b8 <__libc_init_array+0x40>)
 800208a:	4c0c      	ldr	r4, [pc, #48]	; (80020bc <__libc_init_array+0x44>)
 800208c:	f000 fca2 	bl	80029d4 <_init>
 8002090:	1b64      	subs	r4, r4, r5
 8002092:	10a4      	asrs	r4, r4, #2
 8002094:	2600      	movs	r6, #0
 8002096:	42a6      	cmp	r6, r4
 8002098:	d105      	bne.n	80020a6 <__libc_init_array+0x2e>
 800209a:	bd70      	pop	{r4, r5, r6, pc}
 800209c:	f855 3b04 	ldr.w	r3, [r5], #4
 80020a0:	4798      	blx	r3
 80020a2:	3601      	adds	r6, #1
 80020a4:	e7ee      	b.n	8002084 <__libc_init_array+0xc>
 80020a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020aa:	4798      	blx	r3
 80020ac:	3601      	adds	r6, #1
 80020ae:	e7f2      	b.n	8002096 <__libc_init_array+0x1e>
 80020b0:	08002a5c 	.word	0x08002a5c
 80020b4:	08002a5c 	.word	0x08002a5c
 80020b8:	08002a5c 	.word	0x08002a5c
 80020bc:	08002a60 	.word	0x08002a60

080020c0 <memset>:
 80020c0:	4402      	add	r2, r0
 80020c2:	4603      	mov	r3, r0
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d100      	bne.n	80020ca <memset+0xa>
 80020c8:	4770      	bx	lr
 80020ca:	f803 1b01 	strb.w	r1, [r3], #1
 80020ce:	e7f9      	b.n	80020c4 <memset+0x4>

080020d0 <sniprintf>:
 80020d0:	b40c      	push	{r2, r3}
 80020d2:	b530      	push	{r4, r5, lr}
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <sniprintf+0x64>)
 80020d6:	1e0c      	subs	r4, r1, #0
 80020d8:	681d      	ldr	r5, [r3, #0]
 80020da:	b09d      	sub	sp, #116	; 0x74
 80020dc:	da08      	bge.n	80020f0 <sniprintf+0x20>
 80020de:	238b      	movs	r3, #139	; 0x8b
 80020e0:	602b      	str	r3, [r5, #0]
 80020e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020e6:	b01d      	add	sp, #116	; 0x74
 80020e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80020ec:	b002      	add	sp, #8
 80020ee:	4770      	bx	lr
 80020f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80020f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80020f8:	bf14      	ite	ne
 80020fa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80020fe:	4623      	moveq	r3, r4
 8002100:	9304      	str	r3, [sp, #16]
 8002102:	9307      	str	r3, [sp, #28]
 8002104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002108:	9002      	str	r0, [sp, #8]
 800210a:	9006      	str	r0, [sp, #24]
 800210c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002110:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002112:	ab21      	add	r3, sp, #132	; 0x84
 8002114:	a902      	add	r1, sp, #8
 8002116:	4628      	mov	r0, r5
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	f000 f869 	bl	80021f0 <_svfiprintf_r>
 800211e:	1c43      	adds	r3, r0, #1
 8002120:	bfbc      	itt	lt
 8002122:	238b      	movlt	r3, #139	; 0x8b
 8002124:	602b      	strlt	r3, [r5, #0]
 8002126:	2c00      	cmp	r4, #0
 8002128:	d0dd      	beq.n	80020e6 <sniprintf+0x16>
 800212a:	9b02      	ldr	r3, [sp, #8]
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	e7d9      	b.n	80020e6 <sniprintf+0x16>
 8002132:	bf00      	nop
 8002134:	20000008 	.word	0x20000008

08002138 <__ssputs_r>:
 8002138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800213c:	688e      	ldr	r6, [r1, #8]
 800213e:	429e      	cmp	r6, r3
 8002140:	4682      	mov	sl, r0
 8002142:	460c      	mov	r4, r1
 8002144:	4690      	mov	r8, r2
 8002146:	461f      	mov	r7, r3
 8002148:	d838      	bhi.n	80021bc <__ssputs_r+0x84>
 800214a:	898a      	ldrh	r2, [r1, #12]
 800214c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002150:	d032      	beq.n	80021b8 <__ssputs_r+0x80>
 8002152:	6825      	ldr	r5, [r4, #0]
 8002154:	6909      	ldr	r1, [r1, #16]
 8002156:	eba5 0901 	sub.w	r9, r5, r1
 800215a:	6965      	ldr	r5, [r4, #20]
 800215c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002164:	3301      	adds	r3, #1
 8002166:	444b      	add	r3, r9
 8002168:	106d      	asrs	r5, r5, #1
 800216a:	429d      	cmp	r5, r3
 800216c:	bf38      	it	cc
 800216e:	461d      	movcc	r5, r3
 8002170:	0553      	lsls	r3, r2, #21
 8002172:	d531      	bpl.n	80021d8 <__ssputs_r+0xa0>
 8002174:	4629      	mov	r1, r5
 8002176:	f000 fb63 	bl	8002840 <_malloc_r>
 800217a:	4606      	mov	r6, r0
 800217c:	b950      	cbnz	r0, 8002194 <__ssputs_r+0x5c>
 800217e:	230c      	movs	r3, #12
 8002180:	f8ca 3000 	str.w	r3, [sl]
 8002184:	89a3      	ldrh	r3, [r4, #12]
 8002186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800218a:	81a3      	strh	r3, [r4, #12]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002194:	6921      	ldr	r1, [r4, #16]
 8002196:	464a      	mov	r2, r9
 8002198:	f000 fabe 	bl	8002718 <memcpy>
 800219c:	89a3      	ldrh	r3, [r4, #12]
 800219e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80021a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a6:	81a3      	strh	r3, [r4, #12]
 80021a8:	6126      	str	r6, [r4, #16]
 80021aa:	6165      	str	r5, [r4, #20]
 80021ac:	444e      	add	r6, r9
 80021ae:	eba5 0509 	sub.w	r5, r5, r9
 80021b2:	6026      	str	r6, [r4, #0]
 80021b4:	60a5      	str	r5, [r4, #8]
 80021b6:	463e      	mov	r6, r7
 80021b8:	42be      	cmp	r6, r7
 80021ba:	d900      	bls.n	80021be <__ssputs_r+0x86>
 80021bc:	463e      	mov	r6, r7
 80021be:	6820      	ldr	r0, [r4, #0]
 80021c0:	4632      	mov	r2, r6
 80021c2:	4641      	mov	r1, r8
 80021c4:	f000 fab6 	bl	8002734 <memmove>
 80021c8:	68a3      	ldr	r3, [r4, #8]
 80021ca:	1b9b      	subs	r3, r3, r6
 80021cc:	60a3      	str	r3, [r4, #8]
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	4433      	add	r3, r6
 80021d2:	6023      	str	r3, [r4, #0]
 80021d4:	2000      	movs	r0, #0
 80021d6:	e7db      	b.n	8002190 <__ssputs_r+0x58>
 80021d8:	462a      	mov	r2, r5
 80021da:	f000 fba5 	bl	8002928 <_realloc_r>
 80021de:	4606      	mov	r6, r0
 80021e0:	2800      	cmp	r0, #0
 80021e2:	d1e1      	bne.n	80021a8 <__ssputs_r+0x70>
 80021e4:	6921      	ldr	r1, [r4, #16]
 80021e6:	4650      	mov	r0, sl
 80021e8:	f000 fabe 	bl	8002768 <_free_r>
 80021ec:	e7c7      	b.n	800217e <__ssputs_r+0x46>
	...

080021f0 <_svfiprintf_r>:
 80021f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021f4:	4698      	mov	r8, r3
 80021f6:	898b      	ldrh	r3, [r1, #12]
 80021f8:	061b      	lsls	r3, r3, #24
 80021fa:	b09d      	sub	sp, #116	; 0x74
 80021fc:	4607      	mov	r7, r0
 80021fe:	460d      	mov	r5, r1
 8002200:	4614      	mov	r4, r2
 8002202:	d50e      	bpl.n	8002222 <_svfiprintf_r+0x32>
 8002204:	690b      	ldr	r3, [r1, #16]
 8002206:	b963      	cbnz	r3, 8002222 <_svfiprintf_r+0x32>
 8002208:	2140      	movs	r1, #64	; 0x40
 800220a:	f000 fb19 	bl	8002840 <_malloc_r>
 800220e:	6028      	str	r0, [r5, #0]
 8002210:	6128      	str	r0, [r5, #16]
 8002212:	b920      	cbnz	r0, 800221e <_svfiprintf_r+0x2e>
 8002214:	230c      	movs	r3, #12
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800221c:	e0d1      	b.n	80023c2 <_svfiprintf_r+0x1d2>
 800221e:	2340      	movs	r3, #64	; 0x40
 8002220:	616b      	str	r3, [r5, #20]
 8002222:	2300      	movs	r3, #0
 8002224:	9309      	str	r3, [sp, #36]	; 0x24
 8002226:	2320      	movs	r3, #32
 8002228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800222c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002230:	2330      	movs	r3, #48	; 0x30
 8002232:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80023dc <_svfiprintf_r+0x1ec>
 8002236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800223a:	f04f 0901 	mov.w	r9, #1
 800223e:	4623      	mov	r3, r4
 8002240:	469a      	mov	sl, r3
 8002242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002246:	b10a      	cbz	r2, 800224c <_svfiprintf_r+0x5c>
 8002248:	2a25      	cmp	r2, #37	; 0x25
 800224a:	d1f9      	bne.n	8002240 <_svfiprintf_r+0x50>
 800224c:	ebba 0b04 	subs.w	fp, sl, r4
 8002250:	d00b      	beq.n	800226a <_svfiprintf_r+0x7a>
 8002252:	465b      	mov	r3, fp
 8002254:	4622      	mov	r2, r4
 8002256:	4629      	mov	r1, r5
 8002258:	4638      	mov	r0, r7
 800225a:	f7ff ff6d 	bl	8002138 <__ssputs_r>
 800225e:	3001      	adds	r0, #1
 8002260:	f000 80aa 	beq.w	80023b8 <_svfiprintf_r+0x1c8>
 8002264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002266:	445a      	add	r2, fp
 8002268:	9209      	str	r2, [sp, #36]	; 0x24
 800226a:	f89a 3000 	ldrb.w	r3, [sl]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 80a2 	beq.w	80023b8 <_svfiprintf_r+0x1c8>
 8002274:	2300      	movs	r3, #0
 8002276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800227a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800227e:	f10a 0a01 	add.w	sl, sl, #1
 8002282:	9304      	str	r3, [sp, #16]
 8002284:	9307      	str	r3, [sp, #28]
 8002286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800228a:	931a      	str	r3, [sp, #104]	; 0x68
 800228c:	4654      	mov	r4, sl
 800228e:	2205      	movs	r2, #5
 8002290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002294:	4851      	ldr	r0, [pc, #324]	; (80023dc <_svfiprintf_r+0x1ec>)
 8002296:	f7fd ffa3 	bl	80001e0 <memchr>
 800229a:	9a04      	ldr	r2, [sp, #16]
 800229c:	b9d8      	cbnz	r0, 80022d6 <_svfiprintf_r+0xe6>
 800229e:	06d0      	lsls	r0, r2, #27
 80022a0:	bf44      	itt	mi
 80022a2:	2320      	movmi	r3, #32
 80022a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022a8:	0711      	lsls	r1, r2, #28
 80022aa:	bf44      	itt	mi
 80022ac:	232b      	movmi	r3, #43	; 0x2b
 80022ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022b2:	f89a 3000 	ldrb.w	r3, [sl]
 80022b6:	2b2a      	cmp	r3, #42	; 0x2a
 80022b8:	d015      	beq.n	80022e6 <_svfiprintf_r+0xf6>
 80022ba:	9a07      	ldr	r2, [sp, #28]
 80022bc:	4654      	mov	r4, sl
 80022be:	2000      	movs	r0, #0
 80022c0:	f04f 0c0a 	mov.w	ip, #10
 80022c4:	4621      	mov	r1, r4
 80022c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022ca:	3b30      	subs	r3, #48	; 0x30
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	d94e      	bls.n	800236e <_svfiprintf_r+0x17e>
 80022d0:	b1b0      	cbz	r0, 8002300 <_svfiprintf_r+0x110>
 80022d2:	9207      	str	r2, [sp, #28]
 80022d4:	e014      	b.n	8002300 <_svfiprintf_r+0x110>
 80022d6:	eba0 0308 	sub.w	r3, r0, r8
 80022da:	fa09 f303 	lsl.w	r3, r9, r3
 80022de:	4313      	orrs	r3, r2
 80022e0:	9304      	str	r3, [sp, #16]
 80022e2:	46a2      	mov	sl, r4
 80022e4:	e7d2      	b.n	800228c <_svfiprintf_r+0x9c>
 80022e6:	9b03      	ldr	r3, [sp, #12]
 80022e8:	1d19      	adds	r1, r3, #4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	9103      	str	r1, [sp, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	bfbb      	ittet	lt
 80022f2:	425b      	neglt	r3, r3
 80022f4:	f042 0202 	orrlt.w	r2, r2, #2
 80022f8:	9307      	strge	r3, [sp, #28]
 80022fa:	9307      	strlt	r3, [sp, #28]
 80022fc:	bfb8      	it	lt
 80022fe:	9204      	strlt	r2, [sp, #16]
 8002300:	7823      	ldrb	r3, [r4, #0]
 8002302:	2b2e      	cmp	r3, #46	; 0x2e
 8002304:	d10c      	bne.n	8002320 <_svfiprintf_r+0x130>
 8002306:	7863      	ldrb	r3, [r4, #1]
 8002308:	2b2a      	cmp	r3, #42	; 0x2a
 800230a:	d135      	bne.n	8002378 <_svfiprintf_r+0x188>
 800230c:	9b03      	ldr	r3, [sp, #12]
 800230e:	1d1a      	adds	r2, r3, #4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	9203      	str	r2, [sp, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	bfb8      	it	lt
 8002318:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800231c:	3402      	adds	r4, #2
 800231e:	9305      	str	r3, [sp, #20]
 8002320:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80023ec <_svfiprintf_r+0x1fc>
 8002324:	7821      	ldrb	r1, [r4, #0]
 8002326:	2203      	movs	r2, #3
 8002328:	4650      	mov	r0, sl
 800232a:	f7fd ff59 	bl	80001e0 <memchr>
 800232e:	b140      	cbz	r0, 8002342 <_svfiprintf_r+0x152>
 8002330:	2340      	movs	r3, #64	; 0x40
 8002332:	eba0 000a 	sub.w	r0, r0, sl
 8002336:	fa03 f000 	lsl.w	r0, r3, r0
 800233a:	9b04      	ldr	r3, [sp, #16]
 800233c:	4303      	orrs	r3, r0
 800233e:	3401      	adds	r4, #1
 8002340:	9304      	str	r3, [sp, #16]
 8002342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002346:	4826      	ldr	r0, [pc, #152]	; (80023e0 <_svfiprintf_r+0x1f0>)
 8002348:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800234c:	2206      	movs	r2, #6
 800234e:	f7fd ff47 	bl	80001e0 <memchr>
 8002352:	2800      	cmp	r0, #0
 8002354:	d038      	beq.n	80023c8 <_svfiprintf_r+0x1d8>
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <_svfiprintf_r+0x1f4>)
 8002358:	bb1b      	cbnz	r3, 80023a2 <_svfiprintf_r+0x1b2>
 800235a:	9b03      	ldr	r3, [sp, #12]
 800235c:	3307      	adds	r3, #7
 800235e:	f023 0307 	bic.w	r3, r3, #7
 8002362:	3308      	adds	r3, #8
 8002364:	9303      	str	r3, [sp, #12]
 8002366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002368:	4433      	add	r3, r6
 800236a:	9309      	str	r3, [sp, #36]	; 0x24
 800236c:	e767      	b.n	800223e <_svfiprintf_r+0x4e>
 800236e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002372:	460c      	mov	r4, r1
 8002374:	2001      	movs	r0, #1
 8002376:	e7a5      	b.n	80022c4 <_svfiprintf_r+0xd4>
 8002378:	2300      	movs	r3, #0
 800237a:	3401      	adds	r4, #1
 800237c:	9305      	str	r3, [sp, #20]
 800237e:	4619      	mov	r1, r3
 8002380:	f04f 0c0a 	mov.w	ip, #10
 8002384:	4620      	mov	r0, r4
 8002386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800238a:	3a30      	subs	r2, #48	; 0x30
 800238c:	2a09      	cmp	r2, #9
 800238e:	d903      	bls.n	8002398 <_svfiprintf_r+0x1a8>
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0c5      	beq.n	8002320 <_svfiprintf_r+0x130>
 8002394:	9105      	str	r1, [sp, #20]
 8002396:	e7c3      	b.n	8002320 <_svfiprintf_r+0x130>
 8002398:	fb0c 2101 	mla	r1, ip, r1, r2
 800239c:	4604      	mov	r4, r0
 800239e:	2301      	movs	r3, #1
 80023a0:	e7f0      	b.n	8002384 <_svfiprintf_r+0x194>
 80023a2:	ab03      	add	r3, sp, #12
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	462a      	mov	r2, r5
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <_svfiprintf_r+0x1f8>)
 80023aa:	a904      	add	r1, sp, #16
 80023ac:	4638      	mov	r0, r7
 80023ae:	f3af 8000 	nop.w
 80023b2:	1c42      	adds	r2, r0, #1
 80023b4:	4606      	mov	r6, r0
 80023b6:	d1d6      	bne.n	8002366 <_svfiprintf_r+0x176>
 80023b8:	89ab      	ldrh	r3, [r5, #12]
 80023ba:	065b      	lsls	r3, r3, #25
 80023bc:	f53f af2c 	bmi.w	8002218 <_svfiprintf_r+0x28>
 80023c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023c2:	b01d      	add	sp, #116	; 0x74
 80023c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023c8:	ab03      	add	r3, sp, #12
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	462a      	mov	r2, r5
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <_svfiprintf_r+0x1f8>)
 80023d0:	a904      	add	r1, sp, #16
 80023d2:	4638      	mov	r0, r7
 80023d4:	f000 f87a 	bl	80024cc <_printf_i>
 80023d8:	e7eb      	b.n	80023b2 <_svfiprintf_r+0x1c2>
 80023da:	bf00      	nop
 80023dc:	08002a20 	.word	0x08002a20
 80023e0:	08002a2a 	.word	0x08002a2a
 80023e4:	00000000 	.word	0x00000000
 80023e8:	08002139 	.word	0x08002139
 80023ec:	08002a26 	.word	0x08002a26

080023f0 <_printf_common>:
 80023f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023f4:	4616      	mov	r6, r2
 80023f6:	4699      	mov	r9, r3
 80023f8:	688a      	ldr	r2, [r1, #8]
 80023fa:	690b      	ldr	r3, [r1, #16]
 80023fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002400:	4293      	cmp	r3, r2
 8002402:	bfb8      	it	lt
 8002404:	4613      	movlt	r3, r2
 8002406:	6033      	str	r3, [r6, #0]
 8002408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800240c:	4607      	mov	r7, r0
 800240e:	460c      	mov	r4, r1
 8002410:	b10a      	cbz	r2, 8002416 <_printf_common+0x26>
 8002412:	3301      	adds	r3, #1
 8002414:	6033      	str	r3, [r6, #0]
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	0699      	lsls	r1, r3, #26
 800241a:	bf42      	ittt	mi
 800241c:	6833      	ldrmi	r3, [r6, #0]
 800241e:	3302      	addmi	r3, #2
 8002420:	6033      	strmi	r3, [r6, #0]
 8002422:	6825      	ldr	r5, [r4, #0]
 8002424:	f015 0506 	ands.w	r5, r5, #6
 8002428:	d106      	bne.n	8002438 <_printf_common+0x48>
 800242a:	f104 0a19 	add.w	sl, r4, #25
 800242e:	68e3      	ldr	r3, [r4, #12]
 8002430:	6832      	ldr	r2, [r6, #0]
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	42ab      	cmp	r3, r5
 8002436:	dc26      	bgt.n	8002486 <_printf_common+0x96>
 8002438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800243c:	1e13      	subs	r3, r2, #0
 800243e:	6822      	ldr	r2, [r4, #0]
 8002440:	bf18      	it	ne
 8002442:	2301      	movne	r3, #1
 8002444:	0692      	lsls	r2, r2, #26
 8002446:	d42b      	bmi.n	80024a0 <_printf_common+0xb0>
 8002448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800244c:	4649      	mov	r1, r9
 800244e:	4638      	mov	r0, r7
 8002450:	47c0      	blx	r8
 8002452:	3001      	adds	r0, #1
 8002454:	d01e      	beq.n	8002494 <_printf_common+0xa4>
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	68e5      	ldr	r5, [r4, #12]
 800245a:	6832      	ldr	r2, [r6, #0]
 800245c:	f003 0306 	and.w	r3, r3, #6
 8002460:	2b04      	cmp	r3, #4
 8002462:	bf08      	it	eq
 8002464:	1aad      	subeq	r5, r5, r2
 8002466:	68a3      	ldr	r3, [r4, #8]
 8002468:	6922      	ldr	r2, [r4, #16]
 800246a:	bf0c      	ite	eq
 800246c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002470:	2500      	movne	r5, #0
 8002472:	4293      	cmp	r3, r2
 8002474:	bfc4      	itt	gt
 8002476:	1a9b      	subgt	r3, r3, r2
 8002478:	18ed      	addgt	r5, r5, r3
 800247a:	2600      	movs	r6, #0
 800247c:	341a      	adds	r4, #26
 800247e:	42b5      	cmp	r5, r6
 8002480:	d11a      	bne.n	80024b8 <_printf_common+0xc8>
 8002482:	2000      	movs	r0, #0
 8002484:	e008      	b.n	8002498 <_printf_common+0xa8>
 8002486:	2301      	movs	r3, #1
 8002488:	4652      	mov	r2, sl
 800248a:	4649      	mov	r1, r9
 800248c:	4638      	mov	r0, r7
 800248e:	47c0      	blx	r8
 8002490:	3001      	adds	r0, #1
 8002492:	d103      	bne.n	800249c <_printf_common+0xac>
 8002494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800249c:	3501      	adds	r5, #1
 800249e:	e7c6      	b.n	800242e <_printf_common+0x3e>
 80024a0:	18e1      	adds	r1, r4, r3
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	2030      	movs	r0, #48	; 0x30
 80024a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024aa:	4422      	add	r2, r4
 80024ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024b4:	3302      	adds	r3, #2
 80024b6:	e7c7      	b.n	8002448 <_printf_common+0x58>
 80024b8:	2301      	movs	r3, #1
 80024ba:	4622      	mov	r2, r4
 80024bc:	4649      	mov	r1, r9
 80024be:	4638      	mov	r0, r7
 80024c0:	47c0      	blx	r8
 80024c2:	3001      	adds	r0, #1
 80024c4:	d0e6      	beq.n	8002494 <_printf_common+0xa4>
 80024c6:	3601      	adds	r6, #1
 80024c8:	e7d9      	b.n	800247e <_printf_common+0x8e>
	...

080024cc <_printf_i>:
 80024cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024d0:	7e0f      	ldrb	r7, [r1, #24]
 80024d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80024d4:	2f78      	cmp	r7, #120	; 0x78
 80024d6:	4691      	mov	r9, r2
 80024d8:	4680      	mov	r8, r0
 80024da:	460c      	mov	r4, r1
 80024dc:	469a      	mov	sl, r3
 80024de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80024e2:	d807      	bhi.n	80024f4 <_printf_i+0x28>
 80024e4:	2f62      	cmp	r7, #98	; 0x62
 80024e6:	d80a      	bhi.n	80024fe <_printf_i+0x32>
 80024e8:	2f00      	cmp	r7, #0
 80024ea:	f000 80d8 	beq.w	800269e <_printf_i+0x1d2>
 80024ee:	2f58      	cmp	r7, #88	; 0x58
 80024f0:	f000 80a3 	beq.w	800263a <_printf_i+0x16e>
 80024f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80024fc:	e03a      	b.n	8002574 <_printf_i+0xa8>
 80024fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002502:	2b15      	cmp	r3, #21
 8002504:	d8f6      	bhi.n	80024f4 <_printf_i+0x28>
 8002506:	a101      	add	r1, pc, #4	; (adr r1, 800250c <_printf_i+0x40>)
 8002508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800250c:	08002565 	.word	0x08002565
 8002510:	08002579 	.word	0x08002579
 8002514:	080024f5 	.word	0x080024f5
 8002518:	080024f5 	.word	0x080024f5
 800251c:	080024f5 	.word	0x080024f5
 8002520:	080024f5 	.word	0x080024f5
 8002524:	08002579 	.word	0x08002579
 8002528:	080024f5 	.word	0x080024f5
 800252c:	080024f5 	.word	0x080024f5
 8002530:	080024f5 	.word	0x080024f5
 8002534:	080024f5 	.word	0x080024f5
 8002538:	08002685 	.word	0x08002685
 800253c:	080025a9 	.word	0x080025a9
 8002540:	08002667 	.word	0x08002667
 8002544:	080024f5 	.word	0x080024f5
 8002548:	080024f5 	.word	0x080024f5
 800254c:	080026a7 	.word	0x080026a7
 8002550:	080024f5 	.word	0x080024f5
 8002554:	080025a9 	.word	0x080025a9
 8002558:	080024f5 	.word	0x080024f5
 800255c:	080024f5 	.word	0x080024f5
 8002560:	0800266f 	.word	0x0800266f
 8002564:	682b      	ldr	r3, [r5, #0]
 8002566:	1d1a      	adds	r2, r3, #4
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	602a      	str	r2, [r5, #0]
 800256c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002574:	2301      	movs	r3, #1
 8002576:	e0a3      	b.n	80026c0 <_printf_i+0x1f4>
 8002578:	6820      	ldr	r0, [r4, #0]
 800257a:	6829      	ldr	r1, [r5, #0]
 800257c:	0606      	lsls	r6, r0, #24
 800257e:	f101 0304 	add.w	r3, r1, #4
 8002582:	d50a      	bpl.n	800259a <_printf_i+0xce>
 8002584:	680e      	ldr	r6, [r1, #0]
 8002586:	602b      	str	r3, [r5, #0]
 8002588:	2e00      	cmp	r6, #0
 800258a:	da03      	bge.n	8002594 <_printf_i+0xc8>
 800258c:	232d      	movs	r3, #45	; 0x2d
 800258e:	4276      	negs	r6, r6
 8002590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002594:	485e      	ldr	r0, [pc, #376]	; (8002710 <_printf_i+0x244>)
 8002596:	230a      	movs	r3, #10
 8002598:	e019      	b.n	80025ce <_printf_i+0x102>
 800259a:	680e      	ldr	r6, [r1, #0]
 800259c:	602b      	str	r3, [r5, #0]
 800259e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025a2:	bf18      	it	ne
 80025a4:	b236      	sxthne	r6, r6
 80025a6:	e7ef      	b.n	8002588 <_printf_i+0xbc>
 80025a8:	682b      	ldr	r3, [r5, #0]
 80025aa:	6820      	ldr	r0, [r4, #0]
 80025ac:	1d19      	adds	r1, r3, #4
 80025ae:	6029      	str	r1, [r5, #0]
 80025b0:	0601      	lsls	r1, r0, #24
 80025b2:	d501      	bpl.n	80025b8 <_printf_i+0xec>
 80025b4:	681e      	ldr	r6, [r3, #0]
 80025b6:	e002      	b.n	80025be <_printf_i+0xf2>
 80025b8:	0646      	lsls	r6, r0, #25
 80025ba:	d5fb      	bpl.n	80025b4 <_printf_i+0xe8>
 80025bc:	881e      	ldrh	r6, [r3, #0]
 80025be:	4854      	ldr	r0, [pc, #336]	; (8002710 <_printf_i+0x244>)
 80025c0:	2f6f      	cmp	r7, #111	; 0x6f
 80025c2:	bf0c      	ite	eq
 80025c4:	2308      	moveq	r3, #8
 80025c6:	230a      	movne	r3, #10
 80025c8:	2100      	movs	r1, #0
 80025ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025ce:	6865      	ldr	r5, [r4, #4]
 80025d0:	60a5      	str	r5, [r4, #8]
 80025d2:	2d00      	cmp	r5, #0
 80025d4:	bfa2      	ittt	ge
 80025d6:	6821      	ldrge	r1, [r4, #0]
 80025d8:	f021 0104 	bicge.w	r1, r1, #4
 80025dc:	6021      	strge	r1, [r4, #0]
 80025de:	b90e      	cbnz	r6, 80025e4 <_printf_i+0x118>
 80025e0:	2d00      	cmp	r5, #0
 80025e2:	d04d      	beq.n	8002680 <_printf_i+0x1b4>
 80025e4:	4615      	mov	r5, r2
 80025e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80025ea:	fb03 6711 	mls	r7, r3, r1, r6
 80025ee:	5dc7      	ldrb	r7, [r0, r7]
 80025f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80025f4:	4637      	mov	r7, r6
 80025f6:	42bb      	cmp	r3, r7
 80025f8:	460e      	mov	r6, r1
 80025fa:	d9f4      	bls.n	80025e6 <_printf_i+0x11a>
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d10b      	bne.n	8002618 <_printf_i+0x14c>
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	07de      	lsls	r6, r3, #31
 8002604:	d508      	bpl.n	8002618 <_printf_i+0x14c>
 8002606:	6923      	ldr	r3, [r4, #16]
 8002608:	6861      	ldr	r1, [r4, #4]
 800260a:	4299      	cmp	r1, r3
 800260c:	bfde      	ittt	le
 800260e:	2330      	movle	r3, #48	; 0x30
 8002610:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002614:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002618:	1b52      	subs	r2, r2, r5
 800261a:	6122      	str	r2, [r4, #16]
 800261c:	f8cd a000 	str.w	sl, [sp]
 8002620:	464b      	mov	r3, r9
 8002622:	aa03      	add	r2, sp, #12
 8002624:	4621      	mov	r1, r4
 8002626:	4640      	mov	r0, r8
 8002628:	f7ff fee2 	bl	80023f0 <_printf_common>
 800262c:	3001      	adds	r0, #1
 800262e:	d14c      	bne.n	80026ca <_printf_i+0x1fe>
 8002630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002634:	b004      	add	sp, #16
 8002636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800263a:	4835      	ldr	r0, [pc, #212]	; (8002710 <_printf_i+0x244>)
 800263c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002640:	6829      	ldr	r1, [r5, #0]
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	f851 6b04 	ldr.w	r6, [r1], #4
 8002648:	6029      	str	r1, [r5, #0]
 800264a:	061d      	lsls	r5, r3, #24
 800264c:	d514      	bpl.n	8002678 <_printf_i+0x1ac>
 800264e:	07df      	lsls	r7, r3, #31
 8002650:	bf44      	itt	mi
 8002652:	f043 0320 	orrmi.w	r3, r3, #32
 8002656:	6023      	strmi	r3, [r4, #0]
 8002658:	b91e      	cbnz	r6, 8002662 <_printf_i+0x196>
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	f023 0320 	bic.w	r3, r3, #32
 8002660:	6023      	str	r3, [r4, #0]
 8002662:	2310      	movs	r3, #16
 8002664:	e7b0      	b.n	80025c8 <_printf_i+0xfc>
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	f043 0320 	orr.w	r3, r3, #32
 800266c:	6023      	str	r3, [r4, #0]
 800266e:	2378      	movs	r3, #120	; 0x78
 8002670:	4828      	ldr	r0, [pc, #160]	; (8002714 <_printf_i+0x248>)
 8002672:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002676:	e7e3      	b.n	8002640 <_printf_i+0x174>
 8002678:	0659      	lsls	r1, r3, #25
 800267a:	bf48      	it	mi
 800267c:	b2b6      	uxthmi	r6, r6
 800267e:	e7e6      	b.n	800264e <_printf_i+0x182>
 8002680:	4615      	mov	r5, r2
 8002682:	e7bb      	b.n	80025fc <_printf_i+0x130>
 8002684:	682b      	ldr	r3, [r5, #0]
 8002686:	6826      	ldr	r6, [r4, #0]
 8002688:	6961      	ldr	r1, [r4, #20]
 800268a:	1d18      	adds	r0, r3, #4
 800268c:	6028      	str	r0, [r5, #0]
 800268e:	0635      	lsls	r5, r6, #24
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	d501      	bpl.n	8002698 <_printf_i+0x1cc>
 8002694:	6019      	str	r1, [r3, #0]
 8002696:	e002      	b.n	800269e <_printf_i+0x1d2>
 8002698:	0670      	lsls	r0, r6, #25
 800269a:	d5fb      	bpl.n	8002694 <_printf_i+0x1c8>
 800269c:	8019      	strh	r1, [r3, #0]
 800269e:	2300      	movs	r3, #0
 80026a0:	6123      	str	r3, [r4, #16]
 80026a2:	4615      	mov	r5, r2
 80026a4:	e7ba      	b.n	800261c <_printf_i+0x150>
 80026a6:	682b      	ldr	r3, [r5, #0]
 80026a8:	1d1a      	adds	r2, r3, #4
 80026aa:	602a      	str	r2, [r5, #0]
 80026ac:	681d      	ldr	r5, [r3, #0]
 80026ae:	6862      	ldr	r2, [r4, #4]
 80026b0:	2100      	movs	r1, #0
 80026b2:	4628      	mov	r0, r5
 80026b4:	f7fd fd94 	bl	80001e0 <memchr>
 80026b8:	b108      	cbz	r0, 80026be <_printf_i+0x1f2>
 80026ba:	1b40      	subs	r0, r0, r5
 80026bc:	6060      	str	r0, [r4, #4]
 80026be:	6863      	ldr	r3, [r4, #4]
 80026c0:	6123      	str	r3, [r4, #16]
 80026c2:	2300      	movs	r3, #0
 80026c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026c8:	e7a8      	b.n	800261c <_printf_i+0x150>
 80026ca:	6923      	ldr	r3, [r4, #16]
 80026cc:	462a      	mov	r2, r5
 80026ce:	4649      	mov	r1, r9
 80026d0:	4640      	mov	r0, r8
 80026d2:	47d0      	blx	sl
 80026d4:	3001      	adds	r0, #1
 80026d6:	d0ab      	beq.n	8002630 <_printf_i+0x164>
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	079b      	lsls	r3, r3, #30
 80026dc:	d413      	bmi.n	8002706 <_printf_i+0x23a>
 80026de:	68e0      	ldr	r0, [r4, #12]
 80026e0:	9b03      	ldr	r3, [sp, #12]
 80026e2:	4298      	cmp	r0, r3
 80026e4:	bfb8      	it	lt
 80026e6:	4618      	movlt	r0, r3
 80026e8:	e7a4      	b.n	8002634 <_printf_i+0x168>
 80026ea:	2301      	movs	r3, #1
 80026ec:	4632      	mov	r2, r6
 80026ee:	4649      	mov	r1, r9
 80026f0:	4640      	mov	r0, r8
 80026f2:	47d0      	blx	sl
 80026f4:	3001      	adds	r0, #1
 80026f6:	d09b      	beq.n	8002630 <_printf_i+0x164>
 80026f8:	3501      	adds	r5, #1
 80026fa:	68e3      	ldr	r3, [r4, #12]
 80026fc:	9903      	ldr	r1, [sp, #12]
 80026fe:	1a5b      	subs	r3, r3, r1
 8002700:	42ab      	cmp	r3, r5
 8002702:	dcf2      	bgt.n	80026ea <_printf_i+0x21e>
 8002704:	e7eb      	b.n	80026de <_printf_i+0x212>
 8002706:	2500      	movs	r5, #0
 8002708:	f104 0619 	add.w	r6, r4, #25
 800270c:	e7f5      	b.n	80026fa <_printf_i+0x22e>
 800270e:	bf00      	nop
 8002710:	08002a31 	.word	0x08002a31
 8002714:	08002a42 	.word	0x08002a42

08002718 <memcpy>:
 8002718:	440a      	add	r2, r1
 800271a:	4291      	cmp	r1, r2
 800271c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002720:	d100      	bne.n	8002724 <memcpy+0xc>
 8002722:	4770      	bx	lr
 8002724:	b510      	push	{r4, lr}
 8002726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800272a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800272e:	4291      	cmp	r1, r2
 8002730:	d1f9      	bne.n	8002726 <memcpy+0xe>
 8002732:	bd10      	pop	{r4, pc}

08002734 <memmove>:
 8002734:	4288      	cmp	r0, r1
 8002736:	b510      	push	{r4, lr}
 8002738:	eb01 0402 	add.w	r4, r1, r2
 800273c:	d902      	bls.n	8002744 <memmove+0x10>
 800273e:	4284      	cmp	r4, r0
 8002740:	4623      	mov	r3, r4
 8002742:	d807      	bhi.n	8002754 <memmove+0x20>
 8002744:	1e43      	subs	r3, r0, #1
 8002746:	42a1      	cmp	r1, r4
 8002748:	d008      	beq.n	800275c <memmove+0x28>
 800274a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800274e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002752:	e7f8      	b.n	8002746 <memmove+0x12>
 8002754:	4402      	add	r2, r0
 8002756:	4601      	mov	r1, r0
 8002758:	428a      	cmp	r2, r1
 800275a:	d100      	bne.n	800275e <memmove+0x2a>
 800275c:	bd10      	pop	{r4, pc}
 800275e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002766:	e7f7      	b.n	8002758 <memmove+0x24>

08002768 <_free_r>:
 8002768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800276a:	2900      	cmp	r1, #0
 800276c:	d044      	beq.n	80027f8 <_free_r+0x90>
 800276e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002772:	9001      	str	r0, [sp, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	f1a1 0404 	sub.w	r4, r1, #4
 800277a:	bfb8      	it	lt
 800277c:	18e4      	addlt	r4, r4, r3
 800277e:	f000 f913 	bl	80029a8 <__malloc_lock>
 8002782:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <_free_r+0x94>)
 8002784:	9801      	ldr	r0, [sp, #4]
 8002786:	6813      	ldr	r3, [r2, #0]
 8002788:	b933      	cbnz	r3, 8002798 <_free_r+0x30>
 800278a:	6063      	str	r3, [r4, #4]
 800278c:	6014      	str	r4, [r2, #0]
 800278e:	b003      	add	sp, #12
 8002790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002794:	f000 b90e 	b.w	80029b4 <__malloc_unlock>
 8002798:	42a3      	cmp	r3, r4
 800279a:	d908      	bls.n	80027ae <_free_r+0x46>
 800279c:	6825      	ldr	r5, [r4, #0]
 800279e:	1961      	adds	r1, r4, r5
 80027a0:	428b      	cmp	r3, r1
 80027a2:	bf01      	itttt	eq
 80027a4:	6819      	ldreq	r1, [r3, #0]
 80027a6:	685b      	ldreq	r3, [r3, #4]
 80027a8:	1949      	addeq	r1, r1, r5
 80027aa:	6021      	streq	r1, [r4, #0]
 80027ac:	e7ed      	b.n	800278a <_free_r+0x22>
 80027ae:	461a      	mov	r2, r3
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	b10b      	cbz	r3, 80027b8 <_free_r+0x50>
 80027b4:	42a3      	cmp	r3, r4
 80027b6:	d9fa      	bls.n	80027ae <_free_r+0x46>
 80027b8:	6811      	ldr	r1, [r2, #0]
 80027ba:	1855      	adds	r5, r2, r1
 80027bc:	42a5      	cmp	r5, r4
 80027be:	d10b      	bne.n	80027d8 <_free_r+0x70>
 80027c0:	6824      	ldr	r4, [r4, #0]
 80027c2:	4421      	add	r1, r4
 80027c4:	1854      	adds	r4, r2, r1
 80027c6:	42a3      	cmp	r3, r4
 80027c8:	6011      	str	r1, [r2, #0]
 80027ca:	d1e0      	bne.n	800278e <_free_r+0x26>
 80027cc:	681c      	ldr	r4, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	6053      	str	r3, [r2, #4]
 80027d2:	4421      	add	r1, r4
 80027d4:	6011      	str	r1, [r2, #0]
 80027d6:	e7da      	b.n	800278e <_free_r+0x26>
 80027d8:	d902      	bls.n	80027e0 <_free_r+0x78>
 80027da:	230c      	movs	r3, #12
 80027dc:	6003      	str	r3, [r0, #0]
 80027de:	e7d6      	b.n	800278e <_free_r+0x26>
 80027e0:	6825      	ldr	r5, [r4, #0]
 80027e2:	1961      	adds	r1, r4, r5
 80027e4:	428b      	cmp	r3, r1
 80027e6:	bf04      	itt	eq
 80027e8:	6819      	ldreq	r1, [r3, #0]
 80027ea:	685b      	ldreq	r3, [r3, #4]
 80027ec:	6063      	str	r3, [r4, #4]
 80027ee:	bf04      	itt	eq
 80027f0:	1949      	addeq	r1, r1, r5
 80027f2:	6021      	streq	r1, [r4, #0]
 80027f4:	6054      	str	r4, [r2, #4]
 80027f6:	e7ca      	b.n	800278e <_free_r+0x26>
 80027f8:	b003      	add	sp, #12
 80027fa:	bd30      	pop	{r4, r5, pc}
 80027fc:	20000148 	.word	0x20000148

08002800 <sbrk_aligned>:
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	4e0e      	ldr	r6, [pc, #56]	; (800283c <sbrk_aligned+0x3c>)
 8002804:	460c      	mov	r4, r1
 8002806:	6831      	ldr	r1, [r6, #0]
 8002808:	4605      	mov	r5, r0
 800280a:	b911      	cbnz	r1, 8002812 <sbrk_aligned+0x12>
 800280c:	f000 f8bc 	bl	8002988 <_sbrk_r>
 8002810:	6030      	str	r0, [r6, #0]
 8002812:	4621      	mov	r1, r4
 8002814:	4628      	mov	r0, r5
 8002816:	f000 f8b7 	bl	8002988 <_sbrk_r>
 800281a:	1c43      	adds	r3, r0, #1
 800281c:	d00a      	beq.n	8002834 <sbrk_aligned+0x34>
 800281e:	1cc4      	adds	r4, r0, #3
 8002820:	f024 0403 	bic.w	r4, r4, #3
 8002824:	42a0      	cmp	r0, r4
 8002826:	d007      	beq.n	8002838 <sbrk_aligned+0x38>
 8002828:	1a21      	subs	r1, r4, r0
 800282a:	4628      	mov	r0, r5
 800282c:	f000 f8ac 	bl	8002988 <_sbrk_r>
 8002830:	3001      	adds	r0, #1
 8002832:	d101      	bne.n	8002838 <sbrk_aligned+0x38>
 8002834:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002838:	4620      	mov	r0, r4
 800283a:	bd70      	pop	{r4, r5, r6, pc}
 800283c:	2000014c 	.word	0x2000014c

08002840 <_malloc_r>:
 8002840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002844:	1ccd      	adds	r5, r1, #3
 8002846:	f025 0503 	bic.w	r5, r5, #3
 800284a:	3508      	adds	r5, #8
 800284c:	2d0c      	cmp	r5, #12
 800284e:	bf38      	it	cc
 8002850:	250c      	movcc	r5, #12
 8002852:	2d00      	cmp	r5, #0
 8002854:	4607      	mov	r7, r0
 8002856:	db01      	blt.n	800285c <_malloc_r+0x1c>
 8002858:	42a9      	cmp	r1, r5
 800285a:	d905      	bls.n	8002868 <_malloc_r+0x28>
 800285c:	230c      	movs	r3, #12
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	2600      	movs	r6, #0
 8002862:	4630      	mov	r0, r6
 8002864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002868:	4e2e      	ldr	r6, [pc, #184]	; (8002924 <_malloc_r+0xe4>)
 800286a:	f000 f89d 	bl	80029a8 <__malloc_lock>
 800286e:	6833      	ldr	r3, [r6, #0]
 8002870:	461c      	mov	r4, r3
 8002872:	bb34      	cbnz	r4, 80028c2 <_malloc_r+0x82>
 8002874:	4629      	mov	r1, r5
 8002876:	4638      	mov	r0, r7
 8002878:	f7ff ffc2 	bl	8002800 <sbrk_aligned>
 800287c:	1c43      	adds	r3, r0, #1
 800287e:	4604      	mov	r4, r0
 8002880:	d14d      	bne.n	800291e <_malloc_r+0xde>
 8002882:	6834      	ldr	r4, [r6, #0]
 8002884:	4626      	mov	r6, r4
 8002886:	2e00      	cmp	r6, #0
 8002888:	d140      	bne.n	800290c <_malloc_r+0xcc>
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	4631      	mov	r1, r6
 800288e:	4638      	mov	r0, r7
 8002890:	eb04 0803 	add.w	r8, r4, r3
 8002894:	f000 f878 	bl	8002988 <_sbrk_r>
 8002898:	4580      	cmp	r8, r0
 800289a:	d13a      	bne.n	8002912 <_malloc_r+0xd2>
 800289c:	6821      	ldr	r1, [r4, #0]
 800289e:	3503      	adds	r5, #3
 80028a0:	1a6d      	subs	r5, r5, r1
 80028a2:	f025 0503 	bic.w	r5, r5, #3
 80028a6:	3508      	adds	r5, #8
 80028a8:	2d0c      	cmp	r5, #12
 80028aa:	bf38      	it	cc
 80028ac:	250c      	movcc	r5, #12
 80028ae:	4629      	mov	r1, r5
 80028b0:	4638      	mov	r0, r7
 80028b2:	f7ff ffa5 	bl	8002800 <sbrk_aligned>
 80028b6:	3001      	adds	r0, #1
 80028b8:	d02b      	beq.n	8002912 <_malloc_r+0xd2>
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	442b      	add	r3, r5
 80028be:	6023      	str	r3, [r4, #0]
 80028c0:	e00e      	b.n	80028e0 <_malloc_r+0xa0>
 80028c2:	6822      	ldr	r2, [r4, #0]
 80028c4:	1b52      	subs	r2, r2, r5
 80028c6:	d41e      	bmi.n	8002906 <_malloc_r+0xc6>
 80028c8:	2a0b      	cmp	r2, #11
 80028ca:	d916      	bls.n	80028fa <_malloc_r+0xba>
 80028cc:	1961      	adds	r1, r4, r5
 80028ce:	42a3      	cmp	r3, r4
 80028d0:	6025      	str	r5, [r4, #0]
 80028d2:	bf18      	it	ne
 80028d4:	6059      	strne	r1, [r3, #4]
 80028d6:	6863      	ldr	r3, [r4, #4]
 80028d8:	bf08      	it	eq
 80028da:	6031      	streq	r1, [r6, #0]
 80028dc:	5162      	str	r2, [r4, r5]
 80028de:	604b      	str	r3, [r1, #4]
 80028e0:	4638      	mov	r0, r7
 80028e2:	f104 060b 	add.w	r6, r4, #11
 80028e6:	f000 f865 	bl	80029b4 <__malloc_unlock>
 80028ea:	f026 0607 	bic.w	r6, r6, #7
 80028ee:	1d23      	adds	r3, r4, #4
 80028f0:	1af2      	subs	r2, r6, r3
 80028f2:	d0b6      	beq.n	8002862 <_malloc_r+0x22>
 80028f4:	1b9b      	subs	r3, r3, r6
 80028f6:	50a3      	str	r3, [r4, r2]
 80028f8:	e7b3      	b.n	8002862 <_malloc_r+0x22>
 80028fa:	6862      	ldr	r2, [r4, #4]
 80028fc:	42a3      	cmp	r3, r4
 80028fe:	bf0c      	ite	eq
 8002900:	6032      	streq	r2, [r6, #0]
 8002902:	605a      	strne	r2, [r3, #4]
 8002904:	e7ec      	b.n	80028e0 <_malloc_r+0xa0>
 8002906:	4623      	mov	r3, r4
 8002908:	6864      	ldr	r4, [r4, #4]
 800290a:	e7b2      	b.n	8002872 <_malloc_r+0x32>
 800290c:	4634      	mov	r4, r6
 800290e:	6876      	ldr	r6, [r6, #4]
 8002910:	e7b9      	b.n	8002886 <_malloc_r+0x46>
 8002912:	230c      	movs	r3, #12
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	4638      	mov	r0, r7
 8002918:	f000 f84c 	bl	80029b4 <__malloc_unlock>
 800291c:	e7a1      	b.n	8002862 <_malloc_r+0x22>
 800291e:	6025      	str	r5, [r4, #0]
 8002920:	e7de      	b.n	80028e0 <_malloc_r+0xa0>
 8002922:	bf00      	nop
 8002924:	20000148 	.word	0x20000148

08002928 <_realloc_r>:
 8002928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800292c:	4680      	mov	r8, r0
 800292e:	4614      	mov	r4, r2
 8002930:	460e      	mov	r6, r1
 8002932:	b921      	cbnz	r1, 800293e <_realloc_r+0x16>
 8002934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002938:	4611      	mov	r1, r2
 800293a:	f7ff bf81 	b.w	8002840 <_malloc_r>
 800293e:	b92a      	cbnz	r2, 800294c <_realloc_r+0x24>
 8002940:	f7ff ff12 	bl	8002768 <_free_r>
 8002944:	4625      	mov	r5, r4
 8002946:	4628      	mov	r0, r5
 8002948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800294c:	f000 f838 	bl	80029c0 <_malloc_usable_size_r>
 8002950:	4284      	cmp	r4, r0
 8002952:	4607      	mov	r7, r0
 8002954:	d802      	bhi.n	800295c <_realloc_r+0x34>
 8002956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800295a:	d812      	bhi.n	8002982 <_realloc_r+0x5a>
 800295c:	4621      	mov	r1, r4
 800295e:	4640      	mov	r0, r8
 8002960:	f7ff ff6e 	bl	8002840 <_malloc_r>
 8002964:	4605      	mov	r5, r0
 8002966:	2800      	cmp	r0, #0
 8002968:	d0ed      	beq.n	8002946 <_realloc_r+0x1e>
 800296a:	42bc      	cmp	r4, r7
 800296c:	4622      	mov	r2, r4
 800296e:	4631      	mov	r1, r6
 8002970:	bf28      	it	cs
 8002972:	463a      	movcs	r2, r7
 8002974:	f7ff fed0 	bl	8002718 <memcpy>
 8002978:	4631      	mov	r1, r6
 800297a:	4640      	mov	r0, r8
 800297c:	f7ff fef4 	bl	8002768 <_free_r>
 8002980:	e7e1      	b.n	8002946 <_realloc_r+0x1e>
 8002982:	4635      	mov	r5, r6
 8002984:	e7df      	b.n	8002946 <_realloc_r+0x1e>
	...

08002988 <_sbrk_r>:
 8002988:	b538      	push	{r3, r4, r5, lr}
 800298a:	4d06      	ldr	r5, [pc, #24]	; (80029a4 <_sbrk_r+0x1c>)
 800298c:	2300      	movs	r3, #0
 800298e:	4604      	mov	r4, r0
 8002990:	4608      	mov	r0, r1
 8002992:	602b      	str	r3, [r5, #0]
 8002994:	f7fd fe54 	bl	8000640 <_sbrk>
 8002998:	1c43      	adds	r3, r0, #1
 800299a:	d102      	bne.n	80029a2 <_sbrk_r+0x1a>
 800299c:	682b      	ldr	r3, [r5, #0]
 800299e:	b103      	cbz	r3, 80029a2 <_sbrk_r+0x1a>
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	bd38      	pop	{r3, r4, r5, pc}
 80029a4:	20000150 	.word	0x20000150

080029a8 <__malloc_lock>:
 80029a8:	4801      	ldr	r0, [pc, #4]	; (80029b0 <__malloc_lock+0x8>)
 80029aa:	f000 b811 	b.w	80029d0 <__retarget_lock_acquire_recursive>
 80029ae:	bf00      	nop
 80029b0:	20000154 	.word	0x20000154

080029b4 <__malloc_unlock>:
 80029b4:	4801      	ldr	r0, [pc, #4]	; (80029bc <__malloc_unlock+0x8>)
 80029b6:	f000 b80c 	b.w	80029d2 <__retarget_lock_release_recursive>
 80029ba:	bf00      	nop
 80029bc:	20000154 	.word	0x20000154

080029c0 <_malloc_usable_size_r>:
 80029c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029c4:	1f18      	subs	r0, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bfbc      	itt	lt
 80029ca:	580b      	ldrlt	r3, [r1, r0]
 80029cc:	18c0      	addlt	r0, r0, r3
 80029ce:	4770      	bx	lr

080029d0 <__retarget_lock_acquire_recursive>:
 80029d0:	4770      	bx	lr

080029d2 <__retarget_lock_release_recursive>:
 80029d2:	4770      	bx	lr

080029d4 <_init>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	bf00      	nop
 80029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029da:	bc08      	pop	{r3}
 80029dc:	469e      	mov	lr, r3
 80029de:	4770      	bx	lr

080029e0 <_fini>:
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e2:	bf00      	nop
 80029e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e6:	bc08      	pop	{r3}
 80029e8:	469e      	mov	lr, r3
 80029ea:	4770      	bx	lr
