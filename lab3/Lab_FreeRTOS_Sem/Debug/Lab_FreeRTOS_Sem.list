
Lab_FreeRTOS_Sem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003758  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080038e8  080038e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003900  08003900  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003908  08003908  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800390c  0800390c  0001390c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00003fc4  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003fd8  20003fd8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b92  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001db8  00000000  00000000  00028bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  0002a990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000718  00000000  00000000  0002b1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a61  00000000  00000000  0002b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009cca  00000000  00000000  0004c319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c78bd  00000000  00000000  00055fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d8a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e5c  00000000  00000000  0011d8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080038d0 	.word	0x080038d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080038d0 	.word	0x080038d0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000030 	.word	0x20000030
 8000504:	20000084 	.word	0x20000084

08000508 <gpio_led_state>:

/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* USER CODE BEGIN 0 */
void gpio_led_state(uint8_t LED_ID, uint8_t state) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	460a      	mov	r2, r1
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	4613      	mov	r3, r2
 8000516:	71bb      	strb	r3, [r7, #6]
  GPIO_PinState pinState;

  pinState = (state == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	2b01      	cmp	r3, #1
 800051c:	bf0c      	ite	eq
 800051e:	2301      	moveq	r3, #1
 8000520:	2300      	movne	r3, #0
 8000522:	b2db      	uxtb	r3, r3
 8000524:	73fb      	strb	r3, [r7, #15]

  switch (LED_ID)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	3b01      	subs	r3, #1
 800052a:	2b03      	cmp	r3, #3
 800052c:	d82a      	bhi.n	8000584 <gpio_led_state+0x7c>
 800052e:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <gpio_led_state+0x2c>)
 8000530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000534:	08000545 	.word	0x08000545
 8000538:	08000555 	.word	0x08000555
 800053c:	08000565 	.word	0x08000565
 8000540:	08000575 	.word	0x08000575
  {
  case LED3_ORANGE_ID:
    HAL_GPIO_WritePin(GPIOD, LED3_ORANGE_PinNumber, pinState );
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	461a      	mov	r2, r3
 8000548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054c:	4810      	ldr	r0, [pc, #64]	; (8000590 <gpio_led_state+0x88>)
 800054e:	f000 fd73 	bl	8001038 <HAL_GPIO_WritePin>
    break;
 8000552:	e018      	b.n	8000586 <gpio_led_state+0x7e>

  case LED4_GREEN_ID:
    HAL_GPIO_WritePin(GPIOD, LED4_GREEN_PinNumber, pinState );
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	461a      	mov	r2, r3
 8000558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <gpio_led_state+0x88>)
 800055e:	f000 fd6b 	bl	8001038 <HAL_GPIO_WritePin>
    break;
 8000562:	e010      	b.n	8000586 <gpio_led_state+0x7e>

  case LED5_RED_ID:
    HAL_GPIO_WritePin(GPIOD, LED5_RED_PinNumber, pinState );
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	461a      	mov	r2, r3
 8000568:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800056c:	4808      	ldr	r0, [pc, #32]	; (8000590 <gpio_led_state+0x88>)
 800056e:	f000 fd63 	bl	8001038 <HAL_GPIO_WritePin>
    break;
 8000572:	e008      	b.n	8000586 <gpio_led_state+0x7e>

  case LED6_BLUE_ID:
    HAL_GPIO_WritePin(GPIOD, LED6_BLUE_PinNumber, pinState );
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	461a      	mov	r2, r3
 8000578:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <gpio_led_state+0x88>)
 800057e:	f000 fd5b 	bl	8001038 <HAL_GPIO_WritePin>
    break;
 8000582:	e000      	b.n	8000586 <gpio_led_state+0x7e>

  default:
    break;
 8000584:	bf00      	nop
  }
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40020c00 	.word	0x40020c00

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	4b2b      	ldr	r3, [pc, #172]	; (800065c <MX_GPIO_Init+0xc8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a2a      	ldr	r2, [pc, #168]	; (800065c <MX_GPIO_Init+0xc8>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b28      	ldr	r3, [pc, #160]	; (800065c <MX_GPIO_Init+0xc8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	4b24      	ldr	r3, [pc, #144]	; (800065c <MX_GPIO_Init+0xc8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a23      	ldr	r2, [pc, #140]	; (800065c <MX_GPIO_Init+0xc8>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <MX_GPIO_Init+0xc8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <MX_GPIO_Init+0xc8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a1c      	ldr	r2, [pc, #112]	; (800065c <MX_GPIO_Init+0xc8>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <MX_GPIO_Init+0xc8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000604:	4816      	ldr	r0, [pc, #88]	; (8000660 <MX_GPIO_Init+0xcc>)
 8000606:	f000 fd17 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	4811      	ldr	r0, [pc, #68]	; (8000664 <MX_GPIO_Init+0xd0>)
 8000620:	f000 fb6e 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000624:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <MX_GPIO_Init+0xcc>)
 800063e:	f000 fb5f 	bl	8000d00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2105      	movs	r1, #5
 8000646:	2006      	movs	r0, #6
 8000648:	f000 fb15 	bl	8000c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800064c:	2006      	movs	r0, #6
 800064e:	f000 fb2e 	bl	8000cae <HAL_NVIC_EnableIRQ>

}
 8000652:	bf00      	nop
 8000654:	3720      	adds	r7, #32
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40020c00 	.word	0x40020c00
 8000664:	40020000 	.word	0x40020000

08000668 <main>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af02      	add	r7, sp, #8
	HAL_Init();
 800066e:	f000 f991 	bl	8000994 <HAL_Init>
	SystemClock_Config();
 8000672:	f000 f82b 	bl	80006cc <SystemClock_Config>
	MX_GPIO_Init();
 8000676:	f7ff ff8d 	bl	8000594 <MX_GPIO_Init>

	xBinarySemaphore = xSemaphoreCreateBinary();
 800067a:	2203      	movs	r2, #3
 800067c:	2100      	movs	r1, #0
 800067e:	2001      	movs	r0, #1
 8000680:	f001 fa8c 	bl	8001b9c <xQueueGenericCreate>
 8000684:	4603      	mov	r3, r0
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <main+0x58>)
 8000688:	6013      	str	r3, [r2, #0]
	if(xBinarySemaphore != NULL) {
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <main+0x58>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d015      	beq.n	80006be <main+0x56>
		xTaskCreate(vTaskLow, NULL, configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000692:	2300      	movs	r3, #0
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2300      	movs	r3, #0
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	2100      	movs	r1, #0
 80006a0:	4808      	ldr	r0, [pc, #32]	; (80006c4 <main+0x5c>)
 80006a2:	f001 fe3e 	bl	8002322 <xTaskCreate>
		xTaskCreate(vTaskHigh, NULL, configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 80006a6:	2300      	movs	r3, #0
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2302      	movs	r3, #2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	2280      	movs	r2, #128	; 0x80
 80006b2:	2100      	movs	r1, #0
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <main+0x60>)
 80006b6:	f001 fe34 	bl	8002322 <xTaskCreate>
		vTaskStartScheduler();
 80006ba:	f001 ff9d 	bl	80025f8 <vTaskStartScheduler>
	}

	while(1);
 80006be:	e7fe      	b.n	80006be <main+0x56>
 80006c0:	20000284 	.word	0x20000284
 80006c4:	08000811 	.word	0x08000811
 80006c8:	080007b9 	.word	0x080007b9

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 f8f0 	bl	80038c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <SystemClock_Config+0xb0>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a20      	ldr	r2, [pc, #128]	; (800077c <SystemClock_Config+0xb0>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <SystemClock_Config+0xb0>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <SystemClock_Config+0xb4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <SystemClock_Config+0xb4>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <SystemClock_Config+0xb4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000732:	2300      	movs	r3, #0
 8000734:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fcae 	bl	800109c <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000746:	f000 f88d 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800074e:	2301      	movs	r3, #1
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f000 ff11 	bl	800158c <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000770:	f000 f878 	bl	8000864 <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3750      	adds	r7, #80	; 0x50
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_BUTTON_PIN) {
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d109      	bne.n	80007a8 <HAL_GPIO_EXTI_Callback+0x24>
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000794:	2006      	movs	r0, #6
 8000796:	f000 fa98 	bl	8000cca <HAL_NVIC_DisableIRQ>
		buttonPressed = 1;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_GPIO_EXTI_Callback+0x30>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007a0:	2006      	movs	r0, #6
 80007a2:	f000 fa84 	bl	8000cae <HAL_NVIC_EnableIRQ>
	}
	else {
		__NOP();
	}
}
 80007a6:	e000      	b.n	80007aa <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 80007a8:	bf00      	nop
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000288 	.word	0x20000288

080007b8 <vTaskHigh>:

void vTaskHigh(void *pvParameters) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	portTickType t1, t2;
	gpio_led_state(LED5_RED_ID, 0);
 80007c0:	2100      	movs	r1, #0
 80007c2:	2003      	movs	r0, #3
 80007c4:	f7ff fea0 	bl	8000508 <gpio_led_state>
	while(1) {
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <vTaskHigh+0x54>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fb3b 	bl	8001e4c <xQueueSemaphoreTake>
		gpio_led_state(LED5_RED_ID, 1);
 80007d6:	2101      	movs	r1, #1
 80007d8:	2003      	movs	r0, #3
 80007da:	f7ff fe95 	bl	8000508 <gpio_led_state>
		t1 = xTaskGetTickCount();
 80007de:	f002 f815 	bl	800280c <xTaskGetTickCount>
 80007e2:	60f8      	str	r0, [r7, #12]
		while(1) {
			t2 = xTaskGetTickCount();
 80007e4:	f002 f812 	bl	800280c <xTaskGetTickCount>
 80007e8:	60b8      	str	r0, [r7, #8]
			if(((t2 - t1) * portTICK_RATE_MS) >= 2000) {
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	1ad2      	subs	r2, r2, r3
 80007f0:	4613      	mov	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	4413      	add	r3, r2
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80007fc:	d200      	bcs.n	8000800 <vTaskHigh+0x48>
			t2 = xTaskGetTickCount();
 80007fe:	e7f1      	b.n	80007e4 <vTaskHigh+0x2c>
				break;
 8000800:	bf00      	nop
			}
		}
		gpio_led_state(LED5_RED_ID, 0);
 8000802:	2100      	movs	r1, #0
 8000804:	2003      	movs	r0, #3
 8000806:	f7ff fe7f 	bl	8000508 <gpio_led_state>
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 800080a:	e7dd      	b.n	80007c8 <vTaskHigh+0x10>
 800080c:	20000284 	.word	0x20000284

08000810 <vTaskLow>:
	}
}

void vTaskLow(void *pvParameters) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	uint32_t led_state;
	led_state = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
	while(1) {
		gpio_led_state(LED4_GREEN_ID, led_state);
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4619      	mov	r1, r3
 8000822:	2002      	movs	r0, #2
 8000824:	f7ff fe70 	bl	8000508 <gpio_led_state>
		led_state = (led_state == 1) ? 0 : 1;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2b01      	cmp	r3, #1
 800082c:	bf14      	ite	ne
 800082e:	2301      	movne	r3, #1
 8000830:	2300      	moveq	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	60fb      	str	r3, [r7, #12]
		if(buttonPressed) {
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <vTaskLow+0x4c>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d009      	beq.n	8000852 <vTaskLow+0x42>
			buttonPressed = 0;
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <vTaskLow+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(xBinarySemaphore);
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <vTaskLow+0x50>)
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	2300      	movs	r3, #0
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	f001 f9ff 	bl	8001c50 <xQueueGenericSend>
		}

		vTaskDelay(DELAY_MS / portTICK_RATE_MS);
 8000852:	200a      	movs	r0, #10
 8000854:	f001 fe9c 	bl	8002590 <vTaskDelay>
		gpio_led_state(LED4_GREEN_ID, led_state);
 8000858:	e7e0      	b.n	800081c <vTaskLow+0xc>
 800085a:	bf00      	nop
 800085c:	20000288 	.word	0x20000288
 8000860:	20000284 	.word	0x20000284

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <HAL_MspInit+0x54>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <HAL_MspInit+0x54>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <HAL_MspInit+0x54>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_MspInit+0x54>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	210f      	movs	r1, #15
 80008b2:	f06f 0001 	mvn.w	r0, #1
 80008b6:	f000 f9de 	bl	8000c76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f8:	f000 f89e 	bl	8000a38 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008fc:	f002 fa8a 	bl	8002e14 <xTaskGetSchedulerState>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d001      	beq.n	800090a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000906:	f002 fe67 	bl	80035d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}

0800090e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000912:	2001      	movs	r0, #1
 8000914:	f000 fbaa 	bl	800106c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <SystemInit+0x20>)
 8000922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000926:	4a05      	ldr	r2, [pc, #20]	; (800093c <SystemInit+0x20>)
 8000928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800092c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000978 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000946:	490e      	ldr	r1, [pc, #56]	; (8000980 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000948:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800094c:	e002      	b.n	8000954 <LoopCopyDataInit>

0800094e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000952:	3304      	adds	r3, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000958:	d3f9      	bcc.n	800094e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800095c:	4c0b      	ldr	r4, [pc, #44]	; (800098c <LoopFillZerobss+0x26>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000960:	e001      	b.n	8000966 <LoopFillZerobss>

08000962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000964:	3204      	adds	r2, #4

08000966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000968:	d3fb      	bcc.n	8000962 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800096a:	f7ff ffd7 	bl	800091c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096e:	f002 ff75 	bl	800385c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000972:	f7ff fe79 	bl	8000668 <main>
  bx  lr    
 8000976:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000984:	08003910 	.word	0x08003910
  ldr r2, =_sbss
 8000988:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800098c:	20003fd8 	.word	0x20003fd8

08000990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC_IRQHandler>
	...

08000994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <HAL_Init+0x40>)
 800099e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <HAL_Init+0x40>)
 80009aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_Init+0x40>)
 80009b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 f94f 	bl	8000c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c2:	200f      	movs	r0, #15
 80009c4:	f000 f808 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c8:	f7ff ff52 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023c00 	.word	0x40023c00

080009d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x54>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_InitTick+0x58>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	4619      	mov	r1, r3
 80009ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 f975 	bl	8000ce6 <HAL_SYSTICK_Config>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e00e      	b.n	8000a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d80a      	bhi.n	8000a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a14:	f000 f92f 	bl	8000c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a18:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <HAL_InitTick+0x5c>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e000      	b.n	8000a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000004 	.word	0x20000004

08000a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x20>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_IncTick+0x24>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_IncTick+0x24>)
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	2000028c 	.word	0x2000028c

08000a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return uwTick;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <HAL_GetTick+0x14>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	2000028c 	.word	0x2000028c

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db0b      	blt.n	8000b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 021f 	and.w	r2, r3, #31
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <__NVIC_EnableIRQ+0x38>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	2001      	movs	r0, #1
 8000afe:	fa00 f202 	lsl.w	r2, r0, r2
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db12      	blt.n	8000b50 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 021f 	and.w	r2, r3, #31
 8000b30:	490a      	ldr	r1, [pc, #40]	; (8000b5c <__NVIC_DisableIRQ+0x44>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	2001      	movs	r0, #1
 8000b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3e:	3320      	adds	r3, #32
 8000b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b44:	f3bf 8f4f 	dsb	sy
}
 8000b48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b4a:	f3bf 8f6f 	isb	sy
}
 8000b4e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c2c:	d301      	bcc.n	8000c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00f      	b.n	8000c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <SysTick_Config+0x40>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	f7ff ff8e 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <SysTick_Config+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SysTick_Config+0x40>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	e000e010 	.word	0xe000e010

08000c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ff05 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c88:	f7ff ff1a 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	68b9      	ldr	r1, [r7, #8]
 8000c92:	6978      	ldr	r0, [r7, #20]
 8000c94:	f7ff ff8e 	bl	8000bb4 <NVIC_EncodePriority>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff5d 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff0d 	bl	8000adc <__NVIC_EnableIRQ>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff1d 	bl	8000b18 <__NVIC_DisableIRQ>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ff94 	bl	8000c1c <SysTick_Config>
 8000cf4:	4603      	mov	r3, r0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e16b      	b.n	8000ff4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f040 815a 	bne.w	8000fee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d005      	beq.n	8000d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d130      	bne.n	8000db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 0201 	and.w	r2, r3, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d017      	beq.n	8000df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d123      	bne.n	8000e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	220f      	movs	r2, #15
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	69b9      	ldr	r1, [r7, #24]
 8000e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0203 	and.w	r2, r3, #3
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80b4 	beq.w	8000fee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b60      	ldr	r3, [pc, #384]	; (800100c <HAL_GPIO_Init+0x30c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a5f      	ldr	r2, [pc, #380]	; (800100c <HAL_GPIO_Init+0x30c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b5d      	ldr	r3, [pc, #372]	; (800100c <HAL_GPIO_Init+0x30c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea2:	4a5b      	ldr	r2, [pc, #364]	; (8001010 <HAL_GPIO_Init+0x310>)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a52      	ldr	r2, [pc, #328]	; (8001014 <HAL_GPIO_Init+0x314>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d02b      	beq.n	8000f26 <HAL_GPIO_Init+0x226>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a51      	ldr	r2, [pc, #324]	; (8001018 <HAL_GPIO_Init+0x318>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d025      	beq.n	8000f22 <HAL_GPIO_Init+0x222>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a50      	ldr	r2, [pc, #320]	; (800101c <HAL_GPIO_Init+0x31c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d01f      	beq.n	8000f1e <HAL_GPIO_Init+0x21e>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4f      	ldr	r2, [pc, #316]	; (8001020 <HAL_GPIO_Init+0x320>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d019      	beq.n	8000f1a <HAL_GPIO_Init+0x21a>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4e      	ldr	r2, [pc, #312]	; (8001024 <HAL_GPIO_Init+0x324>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d013      	beq.n	8000f16 <HAL_GPIO_Init+0x216>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4d      	ldr	r2, [pc, #308]	; (8001028 <HAL_GPIO_Init+0x328>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d00d      	beq.n	8000f12 <HAL_GPIO_Init+0x212>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	; (800102c <HAL_GPIO_Init+0x32c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d007      	beq.n	8000f0e <HAL_GPIO_Init+0x20e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4b      	ldr	r2, [pc, #300]	; (8001030 <HAL_GPIO_Init+0x330>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_GPIO_Init+0x20a>
 8000f06:	2307      	movs	r3, #7
 8000f08:	e00e      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	e00c      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f0e:	2306      	movs	r3, #6
 8000f10:	e00a      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f12:	2305      	movs	r3, #5
 8000f14:	e008      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f16:	2304      	movs	r3, #4
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e004      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f26:	2300      	movs	r3, #0
 8000f28:	69fa      	ldr	r2, [r7, #28]
 8000f2a:	f002 0203 	and.w	r2, r2, #3
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	4093      	lsls	r3, r2
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f38:	4935      	ldr	r1, [pc, #212]	; (8001010 <HAL_GPIO_Init+0x310>)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f46:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6a:	4a32      	ldr	r2, [pc, #200]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f70:	4b30      	ldr	r3, [pc, #192]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f94:	4a27      	ldr	r2, [pc, #156]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9a:	4b26      	ldr	r3, [pc, #152]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fbe:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe8:	4a12      	ldr	r2, [pc, #72]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	f67f ae90 	bls.w	8000d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40013800 	.word	0x40013800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020400 	.word	0x40020400
 800101c:	40020800 	.word	0x40020800
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40021000 	.word	0x40021000
 8001028:	40021400 	.word	0x40021400
 800102c:	40021800 	.word	0x40021800
 8001030:	40021c00 	.word	0x40021c00
 8001034:	40013c00 	.word	0x40013c00

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001054:	e003      	b.n	800105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001078:	695a      	ldr	r2, [r3, #20]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4013      	ands	r3, r2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fb7a 	bl	8000784 <HAL_GPIO_EXTI_Callback>
  }
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40013c00 	.word	0x40013c00

0800109c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e267      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d075      	beq.n	80011a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ba:	4b88      	ldr	r3, [pc, #544]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d00c      	beq.n	80010e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010c6:	4b85      	ldr	r3, [pc, #532]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ce:	2b08      	cmp	r3, #8
 80010d0:	d112      	bne.n	80010f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d2:	4b82      	ldr	r3, [pc, #520]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010de:	d10b      	bne.n	80010f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e0:	4b7e      	ldr	r3, [pc, #504]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d05b      	beq.n	80011a4 <HAL_RCC_OscConfig+0x108>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d157      	bne.n	80011a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e242      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d106      	bne.n	8001110 <HAL_RCC_OscConfig+0x74>
 8001102:	4b76      	ldr	r3, [pc, #472]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a75      	ldr	r2, [pc, #468]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e01d      	b.n	800114c <HAL_RCC_OscConfig+0xb0>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x98>
 800111a:	4b70      	ldr	r3, [pc, #448]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a6f      	ldr	r2, [pc, #444]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b6d      	ldr	r3, [pc, #436]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a6c      	ldr	r2, [pc, #432]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e00b      	b.n	800114c <HAL_RCC_OscConfig+0xb0>
 8001134:	4b69      	ldr	r3, [pc, #420]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a68      	ldr	r2, [pc, #416]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 800113a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b66      	ldr	r3, [pc, #408]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a65      	ldr	r2, [pc, #404]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d013      	beq.n	800117c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fc84 	bl	8000a60 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fc80 	bl	8000a60 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	; 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e207      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	4b5b      	ldr	r3, [pc, #364]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0xc0>
 800117a:	e014      	b.n	80011a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fc70 	bl	8000a60 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fc6c 	bl	8000a60 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	; 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e1f3      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001196:	4b51      	ldr	r3, [pc, #324]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0xe8>
 80011a2:	e000      	b.n	80011a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d063      	beq.n	800127a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011b2:	4b4a      	ldr	r3, [pc, #296]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00b      	beq.n	80011d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d11c      	bne.n	8001204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ca:	4b44      	ldr	r3, [pc, #272]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d116      	bne.n	8001204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	4b41      	ldr	r3, [pc, #260]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <HAL_RCC_OscConfig+0x152>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d001      	beq.n	80011ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e1c7      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ee:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4937      	ldr	r1, [pc, #220]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001202:	e03a      	b.n	800127a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d020      	beq.n	800124e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800120c:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <HAL_RCC_OscConfig+0x244>)
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001212:	f7ff fc25 	bl	8000a60 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fc21 	bl	8000a60 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e1a8      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	4b28      	ldr	r3, [pc, #160]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4925      	ldr	r1, [pc, #148]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
 800124c:	e015      	b.n	800127a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <HAL_RCC_OscConfig+0x244>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001254:	f7ff fc04 	bl	8000a60 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125c:	f7ff fc00 	bl	8000a60 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e187      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126e:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d036      	beq.n	80012f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d016      	beq.n	80012bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_RCC_OscConfig+0x248>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001294:	f7ff fbe4 	bl	8000a60 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129c:	f7ff fbe0 	bl	8000a60 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e167      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80012b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x200>
 80012ba:	e01b      	b.n	80012f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_RCC_OscConfig+0x248>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fbcd 	bl	8000a60 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c8:	e00e      	b.n	80012e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ca:	f7ff fbc9 	bl	8000a60 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d907      	bls.n	80012e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e150      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
 80012dc:	40023800 	.word	0x40023800
 80012e0:	42470000 	.word	0x42470000
 80012e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e8:	4b88      	ldr	r3, [pc, #544]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80012ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1ea      	bne.n	80012ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 8097 	beq.w	8001430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001306:	4b81      	ldr	r3, [pc, #516]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10f      	bne.n	8001332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b7d      	ldr	r3, [pc, #500]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a7c      	ldr	r2, [pc, #496]	; (800150c <HAL_RCC_OscConfig+0x470>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b7a      	ldr	r3, [pc, #488]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800132e:	2301      	movs	r3, #1
 8001330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001332:	4b77      	ldr	r3, [pc, #476]	; (8001510 <HAL_RCC_OscConfig+0x474>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d118      	bne.n	8001370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800133e:	4b74      	ldr	r3, [pc, #464]	; (8001510 <HAL_RCC_OscConfig+0x474>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a73      	ldr	r2, [pc, #460]	; (8001510 <HAL_RCC_OscConfig+0x474>)
 8001344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134a:	f7ff fb89 	bl	8000a60 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001352:	f7ff fb85 	bl	8000a60 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e10c      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	4b6a      	ldr	r3, [pc, #424]	; (8001510 <HAL_RCC_OscConfig+0x474>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x2ea>
 8001378:	4b64      	ldr	r3, [pc, #400]	; (800150c <HAL_RCC_OscConfig+0x470>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137c:	4a63      	ldr	r2, [pc, #396]	; (800150c <HAL_RCC_OscConfig+0x470>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6713      	str	r3, [r2, #112]	; 0x70
 8001384:	e01c      	b.n	80013c0 <HAL_RCC_OscConfig+0x324>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b05      	cmp	r3, #5
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x30c>
 800138e:	4b5f      	ldr	r3, [pc, #380]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001392:	4a5e      	ldr	r2, [pc, #376]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6713      	str	r3, [r2, #112]	; 0x70
 800139a:	4b5c      	ldr	r3, [pc, #368]	; (800150c <HAL_RCC_OscConfig+0x470>)
 800139c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139e:	4a5b      	ldr	r2, [pc, #364]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6713      	str	r3, [r2, #112]	; 0x70
 80013a6:	e00b      	b.n	80013c0 <HAL_RCC_OscConfig+0x324>
 80013a8:	4b58      	ldr	r3, [pc, #352]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80013aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ac:	4a57      	ldr	r2, [pc, #348]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80013ae:	f023 0301 	bic.w	r3, r3, #1
 80013b2:	6713      	str	r3, [r2, #112]	; 0x70
 80013b4:	4b55      	ldr	r3, [pc, #340]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b8:	4a54      	ldr	r2, [pc, #336]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80013ba:	f023 0304 	bic.w	r3, r3, #4
 80013be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d015      	beq.n	80013f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fb4a 	bl	8000a60 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f7ff fb46 	bl	8000a60 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f241 3288 	movw	r2, #5000	; 0x1388
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e0cb      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e6:	4b49      	ldr	r3, [pc, #292]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0ee      	beq.n	80013d0 <HAL_RCC_OscConfig+0x334>
 80013f2:	e014      	b.n	800141e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f4:	f7ff fb34 	bl	8000a60 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fa:	e00a      	b.n	8001412 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fc:	f7ff fb30 	bl	8000a60 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f241 3288 	movw	r2, #5000	; 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e0b5      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001412:	4b3e      	ldr	r3, [pc, #248]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1ee      	bne.n	80013fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d105      	bne.n	8001430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001424:	4b39      	ldr	r3, [pc, #228]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	4a38      	ldr	r2, [pc, #224]	; (800150c <HAL_RCC_OscConfig+0x470>)
 800142a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800142e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80a1 	beq.w	800157c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800143a:	4b34      	ldr	r3, [pc, #208]	; (800150c <HAL_RCC_OscConfig+0x470>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b08      	cmp	r3, #8
 8001444:	d05c      	beq.n	8001500 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d141      	bne.n	80014d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144e:	4b31      	ldr	r3, [pc, #196]	; (8001514 <HAL_RCC_OscConfig+0x478>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fb04 	bl	8000a60 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff fb00 	bl	8000a60 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e087      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69da      	ldr	r2, [r3, #28]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	019b      	lsls	r3, r3, #6
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	085b      	lsrs	r3, r3, #1
 8001492:	3b01      	subs	r3, #1
 8001494:	041b      	lsls	r3, r3, #16
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149c:	061b      	lsls	r3, r3, #24
 800149e:	491b      	ldr	r1, [pc, #108]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_RCC_OscConfig+0x478>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fad9 	bl	8000a60 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b2:	f7ff fad5 	bl	8000a60 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e05c      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x416>
 80014d0:	e054      	b.n	800157c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <HAL_RCC_OscConfig+0x478>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fac2 	bl	8000a60 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff fabe 	bl	8000a60 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e045      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x444>
 80014fe:	e03d      	b.n	800157c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d107      	bne.n	8001518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e038      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
 800150c:	40023800 	.word	0x40023800
 8001510:	40007000 	.word	0x40007000
 8001514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_RCC_OscConfig+0x4ec>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d028      	beq.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d121      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	429a      	cmp	r2, r3
 8001540:	d11a      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001548:	4013      	ands	r3, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800154e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001550:	4293      	cmp	r3, r2
 8001552:	d111      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	085b      	lsrs	r3, r3, #1
 8001560:	3b01      	subs	r3, #1
 8001562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001564:	429a      	cmp	r2, r3
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0cc      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a0:	4b68      	ldr	r3, [pc, #416]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d90c      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	4b65      	ldr	r3, [pc, #404]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b63      	ldr	r3, [pc, #396]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0b8      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e0:	4b59      	ldr	r3, [pc, #356]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4a58      	ldr	r2, [pc, #352]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4a52      	ldr	r2, [pc, #328]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	494d      	ldr	r1, [pc, #308]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	4313      	orrs	r3, r2
 8001614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d044      	beq.n	80016ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d119      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e07f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d003      	beq.n	800164a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001646:	2b03      	cmp	r3, #3
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164a:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d109      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e06f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e067      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f023 0203 	bic.w	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4934      	ldr	r1, [pc, #208]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	4313      	orrs	r3, r2
 800167a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800167c:	f7ff f9f0 	bl	8000a60 <HAL_GetTick>
 8001680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	e00a      	b.n	800169a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001684:	f7ff f9ec 	bl	8000a60 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e04f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 020c 	and.w	r2, r3, #12
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d1eb      	bne.n	8001684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016ac:	4b25      	ldr	r3, [pc, #148]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d20c      	bcs.n	80016d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e032      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4916      	ldr	r1, [pc, #88]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d009      	beq.n	8001712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	4313      	orrs	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001712:	f000 f821 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8001716:	4602      	mov	r2, r0
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	490a      	ldr	r1, [pc, #40]	; (800174c <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	5ccb      	ldrb	r3, [r1, r3]
 8001726:	fa22 f303 	lsr.w	r3, r2, r3
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x1c8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f950 	bl	80009d8 <HAL_InitTick>

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023c00 	.word	0x40023c00
 8001748:	40023800 	.word	0x40023800
 800174c:	080038f0 	.word	0x080038f0
 8001750:	20000000 	.word	0x20000000
 8001754:	20000004 	.word	0x20000004

08001758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800175c:	b094      	sub	sp, #80	; 0x50
 800175e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	647b      	str	r3, [r7, #68]	; 0x44
 8001764:	2300      	movs	r3, #0
 8001766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001768:	2300      	movs	r3, #0
 800176a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001770:	4b79      	ldr	r3, [pc, #484]	; (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d00d      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x40>
 800177c:	2b08      	cmp	r3, #8
 800177e:	f200 80e1 	bhi.w	8001944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <HAL_RCC_GetSysClockFreq+0x34>
 8001786:	2b04      	cmp	r3, #4
 8001788:	d003      	beq.n	8001792 <HAL_RCC_GetSysClockFreq+0x3a>
 800178a:	e0db      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800178c:	4b73      	ldr	r3, [pc, #460]	; (800195c <HAL_RCC_GetSysClockFreq+0x204>)
 800178e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001790:	e0db      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001792:	4b73      	ldr	r3, [pc, #460]	; (8001960 <HAL_RCC_GetSysClockFreq+0x208>)
 8001794:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001796:	e0d8      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001798:	4b6f      	ldr	r3, [pc, #444]	; (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a2:	4b6d      	ldr	r3, [pc, #436]	; (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ae:	4b6a      	ldr	r3, [pc, #424]	; (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	099b      	lsrs	r3, r3, #6
 80017b4:	2200      	movs	r2, #0
 80017b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
 80017c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017ca:	4622      	mov	r2, r4
 80017cc:	462b      	mov	r3, r5
 80017ce:	f04f 0000 	mov.w	r0, #0
 80017d2:	f04f 0100 	mov.w	r1, #0
 80017d6:	0159      	lsls	r1, r3, #5
 80017d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017dc:	0150      	lsls	r0, r2, #5
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4621      	mov	r1, r4
 80017e4:	1a51      	subs	r1, r2, r1
 80017e6:	6139      	str	r1, [r7, #16]
 80017e8:	4629      	mov	r1, r5
 80017ea:	eb63 0301 	sbc.w	r3, r3, r1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017fc:	4659      	mov	r1, fp
 80017fe:	018b      	lsls	r3, r1, #6
 8001800:	4651      	mov	r1, sl
 8001802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001806:	4651      	mov	r1, sl
 8001808:	018a      	lsls	r2, r1, #6
 800180a:	4651      	mov	r1, sl
 800180c:	ebb2 0801 	subs.w	r8, r2, r1
 8001810:	4659      	mov	r1, fp
 8001812:	eb63 0901 	sbc.w	r9, r3, r1
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800182a:	4690      	mov	r8, r2
 800182c:	4699      	mov	r9, r3
 800182e:	4623      	mov	r3, r4
 8001830:	eb18 0303 	adds.w	r3, r8, r3
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	462b      	mov	r3, r5
 8001838:	eb49 0303 	adc.w	r3, r9, r3
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800184a:	4629      	mov	r1, r5
 800184c:	024b      	lsls	r3, r1, #9
 800184e:	4621      	mov	r1, r4
 8001850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001854:	4621      	mov	r1, r4
 8001856:	024a      	lsls	r2, r1, #9
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800185e:	2200      	movs	r2, #0
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
 8001862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001868:	f7fe fcb2 	bl	80001d0 <__aeabi_uldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4613      	mov	r3, r2
 8001872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001874:	e058      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001876:	4b38      	ldr	r3, [pc, #224]	; (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	099b      	lsrs	r3, r3, #6
 800187c:	2200      	movs	r2, #0
 800187e:	4618      	mov	r0, r3
 8001880:	4611      	mov	r1, r2
 8001882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
 800188c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001890:	4642      	mov	r2, r8
 8001892:	464b      	mov	r3, r9
 8001894:	f04f 0000 	mov.w	r0, #0
 8001898:	f04f 0100 	mov.w	r1, #0
 800189c:	0159      	lsls	r1, r3, #5
 800189e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a2:	0150      	lsls	r0, r2, #5
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4641      	mov	r1, r8
 80018aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80018ae:	4649      	mov	r1, r9
 80018b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018c8:	ebb2 040a 	subs.w	r4, r2, sl
 80018cc:	eb63 050b 	sbc.w	r5, r3, fp
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	00eb      	lsls	r3, r5, #3
 80018da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018de:	00e2      	lsls	r2, r4, #3
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	4643      	mov	r3, r8
 80018e6:	18e3      	adds	r3, r4, r3
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	464b      	mov	r3, r9
 80018ec:	eb45 0303 	adc.w	r3, r5, r3
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018fe:	4629      	mov	r1, r5
 8001900:	028b      	lsls	r3, r1, #10
 8001902:	4621      	mov	r1, r4
 8001904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001908:	4621      	mov	r1, r4
 800190a:	028a      	lsls	r2, r1, #10
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001912:	2200      	movs	r2, #0
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	61fa      	str	r2, [r7, #28]
 8001918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800191c:	f7fe fc58 	bl	80001d0 <__aeabi_uldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4613      	mov	r3, r2
 8001926:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	3301      	adds	r3, #1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800193a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001942:	e002      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_RCC_GetSysClockFreq+0x204>)
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800194a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800194c:	4618      	mov	r0, r3
 800194e:	3750      	adds	r7, #80	; 0x50
 8001950:	46bd      	mov	sp, r7
 8001952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	00f42400 	.word	0x00f42400
 8001960:	007a1200 	.word	0x007a1200

08001964 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f103 0208 	add.w	r2, r3, #8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800197c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f103 0208 	add.w	r2, r3, #8
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f103 0208 	add.w	r2, r3, #8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019be:	b480      	push	{r7}
 80019c0:	b085      	sub	sp, #20
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	601a      	str	r2, [r3, #0]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a1c:	d103      	bne.n	8001a26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e00c      	b.n	8001a40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3308      	adds	r3, #8
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e002      	b.n	8001a34 <vListInsert+0x2e>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d2f6      	bcs.n	8001a2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	601a      	str	r2, [r3, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6892      	ldr	r2, [r2, #8]
 8001a8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6852      	ldr	r2, [r2, #4]
 8001a98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d103      	bne.n	8001aac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	1e5a      	subs	r2, r3, #1
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae4:	f383 8811 	msr	BASEPRI, r3
 8001ae8:	f3bf 8f6f 	isb	sy
 8001aec:	f3bf 8f4f 	dsb	sy
 8001af0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001af2:	bf00      	nop
 8001af4:	e7fe      	b.n	8001af4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001af6:	f001 fcdd 	bl	80034b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b02:	68f9      	ldr	r1, [r7, #12]
 8001b04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	441a      	add	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b26:	3b01      	subs	r3, #1
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	441a      	add	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	22ff      	movs	r2, #255	; 0xff
 8001b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	22ff      	movs	r2, #255	; 0xff
 8001b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d114      	bne.n	8001b76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01a      	beq.n	8001b8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	3310      	adds	r3, #16
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 ff9f 	bl	8002a9c <xTaskRemoveFromEventList>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d012      	beq.n	8001b8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <xQueueGenericReset+0xcc>)
 8001b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	f3bf 8f4f 	dsb	sy
 8001b70:	f3bf 8f6f 	isb	sy
 8001b74:	e009      	b.n	8001b8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3310      	adds	r3, #16
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fef2 	bl	8001964 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3324      	adds	r3, #36	; 0x24
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff feed 	bl	8001964 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001b8a:	f001 fcc3 	bl	8003514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	e000ed04 	.word	0xe000ed04

08001b9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10a      	bne.n	8001bc6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb4:	f383 8811 	msr	BASEPRI, r3
 8001bb8:	f3bf 8f6f 	isb	sy
 8001bbc:	f3bf 8f4f 	dsb	sy
 8001bc0:	613b      	str	r3, [r7, #16]
}
 8001bc2:	bf00      	nop
 8001bc4:	e7fe      	b.n	8001bc4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	fb02 f303 	mul.w	r3, r2, r3
 8001bce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	3348      	adds	r3, #72	; 0x48
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f001 fd4f 	bl	8003678 <pvPortMalloc>
 8001bda:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d011      	beq.n	8001c06 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3348      	adds	r3, #72	; 0x48
 8001bea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001bf4:	79fa      	ldrb	r2, [r7, #7]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 f805 	bl	8001c10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001c06:	69bb      	ldr	r3, [r7, #24]
	}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d103      	bne.n	8001c2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e002      	b.n	8001c32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c3e:	2101      	movs	r1, #1
 8001c40:	69b8      	ldr	r0, [r7, #24]
 8001c42:	f7ff ff43 	bl	8001acc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08e      	sub	sp, #56	; 0x38
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10a      	bne.n	8001c82 <xQueueGenericSend+0x32>
	__asm volatile
 8001c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c70:	f383 8811 	msr	BASEPRI, r3
 8001c74:	f3bf 8f6f 	isb	sy
 8001c78:	f3bf 8f4f 	dsb	sy
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001c7e:	bf00      	nop
 8001c80:	e7fe      	b.n	8001c80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d103      	bne.n	8001c90 <xQueueGenericSend+0x40>
 8001c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <xQueueGenericSend+0x44>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <xQueueGenericSend+0x46>
 8001c94:	2300      	movs	r3, #0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10a      	bne.n	8001cb0 <xQueueGenericSend+0x60>
	__asm volatile
 8001c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9e:	f383 8811 	msr	BASEPRI, r3
 8001ca2:	f3bf 8f6f 	isb	sy
 8001ca6:	f3bf 8f4f 	dsb	sy
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001cac:	bf00      	nop
 8001cae:	e7fe      	b.n	8001cae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d103      	bne.n	8001cbe <xQueueGenericSend+0x6e>
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <xQueueGenericSend+0x72>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <xQueueGenericSend+0x74>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10a      	bne.n	8001cde <xQueueGenericSend+0x8e>
	__asm volatile
 8001cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ccc:	f383 8811 	msr	BASEPRI, r3
 8001cd0:	f3bf 8f6f 	isb	sy
 8001cd4:	f3bf 8f4f 	dsb	sy
 8001cd8:	623b      	str	r3, [r7, #32]
}
 8001cda:	bf00      	nop
 8001cdc:	e7fe      	b.n	8001cdc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cde:	f001 f899 	bl	8002e14 <xTaskGetSchedulerState>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <xQueueGenericSend+0x9e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <xQueueGenericSend+0xa2>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <xQueueGenericSend+0xa4>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10a      	bne.n	8001d0e <xQueueGenericSend+0xbe>
	__asm volatile
 8001cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfc:	f383 8811 	msr	BASEPRI, r3
 8001d00:	f3bf 8f6f 	isb	sy
 8001d04:	f3bf 8f4f 	dsb	sy
 8001d08:	61fb      	str	r3, [r7, #28]
}
 8001d0a:	bf00      	nop
 8001d0c:	e7fe      	b.n	8001d0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001d0e:	f001 fbd1 	bl	80034b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d302      	bcc.n	8001d24 <xQueueGenericSend+0xd4>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d129      	bne.n	8001d78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d2a:	f000 f9b3 	bl	8002094 <prvCopyDataToQueue>
 8001d2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d010      	beq.n	8001d5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3a:	3324      	adds	r3, #36	; 0x24
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fead 	bl	8002a9c <xTaskRemoveFromEventList>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d013      	beq.n	8001d70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001d48:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <xQueueGenericSend+0x1f8>)
 8001d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	f3bf 8f4f 	dsb	sy
 8001d54:	f3bf 8f6f 	isb	sy
 8001d58:	e00a      	b.n	8001d70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001d60:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <xQueueGenericSend+0x1f8>)
 8001d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	f3bf 8f4f 	dsb	sy
 8001d6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001d70:	f001 fbd0 	bl	8003514 <vPortExitCritical>
				return pdPASS;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e063      	b.n	8001e40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d103      	bne.n	8001d86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001d7e:	f001 fbc9 	bl	8003514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e05c      	b.n	8001e40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d106      	bne.n	8001d9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 fee5 	bl	8002b60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d96:	2301      	movs	r3, #1
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001d9a:	f001 fbbb 	bl	8003514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d9e:	f000 fc8b 	bl	80026b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001da2:	f001 fb87 	bl	80034b4 <vPortEnterCritical>
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db2:	d103      	bne.n	8001dbc <xQueueGenericSend+0x16c>
 8001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dc8:	d103      	bne.n	8001dd2 <xQueueGenericSend+0x182>
 8001dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001dd2:	f001 fb9f 	bl	8003514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001dd6:	1d3a      	adds	r2, r7, #4
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fed4 	bl	8002b8c <xTaskCheckForTimeOut>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d124      	bne.n	8001e34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dec:	f000 fa24 	bl	8002238 <prvIsQueueFull>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d018      	beq.n	8001e28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	3310      	adds	r3, #16
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fe28 	bl	8002a54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e06:	f000 f9af 	bl	8002168 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001e0a:	f000 fc63 	bl	80026d4 <xTaskResumeAll>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f47f af7c 	bne.w	8001d0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <xQueueGenericSend+0x1f8>)
 8001e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f3bf 8f4f 	dsb	sy
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	e772      	b.n	8001d0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e2a:	f000 f99d 	bl	8002168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e2e:	f000 fc51 	bl	80026d4 <xTaskResumeAll>
 8001e32:	e76c      	b.n	8001d0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e36:	f000 f997 	bl	8002168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e3a:	f000 fc4b 	bl	80026d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001e3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3738      	adds	r7, #56	; 0x38
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	e000ed04 	.word	0xe000ed04

08001e4c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08e      	sub	sp, #56	; 0x38
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10a      	bne.n	8001e7e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8001e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6c:	f383 8811 	msr	BASEPRI, r3
 8001e70:	f3bf 8f6f 	isb	sy
 8001e74:	f3bf 8f4f 	dsb	sy
 8001e78:	623b      	str	r3, [r7, #32]
}
 8001e7a:	bf00      	nop
 8001e7c:	e7fe      	b.n	8001e7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00a      	beq.n	8001e9c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8001e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e8a:	f383 8811 	msr	BASEPRI, r3
 8001e8e:	f3bf 8f6f 	isb	sy
 8001e92:	f3bf 8f4f 	dsb	sy
 8001e96:	61fb      	str	r3, [r7, #28]
}
 8001e98:	bf00      	nop
 8001e9a:	e7fe      	b.n	8001e9a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e9c:	f000 ffba 	bl	8002e14 <xTaskGetSchedulerState>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <xQueueSemaphoreTake+0x60>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <xQueueSemaphoreTake+0x64>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <xQueueSemaphoreTake+0x66>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10a      	bne.n	8001ecc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8001eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eba:	f383 8811 	msr	BASEPRI, r3
 8001ebe:	f3bf 8f6f 	isb	sy
 8001ec2:	f3bf 8f4f 	dsb	sy
 8001ec6:	61bb      	str	r3, [r7, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	e7fe      	b.n	8001eca <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001ecc:	f001 faf2 	bl	80034b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d024      	beq.n	8001f26 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ede:	1e5a      	subs	r2, r3, #1
 8001ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d104      	bne.n	8001ef6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001eec:	f001 f93a 	bl	8003164 <pvTaskIncrementMutexHeldCount>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00f      	beq.n	8001f1e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f00:	3310      	adds	r3, #16
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fdca 	bl	8002a9c <xTaskRemoveFromEventList>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001f0e:	4b54      	ldr	r3, [pc, #336]	; (8002060 <xQueueSemaphoreTake+0x214>)
 8001f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	f3bf 8f4f 	dsb	sy
 8001f1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001f1e:	f001 faf9 	bl	8003514 <vPortExitCritical>
				return pdPASS;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e097      	b.n	8002056 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d111      	bne.n	8001f50 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8001f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f36:	f383 8811 	msr	BASEPRI, r3
 8001f3a:	f3bf 8f6f 	isb	sy
 8001f3e:	f3bf 8f4f 	dsb	sy
 8001f42:	617b      	str	r3, [r7, #20]
}
 8001f44:	bf00      	nop
 8001f46:	e7fe      	b.n	8001f46 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001f48:	f001 fae4 	bl	8003514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e082      	b.n	8002056 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fe00 	bl	8002b60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f60:	2301      	movs	r3, #1
 8001f62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f64:	f001 fad6 	bl	8003514 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f68:	f000 fba6 	bl	80026b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f6c:	f001 faa2 	bl	80034b4 <vPortEnterCritical>
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f76:	b25b      	sxtb	r3, r3
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f7c:	d103      	bne.n	8001f86 <xQueueSemaphoreTake+0x13a>
 8001f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f8c:	b25b      	sxtb	r3, r3
 8001f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f92:	d103      	bne.n	8001f9c <xQueueSemaphoreTake+0x150>
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f9c:	f001 faba 	bl	8003514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fa0:	463a      	mov	r2, r7
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fdef 	bl	8002b8c <xTaskCheckForTimeOut>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d132      	bne.n	800201a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fb6:	f000 f929 	bl	800220c <prvIsQueueEmpty>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d026      	beq.n	800200e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8001fc8:	f001 fa74 	bl	80034b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 ff3d 	bl	8002e50 <xTaskPriorityInherit>
 8001fd6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8001fd8:	f001 fa9c 	bl	8003514 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fde:	3324      	adds	r3, #36	; 0x24
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fd35 	bl	8002a54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001fea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fec:	f000 f8bc 	bl	8002168 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001ff0:	f000 fb70 	bl	80026d4 <xTaskResumeAll>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f47f af68 	bne.w	8001ecc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <xQueueSemaphoreTake+0x214>)
 8001ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	f3bf 8f4f 	dsb	sy
 8002008:	f3bf 8f6f 	isb	sy
 800200c:	e75e      	b.n	8001ecc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800200e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002010:	f000 f8aa 	bl	8002168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002014:	f000 fb5e 	bl	80026d4 <xTaskResumeAll>
 8002018:	e758      	b.n	8001ecc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800201a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800201c:	f000 f8a4 	bl	8002168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002020:	f000 fb58 	bl	80026d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002024:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002026:	f000 f8f1 	bl	800220c <prvIsQueueEmpty>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	f43f af4d 	beq.w	8001ecc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00d      	beq.n	8002054 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002038:	f001 fa3c 	bl	80034b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800203c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800203e:	f000 f811 	bl	8002064 <prvGetDisinheritPriorityAfterTimeout>
 8002042:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fffc 	bl	8003048 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002050:	f001 fa60 	bl	8003514 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002054:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002056:	4618      	mov	r0, r3
 8002058:	3738      	adds	r7, #56	; 0x38
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	e000ed04 	.word	0xe000ed04

08002064 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	e001      	b.n	8002086 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002086:	68fb      	ldr	r3, [r7, #12]
	}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10d      	bne.n	80020ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d14d      	bne.n	8002156 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 ff3c 	bl	8002f3c <xTaskPriorityDisinherit>
 80020c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	e043      	b.n	8002156 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d119      	bne.n	8002108 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6858      	ldr	r0, [r3, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	461a      	mov	r2, r3
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	f001 fbe0 	bl	80038a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	441a      	add	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d32b      	bcc.n	8002156 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	e026      	b.n	8002156 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	68d8      	ldr	r0, [r3, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	461a      	mov	r2, r3
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	f001 fbc6 	bl	80038a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	425b      	negs	r3, r3
 8002122:	441a      	add	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	425b      	negs	r3, r3
 800213e:	441a      	add	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d105      	bne.n	8002156 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	3b01      	subs	r3, #1
 8002154:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800215e:	697b      	ldr	r3, [r7, #20]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002170:	f001 f9a0 	bl	80034b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800217a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800217c:	e011      	b.n	80021a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	2b00      	cmp	r3, #0
 8002184:	d012      	beq.n	80021ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3324      	adds	r3, #36	; 0x24
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fc86 	bl	8002a9c <xTaskRemoveFromEventList>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002196:	f000 fd5b 	bl	8002c50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	3b01      	subs	r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	dce9      	bgt.n	800217e <prvUnlockQueue+0x16>
 80021aa:	e000      	b.n	80021ae <prvUnlockQueue+0x46>
					break;
 80021ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	22ff      	movs	r2, #255	; 0xff
 80021b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80021b6:	f001 f9ad 	bl	8003514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80021ba:	f001 f97b 	bl	80034b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021c6:	e011      	b.n	80021ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d012      	beq.n	80021f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3310      	adds	r3, #16
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fc61 	bl	8002a9c <xTaskRemoveFromEventList>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80021e0:	f000 fd36 	bl	8002c50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80021e4:	7bbb      	ldrb	r3, [r7, #14]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	dce9      	bgt.n	80021c8 <prvUnlockQueue+0x60>
 80021f4:	e000      	b.n	80021f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80021f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	22ff      	movs	r2, #255	; 0xff
 80021fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002200:	f001 f988 	bl	8003514 <vPortExitCritical>
}
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002214:	f001 f94e 	bl	80034b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002220:	2301      	movs	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e001      	b.n	800222a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800222a:	f001 f973 	bl	8003514 <vPortExitCritical>

	return xReturn;
 800222e:	68fb      	ldr	r3, [r7, #12]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002240:	f001 f938 	bl	80034b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	429a      	cmp	r2, r3
 800224e:	d102      	bne.n	8002256 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002250:	2301      	movs	r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	e001      	b.n	800225a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800225a:	f001 f95b 	bl	8003514 <vPortExitCritical>

	return xReturn;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08e      	sub	sp, #56	; 0x38
 800226c:	af04      	add	r7, sp, #16
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <xTaskCreateStatic+0x2a>
	__asm volatile
 800227c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002280:	f383 8811 	msr	BASEPRI, r3
 8002284:	f3bf 8f6f 	isb	sy
 8002288:	f3bf 8f4f 	dsb	sy
 800228c:	623b      	str	r3, [r7, #32]
}
 800228e:	bf00      	nop
 8002290:	e7fe      	b.n	8002290 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <xTaskCreateStatic+0x46>
	__asm volatile
 8002298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	61fb      	str	r3, [r7, #28]
}
 80022aa:	bf00      	nop
 80022ac:	e7fe      	b.n	80022ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80022ae:	2354      	movs	r3, #84	; 0x54
 80022b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b54      	cmp	r3, #84	; 0x54
 80022b6:	d00a      	beq.n	80022ce <xTaskCreateStatic+0x66>
	__asm volatile
 80022b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022bc:	f383 8811 	msr	BASEPRI, r3
 80022c0:	f3bf 8f6f 	isb	sy
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	61bb      	str	r3, [r7, #24]
}
 80022ca:	bf00      	nop
 80022cc:	e7fe      	b.n	80022cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80022ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80022d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d01e      	beq.n	8002314 <xTaskCreateStatic+0xac>
 80022d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01b      	beq.n	8002314 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	2202      	movs	r2, #2
 80022ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80022ee:	2300      	movs	r3, #0
 80022f0:	9303      	str	r3, [sp, #12]
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	9302      	str	r3, [sp, #8]
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f850 	bl	80023ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800230c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800230e:	f000 f8d5 	bl	80024bc <prvAddNewTaskToReadyList>
 8002312:	e001      	b.n	8002318 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002318:	697b      	ldr	r3, [r7, #20]
	}
 800231a:	4618      	mov	r0, r3
 800231c:	3728      	adds	r7, #40	; 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002322:	b580      	push	{r7, lr}
 8002324:	b08c      	sub	sp, #48	; 0x30
 8002326:	af04      	add	r7, sp, #16
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4618      	mov	r0, r3
 8002338:	f001 f99e 	bl	8003678 <pvPortMalloc>
 800233c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00e      	beq.n	8002362 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002344:	2054      	movs	r0, #84	; 0x54
 8002346:	f001 f997 	bl	8003678 <pvPortMalloc>
 800234a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
 8002358:	e005      	b.n	8002366 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800235a:	6978      	ldr	r0, [r7, #20]
 800235c:	f001 fa1a 	bl	8003794 <vPortFree>
 8002360:	e001      	b.n	8002366 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d017      	beq.n	800239c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002374:	88fa      	ldrh	r2, [r7, #6]
 8002376:	2300      	movs	r3, #0
 8002378:	9303      	str	r3, [sp, #12]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	9302      	str	r3, [sp, #8]
 800237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f80e 	bl	80023ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002390:	69f8      	ldr	r0, [r7, #28]
 8002392:	f000 f893 	bl	80024bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002396:	2301      	movs	r3, #1
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	e002      	b.n	80023a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800239c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80023a2:	69bb      	ldr	r3, [r7, #24]
	}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3720      	adds	r7, #32
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80023ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023c4:	3b01      	subs	r3, #1
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	f023 0307 	bic.w	r3, r3, #7
 80023d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80023de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e2:	f383 8811 	msr	BASEPRI, r3
 80023e6:	f3bf 8f6f 	isb	sy
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	617b      	str	r3, [r7, #20]
}
 80023f0:	bf00      	nop
 80023f2:	e7fe      	b.n	80023f2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d01f      	beq.n	800243a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	e012      	b.n	8002426 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	4413      	add	r3, r2
 8002406:	7819      	ldrb	r1, [r3, #0]
 8002408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	4413      	add	r3, r2
 800240e:	3334      	adds	r3, #52	; 0x34
 8002410:	460a      	mov	r2, r1
 8002412:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	4413      	add	r3, r2
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	3301      	adds	r3, #1
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	2b0f      	cmp	r3, #15
 800242a:	d9e9      	bls.n	8002400 <prvInitialiseNewTask+0x54>
 800242c:	e000      	b.n	8002430 <prvInitialiseNewTask+0x84>
			{
				break;
 800242e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002438:	e003      	b.n	8002442 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	2b06      	cmp	r3, #6
 8002446:	d901      	bls.n	800244c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002448:	2306      	movs	r3, #6
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002450:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002456:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245a:	2200      	movs	r2, #0
 800245c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	3304      	adds	r3, #4
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fa9e 	bl	80019a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246a:	3318      	adds	r3, #24
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fa99 	bl	80019a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002476:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247a:	f1c3 0207 	rsb	r2, r3, #7
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	2200      	movs	r2, #0
 800248c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	68f9      	ldr	r1, [r7, #12]
 800249a:	69b8      	ldr	r0, [r7, #24]
 800249c:	f000 fedc 	bl	8003258 <pxPortInitialiseStack>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024b2:	bf00      	nop
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80024c4:	f000 fff6 	bl	80034b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <prvAddNewTaskToReadyList+0xb8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3301      	adds	r3, #1
 80024ce:	4a29      	ldr	r2, [pc, #164]	; (8002574 <prvAddNewTaskToReadyList+0xb8>)
 80024d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80024d2:	4b29      	ldr	r3, [pc, #164]	; (8002578 <prvAddNewTaskToReadyList+0xbc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80024da:	4a27      	ldr	r2, [pc, #156]	; (8002578 <prvAddNewTaskToReadyList+0xbc>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <prvAddNewTaskToReadyList+0xb8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d110      	bne.n	800250a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80024e8:	f000 fbd6 	bl	8002c98 <prvInitialiseTaskLists>
 80024ec:	e00d      	b.n	800250a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <prvAddNewTaskToReadyList+0xc0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <prvAddNewTaskToReadyList+0xbc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	429a      	cmp	r2, r3
 8002502:	d802      	bhi.n	800250a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002504:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <prvAddNewTaskToReadyList+0xbc>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800250a:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <prvAddNewTaskToReadyList+0xc4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3301      	adds	r3, #1
 8002510:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <prvAddNewTaskToReadyList+0xc4>)
 8002512:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	2201      	movs	r2, #1
 800251a:	409a      	lsls	r2, r3
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <prvAddNewTaskToReadyList+0xc8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4313      	orrs	r3, r2
 8002522:	4a18      	ldr	r2, [pc, #96]	; (8002584 <prvAddNewTaskToReadyList+0xc8>)
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4a15      	ldr	r2, [pc, #84]	; (8002588 <prvAddNewTaskToReadyList+0xcc>)
 8002534:	441a      	add	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3304      	adds	r3, #4
 800253a:	4619      	mov	r1, r3
 800253c:	4610      	mov	r0, r2
 800253e:	f7ff fa3e 	bl	80019be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002542:	f000 ffe7 	bl	8003514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <prvAddNewTaskToReadyList+0xc0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00e      	beq.n	800256c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <prvAddNewTaskToReadyList+0xbc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	429a      	cmp	r2, r3
 800255a:	d207      	bcs.n	800256c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <prvAddNewTaskToReadyList+0xd0>)
 800255e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000390 	.word	0x20000390
 8002578:	20000290 	.word	0x20000290
 800257c:	2000039c 	.word	0x2000039c
 8002580:	200003ac 	.word	0x200003ac
 8002584:	20000398 	.word	0x20000398
 8002588:	20000294 	.word	0x20000294
 800258c:	e000ed04 	.word	0xe000ed04

08002590 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d017      	beq.n	80025d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <vTaskDelay+0x60>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <vTaskDelay+0x30>
	__asm volatile
 80025aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ae:	f383 8811 	msr	BASEPRI, r3
 80025b2:	f3bf 8f6f 	isb	sy
 80025b6:	f3bf 8f4f 	dsb	sy
 80025ba:	60bb      	str	r3, [r7, #8]
}
 80025bc:	bf00      	nop
 80025be:	e7fe      	b.n	80025be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80025c0:	f000 f87a 	bl	80026b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80025c4:	2100      	movs	r1, #0
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fde0 	bl	800318c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80025cc:	f000 f882 	bl	80026d4 <xTaskResumeAll>
 80025d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d107      	bne.n	80025e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <vTaskDelay+0x64>)
 80025da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200003b8 	.word	0x200003b8
 80025f4:	e000ed04 	.word	0xe000ed04

080025f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002606:	463a      	mov	r2, r7
 8002608:	1d39      	adds	r1, r7, #4
 800260a:	f107 0308 	add.w	r3, r7, #8
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd ff60 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002614:	6839      	ldr	r1, [r7, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	9202      	str	r2, [sp, #8]
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	2300      	movs	r3, #0
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	2300      	movs	r3, #0
 8002624:	460a      	mov	r2, r1
 8002626:	491e      	ldr	r1, [pc, #120]	; (80026a0 <vTaskStartScheduler+0xa8>)
 8002628:	481e      	ldr	r0, [pc, #120]	; (80026a4 <vTaskStartScheduler+0xac>)
 800262a:	f7ff fe1d 	bl	8002268 <xTaskCreateStatic>
 800262e:	4603      	mov	r3, r0
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <vTaskStartScheduler+0xb0>)
 8002632:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002634:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <vTaskStartScheduler+0xb0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800263c:	2301      	movs	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	e001      	b.n	8002646 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d116      	bne.n	800267a <vTaskStartScheduler+0x82>
	__asm volatile
 800264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	613b      	str	r3, [r7, #16]
}
 800265e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <vTaskStartScheduler+0xb4>)
 8002662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002666:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <vTaskStartScheduler+0xb8>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <vTaskStartScheduler+0xbc>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002674:	f000 fe7c 	bl	8003370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002678:	e00e      	b.n	8002698 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002680:	d10a      	bne.n	8002698 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	60fb      	str	r3, [r7, #12]
}
 8002694:	bf00      	nop
 8002696:	e7fe      	b.n	8002696 <vTaskStartScheduler+0x9e>
}
 8002698:	bf00      	nop
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	080038e8 	.word	0x080038e8
 80026a4:	08002c69 	.word	0x08002c69
 80026a8:	200003b4 	.word	0x200003b4
 80026ac:	200003b0 	.word	0x200003b0
 80026b0:	2000039c 	.word	0x2000039c
 80026b4:	20000394 	.word	0x20000394

080026b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <vTaskSuspendAll+0x18>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	4a03      	ldr	r2, [pc, #12]	; (80026d0 <vTaskSuspendAll+0x18>)
 80026c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	200003b8 	.word	0x200003b8

080026d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80026e2:	4b41      	ldr	r3, [pc, #260]	; (80027e8 <xTaskResumeAll+0x114>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <xTaskResumeAll+0x2c>
	__asm volatile
 80026ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	603b      	str	r3, [r7, #0]
}
 80026fc:	bf00      	nop
 80026fe:	e7fe      	b.n	80026fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002700:	f000 fed8 	bl	80034b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002704:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <xTaskResumeAll+0x114>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3b01      	subs	r3, #1
 800270a:	4a37      	ldr	r2, [pc, #220]	; (80027e8 <xTaskResumeAll+0x114>)
 800270c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800270e:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <xTaskResumeAll+0x114>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d161      	bne.n	80027da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002716:	4b35      	ldr	r3, [pc, #212]	; (80027ec <xTaskResumeAll+0x118>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d05d      	beq.n	80027da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800271e:	e02e      	b.n	800277e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002720:	4b33      	ldr	r3, [pc, #204]	; (80027f0 <xTaskResumeAll+0x11c>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3318      	adds	r3, #24
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff f9a3 	bl	8001a78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3304      	adds	r3, #4
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff f99e 	bl	8001a78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	2201      	movs	r2, #1
 8002742:	409a      	lsls	r2, r3
 8002744:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <xTaskResumeAll+0x120>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4313      	orrs	r3, r2
 800274a:	4a2a      	ldr	r2, [pc, #168]	; (80027f4 <xTaskResumeAll+0x120>)
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4a27      	ldr	r2, [pc, #156]	; (80027f8 <xTaskResumeAll+0x124>)
 800275c:	441a      	add	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3304      	adds	r3, #4
 8002762:	4619      	mov	r1, r3
 8002764:	4610      	mov	r0, r2
 8002766:	f7ff f92a 	bl	80019be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276e:	4b23      	ldr	r3, [pc, #140]	; (80027fc <xTaskResumeAll+0x128>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	429a      	cmp	r2, r3
 8002776:	d302      	bcc.n	800277e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002778:	4b21      	ldr	r3, [pc, #132]	; (8002800 <xTaskResumeAll+0x12c>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <xTaskResumeAll+0x11c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1cc      	bne.n	8002720 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800278c:	f000 fb22 	bl	8002dd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002790:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <xTaskResumeAll+0x130>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d010      	beq.n	80027be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800279c:	f000 f846 	bl	800282c <xTaskIncrementTick>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <xTaskResumeAll+0x12c>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f1      	bne.n	800279c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <xTaskResumeAll+0x130>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <xTaskResumeAll+0x12c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80027c6:	2301      	movs	r3, #1
 80027c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <xTaskResumeAll+0x134>)
 80027cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80027da:	f000 fe9b 	bl	8003514 <vPortExitCritical>

	return xAlreadyYielded;
 80027de:	68bb      	ldr	r3, [r7, #8]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200003b8 	.word	0x200003b8
 80027ec:	20000390 	.word	0x20000390
 80027f0:	20000350 	.word	0x20000350
 80027f4:	20000398 	.word	0x20000398
 80027f8:	20000294 	.word	0x20000294
 80027fc:	20000290 	.word	0x20000290
 8002800:	200003a4 	.word	0x200003a4
 8002804:	200003a0 	.word	0x200003a0
 8002808:	e000ed04 	.word	0xe000ed04

0800280c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <xTaskGetTickCount+0x1c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002818:	687b      	ldr	r3, [r7, #4]
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000394 	.word	0x20000394

0800282c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002836:	4b4e      	ldr	r3, [pc, #312]	; (8002970 <xTaskIncrementTick+0x144>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 808e 	bne.w	800295c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002840:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <xTaskIncrementTick+0x148>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002848:	4a4a      	ldr	r2, [pc, #296]	; (8002974 <xTaskIncrementTick+0x148>)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d120      	bne.n	8002896 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002854:	4b48      	ldr	r3, [pc, #288]	; (8002978 <xTaskIncrementTick+0x14c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <xTaskIncrementTick+0x48>
	__asm volatile
 800285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	603b      	str	r3, [r7, #0]
}
 8002870:	bf00      	nop
 8002872:	e7fe      	b.n	8002872 <xTaskIncrementTick+0x46>
 8002874:	4b40      	ldr	r3, [pc, #256]	; (8002978 <xTaskIncrementTick+0x14c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b40      	ldr	r3, [pc, #256]	; (800297c <xTaskIncrementTick+0x150>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a3e      	ldr	r2, [pc, #248]	; (8002978 <xTaskIncrementTick+0x14c>)
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4a3e      	ldr	r2, [pc, #248]	; (800297c <xTaskIncrementTick+0x150>)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b3d      	ldr	r3, [pc, #244]	; (8002980 <xTaskIncrementTick+0x154>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	4a3c      	ldr	r2, [pc, #240]	; (8002980 <xTaskIncrementTick+0x154>)
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	f000 fa9f 	bl	8002dd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <xTaskIncrementTick+0x158>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	429a      	cmp	r2, r3
 800289e:	d348      	bcc.n	8002932 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028a0:	4b35      	ldr	r3, [pc, #212]	; (8002978 <xTaskIncrementTick+0x14c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028aa:	4b36      	ldr	r3, [pc, #216]	; (8002984 <xTaskIncrementTick+0x158>)
 80028ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028b0:	601a      	str	r2, [r3, #0]
					break;
 80028b2:	e03e      	b.n	8002932 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028b4:	4b30      	ldr	r3, [pc, #192]	; (8002978 <xTaskIncrementTick+0x14c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d203      	bcs.n	80028d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80028cc:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <xTaskIncrementTick+0x158>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80028d2:	e02e      	b.n	8002932 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	3304      	adds	r3, #4
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff f8cd 	bl	8001a78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d004      	beq.n	80028f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	3318      	adds	r3, #24
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff f8c4 	bl	8001a78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	2201      	movs	r2, #1
 80028f6:	409a      	lsls	r2, r3
 80028f8:	4b23      	ldr	r3, [pc, #140]	; (8002988 <xTaskIncrementTick+0x15c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	4a22      	ldr	r2, [pc, #136]	; (8002988 <xTaskIncrementTick+0x15c>)
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4a1f      	ldr	r2, [pc, #124]	; (800298c <xTaskIncrementTick+0x160>)
 8002910:	441a      	add	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3304      	adds	r3, #4
 8002916:	4619      	mov	r1, r3
 8002918:	4610      	mov	r0, r2
 800291a:	f7ff f850 	bl	80019be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <xTaskIncrementTick+0x164>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	429a      	cmp	r2, r3
 800292a:	d3b9      	bcc.n	80028a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800292c:	2301      	movs	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002930:	e7b6      	b.n	80028a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <xTaskIncrementTick+0x164>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002938:	4914      	ldr	r1, [pc, #80]	; (800298c <xTaskIncrementTick+0x160>)
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d901      	bls.n	800294e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800294a:	2301      	movs	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <xTaskIncrementTick+0x168>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002956:	2301      	movs	r3, #1
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	e004      	b.n	8002966 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800295c:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <xTaskIncrementTick+0x16c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <xTaskIncrementTick+0x16c>)
 8002964:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002966:	697b      	ldr	r3, [r7, #20]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	200003b8 	.word	0x200003b8
 8002974:	20000394 	.word	0x20000394
 8002978:	20000348 	.word	0x20000348
 800297c:	2000034c 	.word	0x2000034c
 8002980:	200003a8 	.word	0x200003a8
 8002984:	200003b0 	.word	0x200003b0
 8002988:	20000398 	.word	0x20000398
 800298c:	20000294 	.word	0x20000294
 8002990:	20000290 	.word	0x20000290
 8002994:	200003a4 	.word	0x200003a4
 8002998:	200003a0 	.word	0x200003a0

0800299c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029a2:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <vTaskSwitchContext+0xa4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <vTaskSwitchContext+0xa8>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80029b0:	e03f      	b.n	8002a32 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <vTaskSwitchContext+0xa8>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029b8:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <vTaskSwitchContext+0xac>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80029c6:	7afb      	ldrb	r3, [r7, #11]
 80029c8:	f1c3 031f 	rsb	r3, r3, #31
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	491f      	ldr	r1, [pc, #124]	; (8002a4c <vTaskSwitchContext+0xb0>)
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80029e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e6:	f383 8811 	msr	BASEPRI, r3
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	607b      	str	r3, [r7, #4]
}
 80029f4:	bf00      	nop
 80029f6:	e7fe      	b.n	80029f6 <vTaskSwitchContext+0x5a>
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <vTaskSwitchContext+0xb0>)
 8002a04:	4413      	add	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	3308      	adds	r3, #8
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d104      	bne.n	8002a28 <vTaskSwitchContext+0x8c>
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	4a08      	ldr	r2, [pc, #32]	; (8002a50 <vTaskSwitchContext+0xb4>)
 8002a30:	6013      	str	r3, [r2, #0]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	200003b8 	.word	0x200003b8
 8002a44:	200003a4 	.word	0x200003a4
 8002a48:	20000398 	.word	0x20000398
 8002a4c:	20000294 	.word	0x20000294
 8002a50:	20000290 	.word	0x20000290

08002a54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	60fb      	str	r3, [r7, #12]
}
 8002a76:	bf00      	nop
 8002a78:	e7fe      	b.n	8002a78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <vTaskPlaceOnEventList+0x44>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3318      	adds	r3, #24
 8002a80:	4619      	mov	r1, r3
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe ffbf 	bl	8001a06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a88:	2101      	movs	r1, #1
 8002a8a:	6838      	ldr	r0, [r7, #0]
 8002a8c:	f000 fb7e 	bl	800318c <prvAddCurrentTaskToDelayedList>
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000290 	.word	0x20000290

08002a9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	60fb      	str	r3, [r7, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	e7fe      	b.n	8002ac6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	3318      	adds	r3, #24
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fe ffd3 	bl	8001a78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <xTaskRemoveFromEventList+0xac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d11c      	bne.n	8002b14 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	3304      	adds	r3, #4
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe ffca 	bl	8001a78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	2201      	movs	r2, #1
 8002aea:	409a      	lsls	r2, r3
 8002aec:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <xTaskRemoveFromEventList+0xb0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <xTaskRemoveFromEventList+0xb0>)
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <xTaskRemoveFromEventList+0xb4>)
 8002b04:	441a      	add	r2, r3
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f7fe ff56 	bl	80019be <vListInsertEnd>
 8002b12:	e005      	b.n	8002b20 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	3318      	adds	r3, #24
 8002b18:	4619      	mov	r1, r3
 8002b1a:	480e      	ldr	r0, [pc, #56]	; (8002b54 <xTaskRemoveFromEventList+0xb8>)
 8002b1c:	f7fe ff4f 	bl	80019be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <xTaskRemoveFromEventList+0xbc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d905      	bls.n	8002b3a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <xTaskRemoveFromEventList+0xc0>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	e001      	b.n	8002b3e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002b3e:	697b      	ldr	r3, [r7, #20]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	200003b8 	.word	0x200003b8
 8002b4c:	20000398 	.word	0x20000398
 8002b50:	20000294 	.word	0x20000294
 8002b54:	20000350 	.word	0x20000350
 8002b58:	20000290 	.word	0x20000290
 8002b5c:	200003a4 	.word	0x200003a4

08002b60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <vTaskInternalSetTimeOutState+0x24>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <vTaskInternalSetTimeOutState+0x28>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	605a      	str	r2, [r3, #4]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	200003a8 	.word	0x200003a8
 8002b88:	20000394 	.word	0x20000394

08002b8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	613b      	str	r3, [r7, #16]
}
 8002bae:	bf00      	nop
 8002bb0:	e7fe      	b.n	8002bb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	60fb      	str	r3, [r7, #12]
}
 8002bca:	bf00      	nop
 8002bcc:	e7fe      	b.n	8002bcc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002bce:	f000 fc71 	bl	80034b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <xTaskCheckForTimeOut+0xbc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bea:	d102      	bne.n	8002bf2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	e023      	b.n	8002c3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <xTaskCheckForTimeOut+0xc0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d007      	beq.n	8002c0e <xTaskCheckForTimeOut+0x82>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d302      	bcc.n	8002c0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	61fb      	str	r3, [r7, #28]
 8002c0c:	e015      	b.n	8002c3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d20b      	bcs.n	8002c30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	1ad2      	subs	r2, r2, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff9b 	bl	8002b60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	e004      	b.n	8002c3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002c3a:	f000 fc6b 	bl	8003514 <vPortExitCritical>

	return xReturn;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3720      	adds	r7, #32
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000394 	.word	0x20000394
 8002c4c:	200003a8 	.word	0x200003a8

08002c50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002c54:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <vTaskMissedYield+0x14>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	200003a4 	.word	0x200003a4

08002c68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c70:	f000 f852 	bl	8002d18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <prvIdleTask+0x28>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d9f9      	bls.n	8002c70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <prvIdleTask+0x2c>)
 8002c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c8c:	e7f0      	b.n	8002c70 <prvIdleTask+0x8>
 8002c8e:	bf00      	nop
 8002c90:	20000294 	.word	0x20000294
 8002c94:	e000ed04 	.word	0xe000ed04

08002c98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]
 8002ca2:	e00c      	b.n	8002cbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <prvInitialiseTaskLists+0x60>)
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe fe56 	bl	8001964 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	d9ef      	bls.n	8002ca4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002cc4:	480d      	ldr	r0, [pc, #52]	; (8002cfc <prvInitialiseTaskLists+0x64>)
 8002cc6:	f7fe fe4d 	bl	8001964 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002cca:	480d      	ldr	r0, [pc, #52]	; (8002d00 <prvInitialiseTaskLists+0x68>)
 8002ccc:	f7fe fe4a 	bl	8001964 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002cd0:	480c      	ldr	r0, [pc, #48]	; (8002d04 <prvInitialiseTaskLists+0x6c>)
 8002cd2:	f7fe fe47 	bl	8001964 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002cd6:	480c      	ldr	r0, [pc, #48]	; (8002d08 <prvInitialiseTaskLists+0x70>)
 8002cd8:	f7fe fe44 	bl	8001964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002cdc:	480b      	ldr	r0, [pc, #44]	; (8002d0c <prvInitialiseTaskLists+0x74>)
 8002cde:	f7fe fe41 	bl	8001964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <prvInitialiseTaskLists+0x78>)
 8002ce4:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <prvInitialiseTaskLists+0x64>)
 8002ce6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <prvInitialiseTaskLists+0x7c>)
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <prvInitialiseTaskLists+0x68>)
 8002cec:	601a      	str	r2, [r3, #0]
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000294 	.word	0x20000294
 8002cfc:	20000320 	.word	0x20000320
 8002d00:	20000334 	.word	0x20000334
 8002d04:	20000350 	.word	0x20000350
 8002d08:	20000364 	.word	0x20000364
 8002d0c:	2000037c 	.word	0x2000037c
 8002d10:	20000348 	.word	0x20000348
 8002d14:	2000034c 	.word	0x2000034c

08002d18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d1e:	e019      	b.n	8002d54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002d20:	f000 fbc8 	bl	80034b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <prvCheckTasksWaitingTermination+0x50>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe fea1 	bl	8001a78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <prvCheckTasksWaitingTermination+0x54>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <prvCheckTasksWaitingTermination+0x54>)
 8002d3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <prvCheckTasksWaitingTermination+0x58>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <prvCheckTasksWaitingTermination+0x58>)
 8002d48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002d4a:	f000 fbe3 	bl	8003514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f810 	bl	8002d74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <prvCheckTasksWaitingTermination+0x58>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e1      	bne.n	8002d20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000364 	.word	0x20000364
 8002d6c:	20000390 	.word	0x20000390
 8002d70:	20000378 	.word	0x20000378

08002d74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d108      	bne.n	8002d98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fd02 	bl	8003794 <vPortFree>
				vPortFree( pxTCB );
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fcff 	bl	8003794 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d96:	e018      	b.n	8002dca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d103      	bne.n	8002daa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fcf6 	bl	8003794 <vPortFree>
	}
 8002da8:	e00f      	b.n	8002dca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d00a      	beq.n	8002dca <prvDeleteTCB+0x56>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	60fb      	str	r3, [r7, #12]
}
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <prvDeleteTCB+0x54>
	}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <prvResetNextTaskUnblockTime+0x38>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d104      	bne.n	8002dee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <prvResetNextTaskUnblockTime+0x3c>)
 8002de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002dec:	e008      	b.n	8002e00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <prvResetNextTaskUnblockTime+0x38>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <prvResetNextTaskUnblockTime+0x3c>)
 8002dfe:	6013      	str	r3, [r2, #0]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	20000348 	.word	0x20000348
 8002e10:	200003b0 	.word	0x200003b0

08002e14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <xTaskGetSchedulerState+0x34>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002e22:	2301      	movs	r3, #1
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	e008      	b.n	8002e3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e28:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <xTaskGetSchedulerState+0x38>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002e30:	2302      	movs	r3, #2
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	e001      	b.n	8002e3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002e3a:	687b      	ldr	r3, [r7, #4]
	}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	2000039c 	.word	0x2000039c
 8002e4c:	200003b8 	.word	0x200003b8

08002e50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d05e      	beq.n	8002f24 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6a:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <xTaskPriorityInherit+0xe0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d24e      	bcs.n	8002f12 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	db06      	blt.n	8002e8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e7c:	4b2c      	ldr	r3, [pc, #176]	; (8002f30 <xTaskPriorityInherit+0xe0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	f1c3 0207 	rsb	r2, r3, #7
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6959      	ldr	r1, [r3, #20]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4a26      	ldr	r2, [pc, #152]	; (8002f34 <xTaskPriorityInherit+0xe4>)
 8002e9c:	4413      	add	r3, r2
 8002e9e:	4299      	cmp	r1, r3
 8002ea0:	d12f      	bne.n	8002f02 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe fde6 	bl	8001a78 <uxListRemove>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <xTaskPriorityInherit+0xe8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	4a1c      	ldr	r2, [pc, #112]	; (8002f38 <xTaskPriorityInherit+0xe8>)
 8002ec6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002ec8:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <xTaskPriorityInherit+0xe0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <xTaskPriorityInherit+0xe8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	4a15      	ldr	r2, [pc, #84]	; (8002f38 <xTaskPriorityInherit+0xe8>)
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4a10      	ldr	r2, [pc, #64]	; (8002f34 <xTaskPriorityInherit+0xe4>)
 8002ef2:	441a      	add	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f7fe fd5f 	bl	80019be <vListInsertEnd>
 8002f00:	e004      	b.n	8002f0c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <xTaskPriorityInherit+0xe0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	e008      	b.n	8002f24 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <xTaskPriorityInherit+0xe0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d201      	bcs.n	8002f24 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002f20:	2301      	movs	r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002f24:	68fb      	ldr	r3, [r7, #12]
	}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000290 	.word	0x20000290
 8002f34:	20000294 	.word	0x20000294
 8002f38:	20000398 	.word	0x20000398

08002f3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d06e      	beq.n	8003030 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002f52:	4b3a      	ldr	r3, [pc, #232]	; (800303c <xTaskPriorityDisinherit+0x100>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d00a      	beq.n	8002f72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	60fb      	str	r3, [r7, #12]
}
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	60bb      	str	r3, [r7, #8]
}
 8002f8c:	bf00      	nop
 8002f8e:	e7fe      	b.n	8002f8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f94:	1e5a      	subs	r2, r3, #1
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d044      	beq.n	8003030 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d140      	bne.n	8003030 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fd60 	bl	8001a78 <uxListRemove>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d115      	bne.n	8002fea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc2:	491f      	ldr	r1, [pc, #124]	; (8003040 <xTaskPriorityDisinherit+0x104>)
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <xTaskPriorityDisinherit+0xae>
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	2201      	movs	r2, #1
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	4b18      	ldr	r3, [pc, #96]	; (8003044 <xTaskPriorityDisinherit+0x108>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	4a17      	ldr	r2, [pc, #92]	; (8003044 <xTaskPriorityDisinherit+0x108>)
 8002fe8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	f1c3 0207 	rsb	r2, r3, #7
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	2201      	movs	r2, #1
 8003004:	409a      	lsls	r2, r3
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <xTaskPriorityDisinherit+0x108>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <xTaskPriorityDisinherit+0x108>)
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4a08      	ldr	r2, [pc, #32]	; (8003040 <xTaskPriorityDisinherit+0x104>)
 800301e:	441a      	add	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	3304      	adds	r3, #4
 8003024:	4619      	mov	r1, r3
 8003026:	4610      	mov	r0, r2
 8003028:	f7fe fcc9 	bl	80019be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800302c:	2301      	movs	r3, #1
 800302e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003030:	697b      	ldr	r3, [r7, #20]
	}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000290 	.word	0x20000290
 8003040:	20000294 	.word	0x20000294
 8003044:	20000398 	.word	0x20000398

08003048 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003056:	2301      	movs	r3, #1
 8003058:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d077      	beq.n	8003150 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	60fb      	str	r3, [r7, #12]
}
 800307a:	bf00      	nop
 800307c:	e7fe      	b.n	800307c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d902      	bls.n	800308e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	61fb      	str	r3, [r7, #28]
 800308c:	e002      	b.n	8003094 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	429a      	cmp	r2, r3
 800309c:	d058      	beq.n	8003150 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d153      	bne.n	8003150 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80030a8:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d10a      	bne.n	80030c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	60bb      	str	r3, [r7, #8]
}
 80030c4:	bf00      	nop
 80030c6:	e7fe      	b.n	80030c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	db04      	blt.n	80030e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0207 	rsb	r2, r3, #7
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	6959      	ldr	r1, [r3, #20]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4a19      	ldr	r2, [pc, #100]	; (800315c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80030f6:	4413      	add	r3, r2
 80030f8:	4299      	cmp	r1, r3
 80030fa:	d129      	bne.n	8003150 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	3304      	adds	r3, #4
 8003100:	4618      	mov	r0, r3
 8003102:	f7fe fcb9 	bl	8001a78 <uxListRemove>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	2201      	movs	r2, #1
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4013      	ands	r3, r2
 800311e:	4a10      	ldr	r2, [pc, #64]	; (8003160 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003120:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	2201      	movs	r2, #1
 8003128:	409a      	lsls	r2, r3
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4313      	orrs	r3, r2
 8003130:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4a06      	ldr	r2, [pc, #24]	; (800315c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003142:	441a      	add	r2, r3
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	3304      	adds	r3, #4
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f7fe fc37 	bl	80019be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003150:	bf00      	nop
 8003152:	3720      	adds	r7, #32
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000290 	.word	0x20000290
 800315c:	20000294 	.word	0x20000294
 8003160:	20000398 	.word	0x20000398

08003164 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003168:	4b07      	ldr	r3, [pc, #28]	; (8003188 <pvTaskIncrementMutexHeldCount+0x24>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d004      	beq.n	800317a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <pvTaskIncrementMutexHeldCount+0x24>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003176:	3201      	adds	r2, #1
 8003178:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800317a:	4b03      	ldr	r3, [pc, #12]	; (8003188 <pvTaskIncrementMutexHeldCount+0x24>)
 800317c:	681b      	ldr	r3, [r3, #0]
	}
 800317e:	4618      	mov	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	20000290 	.word	0x20000290

0800318c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003196:	4b29      	ldr	r3, [pc, #164]	; (800323c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800319c:	4b28      	ldr	r3, [pc, #160]	; (8003240 <prvAddCurrentTaskToDelayedList+0xb4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3304      	adds	r3, #4
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fc68 	bl	8001a78 <uxListRemove>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10b      	bne.n	80031c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80031ae:	4b24      	ldr	r3, [pc, #144]	; (8003240 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	2201      	movs	r2, #1
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43da      	mvns	r2, r3
 80031bc:	4b21      	ldr	r3, [pc, #132]	; (8003244 <prvAddCurrentTaskToDelayedList+0xb8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4013      	ands	r3, r2
 80031c2:	4a20      	ldr	r2, [pc, #128]	; (8003244 <prvAddCurrentTaskToDelayedList+0xb8>)
 80031c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031cc:	d10a      	bne.n	80031e4 <prvAddCurrentTaskToDelayedList+0x58>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031d4:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3304      	adds	r3, #4
 80031da:	4619      	mov	r1, r3
 80031dc:	481a      	ldr	r0, [pc, #104]	; (8003248 <prvAddCurrentTaskToDelayedList+0xbc>)
 80031de:	f7fe fbee 	bl	80019be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80031e2:	e026      	b.n	8003232 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d209      	bcs.n	8003210 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031fc:	4b13      	ldr	r3, [pc, #76]	; (800324c <prvAddCurrentTaskToDelayedList+0xc0>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3304      	adds	r3, #4
 8003206:	4619      	mov	r1, r3
 8003208:	4610      	mov	r0, r2
 800320a:	f7fe fbfc 	bl	8001a06 <vListInsert>
}
 800320e:	e010      	b.n	8003232 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003210:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3304      	adds	r3, #4
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f7fe fbf2 	bl	8001a06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	429a      	cmp	r2, r3
 800322a:	d202      	bcs.n	8003232 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800322c:	4a09      	ldr	r2, [pc, #36]	; (8003254 <prvAddCurrentTaskToDelayedList+0xc8>)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	6013      	str	r3, [r2, #0]
}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000394 	.word	0x20000394
 8003240:	20000290 	.word	0x20000290
 8003244:	20000398 	.word	0x20000398
 8003248:	2000037c 	.word	0x2000037c
 800324c:	2000034c 	.word	0x2000034c
 8003250:	20000348 	.word	0x20000348
 8003254:	200003b0 	.word	0x200003b0

08003258 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3b04      	subs	r3, #4
 8003268:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3b04      	subs	r3, #4
 8003276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f023 0201 	bic.w	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3b04      	subs	r3, #4
 8003286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003288:	4a0c      	ldr	r2, [pc, #48]	; (80032bc <pxPortInitialiseStack+0x64>)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	3b14      	subs	r3, #20
 8003292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3b04      	subs	r3, #4
 800329e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f06f 0202 	mvn.w	r2, #2
 80032a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3b20      	subs	r3, #32
 80032ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80032ae:	68fb      	ldr	r3, [r7, #12]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	080032c1 	.word	0x080032c1

080032c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <prvTaskExitError+0x54>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032d2:	d00a      	beq.n	80032ea <prvTaskExitError+0x2a>
	__asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	60fb      	str	r3, [r7, #12]
}
 80032e6:	bf00      	nop
 80032e8:	e7fe      	b.n	80032e8 <prvTaskExitError+0x28>
	__asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	60bb      	str	r3, [r7, #8]
}
 80032fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80032fe:	bf00      	nop
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0fc      	beq.n	8003300 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	2000000c 	.word	0x2000000c
	...

08003320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <pxCurrentTCBConst2>)
 8003322:	6819      	ldr	r1, [r3, #0]
 8003324:	6808      	ldr	r0, [r1, #0]
 8003326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800332a:	f380 8809 	msr	PSP, r0
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f04f 0000 	mov.w	r0, #0
 8003336:	f380 8811 	msr	BASEPRI, r0
 800333a:	4770      	bx	lr
 800333c:	f3af 8000 	nop.w

08003340 <pxCurrentTCBConst2>:
 8003340:	20000290 	.word	0x20000290
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop

08003348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003348:	4808      	ldr	r0, [pc, #32]	; (800336c <prvPortStartFirstTask+0x24>)
 800334a:	6800      	ldr	r0, [r0, #0]
 800334c:	6800      	ldr	r0, [r0, #0]
 800334e:	f380 8808 	msr	MSP, r0
 8003352:	f04f 0000 	mov.w	r0, #0
 8003356:	f380 8814 	msr	CONTROL, r0
 800335a:	b662      	cpsie	i
 800335c:	b661      	cpsie	f
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	df00      	svc	0
 8003368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800336a:	bf00      	nop
 800336c:	e000ed08 	.word	0xe000ed08

08003370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003376:	4b46      	ldr	r3, [pc, #280]	; (8003490 <xPortStartScheduler+0x120>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a46      	ldr	r2, [pc, #280]	; (8003494 <xPortStartScheduler+0x124>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d10a      	bne.n	8003396 <xPortStartScheduler+0x26>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	613b      	str	r3, [r7, #16]
}
 8003392:	bf00      	nop
 8003394:	e7fe      	b.n	8003394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003396:	4b3e      	ldr	r3, [pc, #248]	; (8003490 <xPortStartScheduler+0x120>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a3f      	ldr	r2, [pc, #252]	; (8003498 <xPortStartScheduler+0x128>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d10a      	bne.n	80033b6 <xPortStartScheduler+0x46>
	__asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	60fb      	str	r3, [r7, #12]
}
 80033b2:	bf00      	nop
 80033b4:	e7fe      	b.n	80033b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033b6:	4b39      	ldr	r3, [pc, #228]	; (800349c <xPortStartScheduler+0x12c>)
 80033b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	22ff      	movs	r2, #255	; 0xff
 80033c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <xPortStartScheduler+0x130>)
 80033dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80033de:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <xPortStartScheduler+0x134>)
 80033e0:	2207      	movs	r2, #7
 80033e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033e4:	e009      	b.n	80033fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80033e6:	4b2f      	ldr	r3, [pc, #188]	; (80034a4 <xPortStartScheduler+0x134>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	4a2d      	ldr	r2, [pc, #180]	; (80034a4 <xPortStartScheduler+0x134>)
 80033ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033fa:	78fb      	ldrb	r3, [r7, #3]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	2b80      	cmp	r3, #128	; 0x80
 8003404:	d0ef      	beq.n	80033e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003406:	4b27      	ldr	r3, [pc, #156]	; (80034a4 <xPortStartScheduler+0x134>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f1c3 0307 	rsb	r3, r3, #7
 800340e:	2b04      	cmp	r3, #4
 8003410:	d00a      	beq.n	8003428 <xPortStartScheduler+0xb8>
	__asm volatile
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	60bb      	str	r3, [r7, #8]
}
 8003424:	bf00      	nop
 8003426:	e7fe      	b.n	8003426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003428:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <xPortStartScheduler+0x134>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <xPortStartScheduler+0x134>)
 8003430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003432:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <xPortStartScheduler+0x134>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800343a:	4a1a      	ldr	r2, [pc, #104]	; (80034a4 <xPortStartScheduler+0x134>)
 800343c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003446:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <xPortStartScheduler+0x138>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a17      	ldr	r2, [pc, #92]	; (80034a8 <xPortStartScheduler+0x138>)
 800344c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <xPortStartScheduler+0x138>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <xPortStartScheduler+0x138>)
 8003458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800345c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800345e:	f000 f8dd 	bl	800361c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <xPortStartScheduler+0x13c>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003468:	f000 f8fc 	bl	8003664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800346c:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <xPortStartScheduler+0x140>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0f      	ldr	r2, [pc, #60]	; (80034b0 <xPortStartScheduler+0x140>)
 8003472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003478:	f7ff ff66 	bl	8003348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800347c:	f7ff fa8e 	bl	800299c <vTaskSwitchContext>
	prvTaskExitError();
 8003480:	f7ff ff1e 	bl	80032c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	e000ed00 	.word	0xe000ed00
 8003494:	410fc271 	.word	0x410fc271
 8003498:	410fc270 	.word	0x410fc270
 800349c:	e000e400 	.word	0xe000e400
 80034a0:	200003bc 	.word	0x200003bc
 80034a4:	200003c0 	.word	0x200003c0
 80034a8:	e000ed20 	.word	0xe000ed20
 80034ac:	2000000c 	.word	0x2000000c
 80034b0:	e000ef34 	.word	0xe000ef34

080034b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	607b      	str	r3, [r7, #4]
}
 80034cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80034ce:	4b0f      	ldr	r3, [pc, #60]	; (800350c <vPortEnterCritical+0x58>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	4a0d      	ldr	r2, [pc, #52]	; (800350c <vPortEnterCritical+0x58>)
 80034d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <vPortEnterCritical+0x58>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d10f      	bne.n	8003500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <vPortEnterCritical+0x5c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <vPortEnterCritical+0x4c>
	__asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	603b      	str	r3, [r7, #0]
}
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <vPortEnterCritical+0x4a>
	}
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	2000000c 	.word	0x2000000c
 8003510:	e000ed04 	.word	0xe000ed04

08003514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <vPortExitCritical+0x50>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10a      	bne.n	8003538 <vPortExitCritical+0x24>
	__asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	607b      	str	r3, [r7, #4]
}
 8003534:	bf00      	nop
 8003536:	e7fe      	b.n	8003536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <vPortExitCritical+0x50>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3b01      	subs	r3, #1
 800353e:	4a09      	ldr	r2, [pc, #36]	; (8003564 <vPortExitCritical+0x50>)
 8003540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <vPortExitCritical+0x50>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <vPortExitCritical+0x42>
 800354a:	2300      	movs	r3, #0
 800354c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	2000000c 	.word	0x2000000c
	...

08003570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003570:	f3ef 8009 	mrs	r0, PSP
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <pxCurrentTCBConst>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	f01e 0f10 	tst.w	lr, #16
 8003580:	bf08      	it	eq
 8003582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800358a:	6010      	str	r0, [r2, #0]
 800358c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003594:	f380 8811 	msr	BASEPRI, r0
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f7ff f9fc 	bl	800299c <vTaskSwitchContext>
 80035a4:	f04f 0000 	mov.w	r0, #0
 80035a8:	f380 8811 	msr	BASEPRI, r0
 80035ac:	bc09      	pop	{r0, r3}
 80035ae:	6819      	ldr	r1, [r3, #0]
 80035b0:	6808      	ldr	r0, [r1, #0]
 80035b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b6:	f01e 0f10 	tst.w	lr, #16
 80035ba:	bf08      	it	eq
 80035bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80035c0:	f380 8809 	msr	PSP, r0
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	f3af 8000 	nop.w

080035d0 <pxCurrentTCBConst>:
 80035d0:	20000290 	.word	0x20000290
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop

080035d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
	__asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	607b      	str	r3, [r7, #4]
}
 80035f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80035f2:	f7ff f91b 	bl	800282c <xTaskIncrementTick>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <xPortSysTickHandler+0x40>)
 80035fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	2300      	movs	r3, #0
 8003606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f383 8811 	msr	BASEPRI, r3
}
 800360e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	e000ed04 	.word	0xe000ed04

0800361c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <vPortSetupTimerInterrupt+0x34>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003626:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <vPortSetupTimerInterrupt+0x38>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800362c:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <vPortSetupTimerInterrupt+0x3c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0a      	ldr	r2, [pc, #40]	; (800365c <vPortSetupTimerInterrupt+0x40>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	4a09      	ldr	r2, [pc, #36]	; (8003660 <vPortSetupTimerInterrupt+0x44>)
 800363a:	3b01      	subs	r3, #1
 800363c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800363e:	4b04      	ldr	r3, [pc, #16]	; (8003650 <vPortSetupTimerInterrupt+0x34>)
 8003640:	2207      	movs	r2, #7
 8003642:	601a      	str	r2, [r3, #0]
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	e000e010 	.word	0xe000e010
 8003654:	e000e018 	.word	0xe000e018
 8003658:	20000000 	.word	0x20000000
 800365c:	51eb851f 	.word	0x51eb851f
 8003660:	e000e014 	.word	0xe000e014

08003664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003674 <vPortEnableVFP+0x10>
 8003668:	6801      	ldr	r1, [r0, #0]
 800366a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800366e:	6001      	str	r1, [r0, #0]
 8003670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003672:	bf00      	nop
 8003674:	e000ed88 	.word	0xe000ed88

08003678 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8003684:	f7ff f818 	bl	80026b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8003688:	4b3e      	ldr	r3, [pc, #248]	; (8003784 <pvPortMalloc+0x10c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d104      	bne.n	800369a <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8003690:	f000 f8ba 	bl	8003808 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8003694:	4b3b      	ldr	r3, [pc, #236]	; (8003784 <pvPortMalloc+0x10c>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00e      	beq.n	80036be <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 80036a0:	2308      	movs	r3, #8
 80036a2:	461a      	mov	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4413      	add	r3, r2
 80036a8:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d004      	beq.n	80036be <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f023 0307 	bic.w	r3, r3, #7
 80036ba:	3308      	adds	r3, #8
 80036bc:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d057      	beq.n	8003774 <pvPortMalloc+0xfc>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f643 32f7 	movw	r2, #15351	; 0x3bf7
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d852      	bhi.n	8003774 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 80036ce:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <pvPortMalloc+0x110>)
 80036d0:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 80036d2:	4b2d      	ldr	r3, [pc, #180]	; (8003788 <pvPortMalloc+0x110>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036d8:	e004      	b.n	80036e4 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d903      	bls.n	80036f6 <pvPortMalloc+0x7e>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f1      	bne.n	80036da <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4a24      	ldr	r2, [pc, #144]	; (800378c <pvPortMalloc+0x114>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d03a      	beq.n	8003774 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2208      	movs	r2, #8
 8003704:	4413      	add	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2208      	movs	r2, #8
 800371a:	0052      	lsls	r2, r2, #1
 800371c:	4293      	cmp	r3, r2
 800371e:	d922      	bls.n	8003766 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	1ad2      	subs	r2, r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <pvPortMalloc+0x110>)
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	e002      	b.n	800374c <pvPortMalloc+0xd4>
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	429a      	cmp	r2, r3
 8003756:	d8f6      	bhi.n	8003746 <pvPortMalloc+0xce>
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <pvPortMalloc+0x118>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	4a07      	ldr	r2, [pc, #28]	; (8003790 <pvPortMalloc+0x118>)
 8003772:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003774:	f7fe ffae 	bl	80026d4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8003778:	697b      	ldr	r3, [r7, #20]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20003fd4 	.word	0x20003fd4
 8003788:	20003fc4 	.word	0x20003fc4
 800378c:	20003fcc 	.word	0x20003fcc
 8003790:	20000010 	.word	0x20000010

08003794 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d027      	beq.n	80037f6 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 80037a6:	2308      	movs	r3, #8
 80037a8:	425b      	negs	r3, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4413      	add	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 80037b4:	f7fe ff80 	bl	80026b8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <vPortFree+0x6c>)
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	e002      	b.n	80037ca <vPortFree+0x36>
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d8f6      	bhi.n	80037c4 <vPortFree+0x30>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <vPortFree+0x70>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4413      	add	r3, r2
 80037ee:	4a05      	ldr	r2, [pc, #20]	; (8003804 <vPortFree+0x70>)
 80037f0:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 80037f2:	f7fe ff6f 	bl	80026d4 <xTaskResumeAll>
	}
}
 80037f6:	bf00      	nop
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20003fc4 	.word	0x20003fc4
 8003804:	20000010 	.word	0x20000010

08003808 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <prvHeapInit+0x48>)
 8003810:	f023 0307 	bic.w	r3, r3, #7
 8003814:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003816:	4a0f      	ldr	r2, [pc, #60]	; (8003854 <prvHeapInit+0x4c>)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800381c:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <prvHeapInit+0x4c>)
 800381e:	2200      	movs	r2, #0
 8003820:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8003822:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <prvHeapInit+0x50>)
 8003824:	f643 32f8 	movw	r2, #15352	; 0x3bf8
 8003828:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800382a:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <prvHeapInit+0x50>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	f643 32f8 	movw	r2, #15352	; 0x3bf8
 800383a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	4a06      	ldr	r2, [pc, #24]	; (8003858 <prvHeapInit+0x50>)
 8003840:	601a      	str	r2, [r3, #0]
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	200003cc 	.word	0x200003cc
 8003854:	20003fc4 	.word	0x20003fc4
 8003858:	20003fcc 	.word	0x20003fcc

0800385c <__libc_init_array>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	4d0d      	ldr	r5, [pc, #52]	; (8003894 <__libc_init_array+0x38>)
 8003860:	4c0d      	ldr	r4, [pc, #52]	; (8003898 <__libc_init_array+0x3c>)
 8003862:	1b64      	subs	r4, r4, r5
 8003864:	10a4      	asrs	r4, r4, #2
 8003866:	2600      	movs	r6, #0
 8003868:	42a6      	cmp	r6, r4
 800386a:	d109      	bne.n	8003880 <__libc_init_array+0x24>
 800386c:	4d0b      	ldr	r5, [pc, #44]	; (800389c <__libc_init_array+0x40>)
 800386e:	4c0c      	ldr	r4, [pc, #48]	; (80038a0 <__libc_init_array+0x44>)
 8003870:	f000 f82e 	bl	80038d0 <_init>
 8003874:	1b64      	subs	r4, r4, r5
 8003876:	10a4      	asrs	r4, r4, #2
 8003878:	2600      	movs	r6, #0
 800387a:	42a6      	cmp	r6, r4
 800387c:	d105      	bne.n	800388a <__libc_init_array+0x2e>
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	f855 3b04 	ldr.w	r3, [r5], #4
 8003884:	4798      	blx	r3
 8003886:	3601      	adds	r6, #1
 8003888:	e7ee      	b.n	8003868 <__libc_init_array+0xc>
 800388a:	f855 3b04 	ldr.w	r3, [r5], #4
 800388e:	4798      	blx	r3
 8003890:	3601      	adds	r6, #1
 8003892:	e7f2      	b.n	800387a <__libc_init_array+0x1e>
 8003894:	08003908 	.word	0x08003908
 8003898:	08003908 	.word	0x08003908
 800389c:	08003908 	.word	0x08003908
 80038a0:	0800390c 	.word	0x0800390c

080038a4 <memcpy>:
 80038a4:	440a      	add	r2, r1
 80038a6:	4291      	cmp	r1, r2
 80038a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80038ac:	d100      	bne.n	80038b0 <memcpy+0xc>
 80038ae:	4770      	bx	lr
 80038b0:	b510      	push	{r4, lr}
 80038b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038ba:	4291      	cmp	r1, r2
 80038bc:	d1f9      	bne.n	80038b2 <memcpy+0xe>
 80038be:	bd10      	pop	{r4, pc}

080038c0 <memset>:
 80038c0:	4402      	add	r2, r0
 80038c2:	4603      	mov	r3, r0
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d100      	bne.n	80038ca <memset+0xa>
 80038c8:	4770      	bx	lr
 80038ca:	f803 1b01 	strb.w	r1, [r3], #1
 80038ce:	e7f9      	b.n	80038c4 <memset+0x4>

080038d0 <_init>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	bf00      	nop
 80038d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d6:	bc08      	pop	{r3}
 80038d8:	469e      	mov	lr, r3
 80038da:	4770      	bx	lr

080038dc <_fini>:
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	bf00      	nop
 80038e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e2:	bc08      	pop	{r3}
 80038e4:	469e      	mov	lr, r3
 80038e6:	4770      	bx	lr
