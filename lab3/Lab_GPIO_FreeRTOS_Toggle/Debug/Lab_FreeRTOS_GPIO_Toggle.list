
Lab_FreeRTOS_GPIO_Toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000290c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a9c  08002a9c  00012a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002abc  08002abc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002abc  08002abc  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ac4  08002ac4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac8  08002ac8  00012ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00003fbc  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003fd0  20003fd0  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006eed  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019d0  00000000  00000000  00026f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  00028908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000610  00000000  00000000  00029000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002079c  00000000  00000000  00029610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008808  00000000  00000000  00049dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c705b  00000000  00000000  000525b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011960f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001984  00000000  00000000  00119660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002a84 	.word	0x08002a84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08002a84 	.word	0x08002a84

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000030 	.word	0x20000030
 8000504:	20000084 	.word	0x20000084

08000508 <gpio_led_state>:

/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* USER CODE BEGIN 0 */
void gpio_led_state(uint8_t LED_ID, uint8_t state) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	460a      	mov	r2, r1
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	4613      	mov	r3, r2
 8000516:	71bb      	strb	r3, [r7, #6]
  GPIO_PinState pinState;

  pinState = (state == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	2b01      	cmp	r3, #1
 800051c:	bf0c      	ite	eq
 800051e:	2301      	moveq	r3, #1
 8000520:	2300      	movne	r3, #0
 8000522:	b2db      	uxtb	r3, r3
 8000524:	73fb      	strb	r3, [r7, #15]

  switch (LED_ID)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	3b01      	subs	r3, #1
 800052a:	2b03      	cmp	r3, #3
 800052c:	d82a      	bhi.n	8000584 <gpio_led_state+0x7c>
 800052e:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <gpio_led_state+0x2c>)
 8000530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000534:	08000545 	.word	0x08000545
 8000538:	08000555 	.word	0x08000555
 800053c:	08000565 	.word	0x08000565
 8000540:	08000575 	.word	0x08000575
  {
  case LED3_ORANGE_ID:
    HAL_GPIO_WritePin(GPIOD, LED3_ORANGE_PinNumber, pinState );
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	461a      	mov	r2, r3
 8000548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054c:	4810      	ldr	r0, [pc, #64]	; (8000590 <gpio_led_state+0x88>)
 800054e:	f000 fcd3 	bl	8000ef8 <HAL_GPIO_WritePin>
    break;
 8000552:	e018      	b.n	8000586 <gpio_led_state+0x7e>

  case LED4_GREEN_ID:
    HAL_GPIO_WritePin(GPIOD, LED4_GREEN_PinNumber, pinState );
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	461a      	mov	r2, r3
 8000558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <gpio_led_state+0x88>)
 800055e:	f000 fccb 	bl	8000ef8 <HAL_GPIO_WritePin>
    break;
 8000562:	e010      	b.n	8000586 <gpio_led_state+0x7e>

  case LED5_RED_ID:
    HAL_GPIO_WritePin(GPIOD, LED5_RED_PinNumber, pinState );
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	461a      	mov	r2, r3
 8000568:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800056c:	4808      	ldr	r0, [pc, #32]	; (8000590 <gpio_led_state+0x88>)
 800056e:	f000 fcc3 	bl	8000ef8 <HAL_GPIO_WritePin>
    break;
 8000572:	e008      	b.n	8000586 <gpio_led_state+0x7e>

  case LED6_BLUE_ID:
    HAL_GPIO_WritePin(GPIOD, LED6_BLUE_PinNumber, pinState );
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	461a      	mov	r2, r3
 8000578:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <gpio_led_state+0x88>)
 800057e:	f000 fcbb 	bl	8000ef8 <HAL_GPIO_WritePin>
    break;
 8000582:	e000      	b.n	8000586 <gpio_led_state+0x7e>

  default:
    break;
 8000584:	bf00      	nop
  }
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40020c00 	.word	0x40020c00

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	4b2b      	ldr	r3, [pc, #172]	; (800065c <MX_GPIO_Init+0xc8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a2a      	ldr	r2, [pc, #168]	; (800065c <MX_GPIO_Init+0xc8>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b28      	ldr	r3, [pc, #160]	; (800065c <MX_GPIO_Init+0xc8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	4b24      	ldr	r3, [pc, #144]	; (800065c <MX_GPIO_Init+0xc8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a23      	ldr	r2, [pc, #140]	; (800065c <MX_GPIO_Init+0xc8>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <MX_GPIO_Init+0xc8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <MX_GPIO_Init+0xc8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a1c      	ldr	r2, [pc, #112]	; (800065c <MX_GPIO_Init+0xc8>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <MX_GPIO_Init+0xc8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000604:	4816      	ldr	r0, [pc, #88]	; (8000660 <MX_GPIO_Init+0xcc>)
 8000606:	f000 fc77 	bl	8000ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	4811      	ldr	r0, [pc, #68]	; (8000664 <MX_GPIO_Init+0xd0>)
 8000620:	f000 face 	bl	8000bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000624:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <MX_GPIO_Init+0xcc>)
 800063e:	f000 fabf 	bl	8000bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2105      	movs	r1, #5
 8000646:	2006      	movs	r0, #6
 8000648:	f000 fa83 	bl	8000b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800064c:	2006      	movs	r0, #6
 800064e:	f000 fa9c 	bl	8000b8a <HAL_NVIC_EnableIRQ>

}
 8000652:	bf00      	nop
 8000654:	3720      	adds	r7, #32
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40020c00 	.word	0x40020c00
 8000664:	40020000 	.word	0x40020000

08000668 <main>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af02      	add	r7, sp, #8
	HAL_Init();
 800066e:	f000 f923 	bl	80008b8 <HAL_Init>
	SystemClock_Config();
 8000672:	f000 f813 	bl	800069c <SystemClock_Config>
	MX_GPIO_Init();
 8000676:	f7ff ff8d 	bl	8000594 <MX_GPIO_Init>

	xTaskCreate(vTask1, (const char *)"TASK_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800067a:	2300      	movs	r3, #0
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2301      	movs	r3, #1
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	4903      	ldr	r1, [pc, #12]	; (8000694 <main+0x2c>)
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <main+0x30>)
 800068a:	f001 f9e8 	bl	8001a5e <xTaskCreate>

	vTaskStartScheduler();
 800068e:	f001 fb51 	bl	8001d34 <vTaskStartScheduler>

	while(1);
 8000692:	e7fe      	b.n	8000692 <main+0x2a>
 8000694:	08002a9c 	.word	0x08002a9c
 8000698:	08000755 	.word	0x08000755

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 f9e2 	bl	8002a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <SystemClock_Config+0xb0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a20      	ldr	r2, [pc, #128]	; (800074c <SystemClock_Config+0xb0>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <SystemClock_Config+0xb0>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <SystemClock_Config+0xb4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a1a      	ldr	r2, [pc, #104]	; (8000750 <SystemClock_Config+0xb4>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <SystemClock_Config+0xb4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000702:	2300      	movs	r3, #0
 8000704:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fc32 	bl	8000f74 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000716:	f000 f838 	bl	800078a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800071e:	2301      	movs	r3, #1
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fe95 	bl	8001464 <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000740:	f000 f823 	bl	800078a <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3750      	adds	r7, #80	; 0x50
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <vTask1>:

/* USER CODE BEGIN 4 */
void vTask1(void *pvParameters) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	while(1) {
		gpio_led_state(LED5_RED_ID, 1);
 800075c:	2101      	movs	r1, #1
 800075e:	2003      	movs	r0, #3
 8000760:	f7ff fed2 	bl	8000508 <gpio_led_state>
		gpio_led_state(LED6_BLUE_ID, 1);
 8000764:	2101      	movs	r1, #1
 8000766:	2004      	movs	r0, #4
 8000768:	f7ff fece 	bl	8000508 <gpio_led_state>
		vTaskDelay(DELAY_MS / portTICK_RATE_MS);
 800076c:	2064      	movs	r0, #100	; 0x64
 800076e:	f001 faad 	bl	8001ccc <vTaskDelay>
		gpio_led_state(LED5_RED_ID, 0);
 8000772:	2100      	movs	r1, #0
 8000774:	2003      	movs	r0, #3
 8000776:	f7ff fec7 	bl	8000508 <gpio_led_state>
		gpio_led_state(LED6_BLUE_ID, 0);
 800077a:	2100      	movs	r1, #0
 800077c:	2004      	movs	r0, #4
 800077e:	f7ff fec3 	bl	8000508 <gpio_led_state>
		vTaskDelay(DELAY_MS/portTICK_RATE_MS);
 8000782:	2064      	movs	r0, #100	; 0x64
 8000784:	f001 faa2 	bl	8001ccc <vTaskDelay>
		gpio_led_state(LED5_RED_ID, 1);
 8000788:	e7e8      	b.n	800075c <vTask1+0x8>

0800078a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078e:	b672      	cpsid	i
}
 8000790:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000792:	e7fe      	b.n	8000792 <Error_Handler+0x8>

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_MspInit+0x54>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a2:	4a11      	ldr	r2, [pc, #68]	; (80007e8 <HAL_MspInit+0x54>)
 80007a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a8:	6453      	str	r3, [r2, #68]	; 0x44
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x54>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <HAL_MspInit+0x54>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <HAL_MspInit+0x54>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	6413      	str	r3, [r2, #64]	; 0x40
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_MspInit+0x54>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	210f      	movs	r1, #15
 80007d6:	f06f 0001 	mvn.w	r0, #1
 80007da:	f000 f9ba 	bl	8000b52 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <NMI_Handler+0x4>

080007f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <MemManage_Handler+0x4>

080007fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <UsageFault_Handler+0x4>

0800080a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081c:	f000 f89e 	bl	800095c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000820:	f001 fd7c 	bl	800231c <xTaskGetSchedulerState>
 8000824:	4603      	mov	r3, r0
 8000826:	2b01      	cmp	r3, #1
 8000828:	d001      	beq.n	800082e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800082a:	f001 ffbd 	bl	80027a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}

08000832 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000836:	2001      	movs	r0, #1
 8000838:	f000 fb78 	bl	8000f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <SystemInit+0x20>)
 8000846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <SystemInit+0x20>)
 800084c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800089c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800086a:	490e      	ldr	r1, [pc, #56]	; (80008a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000880:	4c0b      	ldr	r4, [pc, #44]	; (80008b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800088e:	f7ff ffd7 	bl	8000840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000892:	f002 f8cb 	bl	8002a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000896:	f7ff fee7 	bl	8000668 <main>
  bx  lr    
 800089a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800089c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008a8:	08002acc 	.word	0x08002acc
  ldr r2, =_sbss
 80008ac:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008b0:	20003fd0 	.word	0x20003fd0

080008b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC_IRQHandler>
	...

080008b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_Init+0x40>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <HAL_Init+0x40>)
 80008c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_Init+0x40>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <HAL_Init+0x40>)
 80008ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_Init+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <HAL_Init+0x40>)
 80008da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 f92b 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e6:	200f      	movs	r0, #15
 80008e8:	f000 f808 	bl	80008fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ec:	f7ff ff52 	bl	8000794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023c00 	.word	0x40023c00

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x54>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x58>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	fbb3 f3f1 	udiv	r3, r3, r1
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f943 	bl	8000ba6 <HAL_SYSTICK_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e00e      	b.n	8000948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d80a      	bhi.n	8000946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000930:	2200      	movs	r2, #0
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000938:	f000 f90b 	bl	8000b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <HAL_InitTick+0x5c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000
 8000954:	20000008 	.word	0x20000008
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x20>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x24>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_IncTick+0x24>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000008 	.word	0x20000008
 8000980:	20000284 	.word	0x20000284

08000984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_GetTick+0x14>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000284 	.word	0x20000284

0800099c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b8:	4013      	ands	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	60d3      	str	r3, [r2, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <__NVIC_GetPriorityGrouping+0x18>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	f003 0307 	and.w	r3, r3, #7
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0b      	blt.n	8000a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 021f 	and.w	r2, r3, #31
 8000a18:	4907      	ldr	r1, [pc, #28]	; (8000a38 <__NVIC_EnableIRQ+0x38>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	095b      	lsrs	r3, r3, #5
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db0a      	blt.n	8000a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	490c      	ldr	r1, [pc, #48]	; (8000a88 <__NVIC_SetPriority+0x4c>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	0112      	lsls	r2, r2, #4
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	440b      	add	r3, r1
 8000a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a64:	e00a      	b.n	8000a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4908      	ldr	r1, [pc, #32]	; (8000a8c <__NVIC_SetPriority+0x50>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	f003 030f 	and.w	r3, r3, #15
 8000a72:	3b04      	subs	r3, #4
 8000a74:	0112      	lsls	r2, r2, #4
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	440b      	add	r3, r1
 8000a7a:	761a      	strb	r2, [r3, #24]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	; 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	f1c3 0307 	rsb	r3, r3, #7
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	bf28      	it	cs
 8000aae:	2304      	movcs	r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	d902      	bls.n	8000ac0 <NVIC_EncodePriority+0x30>
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3b03      	subs	r3, #3
 8000abe:	e000      	b.n	8000ac2 <NVIC_EncodePriority+0x32>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43d9      	mvns	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	4313      	orrs	r3, r2
         );
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3724      	adds	r7, #36	; 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b08:	d301      	bcc.n	8000b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00f      	b.n	8000b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <SysTick_Config+0x40>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b16:	210f      	movs	r1, #15
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b1c:	f7ff ff8e 	bl	8000a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <SysTick_Config+0x40>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <SysTick_Config+0x40>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff29 	bl	800099c <__NVIC_SetPriorityGrouping>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b64:	f7ff ff3e 	bl	80009e4 <__NVIC_GetPriorityGrouping>
 8000b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	6978      	ldr	r0, [r7, #20]
 8000b70:	f7ff ff8e 	bl	8000a90 <NVIC_EncodePriority>
 8000b74:	4602      	mov	r2, r0
 8000b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff5d 	bl	8000a3c <__NVIC_SetPriority>
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff31 	bl	8000a00 <__NVIC_EnableIRQ>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa2 	bl	8000af8 <SysTick_Config>
 8000bb4:	4603      	mov	r3, r0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
 8000bda:	e16b      	b.n	8000eb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bdc:	2201      	movs	r2, #1
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f040 815a 	bne.w	8000eae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d005      	beq.n	8000c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d130      	bne.n	8000c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4013      	ands	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	68da      	ldr	r2, [r3, #12]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	091b      	lsrs	r3, r3, #4
 8000c5e:	f003 0201 	and.w	r2, r3, #1
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d017      	beq.n	8000cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d123      	bne.n	8000d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	08da      	lsrs	r2, r3, #3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	220f      	movs	r2, #15
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	08da      	lsrs	r2, r3, #3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3208      	adds	r2, #8
 8000cfe:	69b9      	ldr	r1, [r7, #24]
 8000d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0203 	and.w	r2, r3, #3
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 80b4 	beq.w	8000eae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b60      	ldr	r3, [pc, #384]	; (8000ecc <HAL_GPIO_Init+0x30c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a5f      	ldr	r2, [pc, #380]	; (8000ecc <HAL_GPIO_Init+0x30c>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
 8000d56:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <HAL_GPIO_Init+0x30c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d62:	4a5b      	ldr	r2, [pc, #364]	; (8000ed0 <HAL_GPIO_Init+0x310>)
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	220f      	movs	r2, #15
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a52      	ldr	r2, [pc, #328]	; (8000ed4 <HAL_GPIO_Init+0x314>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d02b      	beq.n	8000de6 <HAL_GPIO_Init+0x226>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a51      	ldr	r2, [pc, #324]	; (8000ed8 <HAL_GPIO_Init+0x318>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d025      	beq.n	8000de2 <HAL_GPIO_Init+0x222>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a50      	ldr	r2, [pc, #320]	; (8000edc <HAL_GPIO_Init+0x31c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d01f      	beq.n	8000dde <HAL_GPIO_Init+0x21e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4f      	ldr	r2, [pc, #316]	; (8000ee0 <HAL_GPIO_Init+0x320>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d019      	beq.n	8000dda <HAL_GPIO_Init+0x21a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4e      	ldr	r2, [pc, #312]	; (8000ee4 <HAL_GPIO_Init+0x324>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d013      	beq.n	8000dd6 <HAL_GPIO_Init+0x216>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4d      	ldr	r2, [pc, #308]	; (8000ee8 <HAL_GPIO_Init+0x328>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d00d      	beq.n	8000dd2 <HAL_GPIO_Init+0x212>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4c      	ldr	r2, [pc, #304]	; (8000eec <HAL_GPIO_Init+0x32c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d007      	beq.n	8000dce <HAL_GPIO_Init+0x20e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4b      	ldr	r2, [pc, #300]	; (8000ef0 <HAL_GPIO_Init+0x330>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d101      	bne.n	8000dca <HAL_GPIO_Init+0x20a>
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	e00e      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dca:	2308      	movs	r3, #8
 8000dcc:	e00c      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dce:	2306      	movs	r3, #6
 8000dd0:	e00a      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	e008      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e004      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000dde:	2302      	movs	r3, #2
 8000de0:	e002      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <HAL_GPIO_Init+0x228>
 8000de6:	2300      	movs	r3, #0
 8000de8:	69fa      	ldr	r2, [r7, #28]
 8000dea:	f002 0203 	and.w	r2, r2, #3
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	4093      	lsls	r3, r2
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df8:	4935      	ldr	r1, [pc, #212]	; (8000ed0 <HAL_GPIO_Init+0x310>)
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e06:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e2a:	4a32      	ldr	r2, [pc, #200]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e54:	4a27      	ldr	r2, [pc, #156]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	f67f ae90 	bls.w	8000bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40013800 	.word	0x40013800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40021400 	.word	0x40021400
 8000eec:	40021800 	.word	0x40021800
 8000ef0:	40021c00 	.word	0x40021c00
 8000ef4:	40013c00 	.word	0x40013c00

08000ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
 8000f04:	4613      	mov	r3, r2
 8000f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f08:	787b      	ldrb	r3, [r7, #1]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f14:	e003      	b.n	8000f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	041a      	lsls	r2, r3, #16
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	619a      	str	r2, [r3, #24]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f38:	695a      	ldr	r2, [r3, #20]
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d006      	beq.n	8000f50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f806 	bl	8000f5c <HAL_GPIO_EXTI_Callback>
  }
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40013c00 	.word	0x40013c00

08000f5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e267      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d075      	beq.n	800107e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f92:	4b88      	ldr	r3, [pc, #544]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d00c      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f9e:	4b85      	ldr	r3, [pc, #532]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d112      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000faa:	4b82      	ldr	r3, [pc, #520]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fb6:	d10b      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb8:	4b7e      	ldr	r3, [pc, #504]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d05b      	beq.n	800107c <HAL_RCC_OscConfig+0x108>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d157      	bne.n	800107c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e242      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd8:	d106      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x74>
 8000fda:	4b76      	ldr	r3, [pc, #472]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a75      	ldr	r2, [pc, #468]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e01d      	b.n	8001024 <HAL_RCC_OscConfig+0xb0>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0x98>
 8000ff2:	4b70      	ldr	r3, [pc, #448]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a6f      	ldr	r2, [pc, #444]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	4b6d      	ldr	r3, [pc, #436]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a6c      	ldr	r2, [pc, #432]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e00b      	b.n	8001024 <HAL_RCC_OscConfig+0xb0>
 800100c:	4b69      	ldr	r3, [pc, #420]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a68      	ldr	r2, [pc, #416]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b66      	ldr	r3, [pc, #408]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a65      	ldr	r2, [pc, #404]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 800101e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fcaa 	bl	8000984 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fca6 	bl	8000984 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e207      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	4b5b      	ldr	r3, [pc, #364]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0xc0>
 8001052:	e014      	b.n	800107e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fc96 	bl	8000984 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fc92 	bl	8000984 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	; 0x64
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e1f3      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106e:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0xe8>
 800107a:	e000      	b.n	800107e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d063      	beq.n	8001152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800108a:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00b      	beq.n	80010ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001096:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d11c      	bne.n	80010dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010a2:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d116      	bne.n	80010dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ae:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <HAL_RCC_OscConfig+0x152>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d001      	beq.n	80010c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e1c7      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c6:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4937      	ldr	r1, [pc, #220]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010da:	e03a      	b.n	8001152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d020      	beq.n	8001126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e4:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <HAL_RCC_OscConfig+0x244>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ea:	f7ff fc4b 	bl	8000984 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f2:	f7ff fc47 	bl	8000984 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e1a8      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001110:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4925      	ldr	r1, [pc, #148]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001120:	4313      	orrs	r3, r2
 8001122:	600b      	str	r3, [r1, #0]
 8001124:	e015      	b.n	8001152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001126:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <HAL_RCC_OscConfig+0x244>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112c:	f7ff fc2a 	bl	8000984 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001134:	f7ff fc26 	bl	8000984 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e187      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d036      	beq.n	80011cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d016      	beq.n	8001194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_RCC_OscConfig+0x248>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116c:	f7ff fc0a 	bl	8000984 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001174:	f7ff fc06 	bl	8000984 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e167      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_RCC_OscConfig+0x240>)
 8001188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0x200>
 8001192:	e01b      	b.n	80011cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_RCC_OscConfig+0x248>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119a:	f7ff fbf3 	bl	8000984 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a0:	e00e      	b.n	80011c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a2:	f7ff fbef 	bl	8000984 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d907      	bls.n	80011c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e150      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
 80011b4:	40023800 	.word	0x40023800
 80011b8:	42470000 	.word	0x42470000
 80011bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c0:	4b88      	ldr	r3, [pc, #544]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 80011c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1ea      	bne.n	80011a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 8097 	beq.w	8001308 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011de:	4b81      	ldr	r3, [pc, #516]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10f      	bne.n	800120a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	4b7d      	ldr	r3, [pc, #500]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a7c      	ldr	r2, [pc, #496]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b7a      	ldr	r3, [pc, #488]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001206:	2301      	movs	r3, #1
 8001208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120a:	4b77      	ldr	r3, [pc, #476]	; (80013e8 <HAL_RCC_OscConfig+0x474>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001212:	2b00      	cmp	r3, #0
 8001214:	d118      	bne.n	8001248 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001216:	4b74      	ldr	r3, [pc, #464]	; (80013e8 <HAL_RCC_OscConfig+0x474>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a73      	ldr	r2, [pc, #460]	; (80013e8 <HAL_RCC_OscConfig+0x474>)
 800121c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001222:	f7ff fbaf 	bl	8000984 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122a:	f7ff fbab 	bl	8000984 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e10c      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123c:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <HAL_RCC_OscConfig+0x474>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d106      	bne.n	800125e <HAL_RCC_OscConfig+0x2ea>
 8001250:	4b64      	ldr	r3, [pc, #400]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001254:	4a63      	ldr	r2, [pc, #396]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6713      	str	r3, [r2, #112]	; 0x70
 800125c:	e01c      	b.n	8001298 <HAL_RCC_OscConfig+0x324>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b05      	cmp	r3, #5
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0x30c>
 8001266:	4b5f      	ldr	r3, [pc, #380]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126a:	4a5e      	ldr	r2, [pc, #376]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6713      	str	r3, [r2, #112]	; 0x70
 8001272:	4b5c      	ldr	r3, [pc, #368]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001276:	4a5b      	ldr	r2, [pc, #364]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6713      	str	r3, [r2, #112]	; 0x70
 800127e:	e00b      	b.n	8001298 <HAL_RCC_OscConfig+0x324>
 8001280:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001284:	4a57      	ldr	r2, [pc, #348]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001286:	f023 0301 	bic.w	r3, r3, #1
 800128a:	6713      	str	r3, [r2, #112]	; 0x70
 800128c:	4b55      	ldr	r3, [pc, #340]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 800128e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001290:	4a54      	ldr	r2, [pc, #336]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001292:	f023 0304 	bic.w	r3, r3, #4
 8001296:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d015      	beq.n	80012cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a0:	f7ff fb70 	bl	8000984 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a6:	e00a      	b.n	80012be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a8:	f7ff fb6c 	bl	8000984 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e0cb      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012be:	4b49      	ldr	r3, [pc, #292]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 80012c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0ee      	beq.n	80012a8 <HAL_RCC_OscConfig+0x334>
 80012ca:	e014      	b.n	80012f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012cc:	f7ff fb5a 	bl	8000984 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d2:	e00a      	b.n	80012ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d4:	f7ff fb56 	bl	8000984 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e0b5      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ea:	4b3e      	ldr	r3, [pc, #248]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 80012ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1ee      	bne.n	80012d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d105      	bne.n	8001308 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012fc:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	4a38      	ldr	r2, [pc, #224]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001306:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80a1 	beq.w	8001454 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b08      	cmp	r3, #8
 800131c:	d05c      	beq.n	80013d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d141      	bne.n	80013aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001326:	4b31      	ldr	r3, [pc, #196]	; (80013ec <HAL_RCC_OscConfig+0x478>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fb2a 	bl	8000984 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001334:	f7ff fb26 	bl	8000984 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e087      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69da      	ldr	r2, [r3, #28]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	019b      	lsls	r3, r3, #6
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	085b      	lsrs	r3, r3, #1
 800136a:	3b01      	subs	r3, #1
 800136c:	041b      	lsls	r3, r3, #16
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	061b      	lsls	r3, r3, #24
 8001376:	491b      	ldr	r1, [pc, #108]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_RCC_OscConfig+0x478>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001382:	f7ff faff 	bl	8000984 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138a:	f7ff fafb 	bl	8000984 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e05c      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x416>
 80013a8:	e054      	b.n	8001454 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_RCC_OscConfig+0x478>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fae8 	bl	8000984 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b8:	f7ff fae4 	bl	8000984 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e045      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_RCC_OscConfig+0x470>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x444>
 80013d6:	e03d      	b.n	8001454 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d107      	bne.n	80013f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e038      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40007000 	.word	0x40007000
 80013ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_RCC_OscConfig+0x4ec>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d028      	beq.n	8001450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001408:	429a      	cmp	r2, r3
 800140a:	d121      	bne.n	8001450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001416:	429a      	cmp	r2, r3
 8001418:	d11a      	bne.n	8001450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001420:	4013      	ands	r3, r2
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001426:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001428:	4293      	cmp	r3, r2
 800142a:	d111      	bne.n	8001450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	085b      	lsrs	r3, r3, #1
 8001438:	3b01      	subs	r3, #1
 800143a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800143c:	429a      	cmp	r2, r3
 800143e:	d107      	bne.n	8001450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800144c:	429a      	cmp	r2, r3
 800144e:	d001      	beq.n	8001454 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800

08001464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0cc      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001478:	4b68      	ldr	r3, [pc, #416]	; (800161c <HAL_RCC_ClockConfig+0x1b8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d90c      	bls.n	80014a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001486:	4b65      	ldr	r3, [pc, #404]	; (800161c <HAL_RCC_ClockConfig+0x1b8>)
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b63      	ldr	r3, [pc, #396]	; (800161c <HAL_RCC_ClockConfig+0x1b8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0b8      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b8:	4b59      	ldr	r3, [pc, #356]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a58      	ldr	r2, [pc, #352]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d0:	4b53      	ldr	r3, [pc, #332]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4a52      	ldr	r2, [pc, #328]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014dc:	4b50      	ldr	r3, [pc, #320]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	494d      	ldr	r1, [pc, #308]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d044      	beq.n	8001584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d107      	bne.n	8001512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d119      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e07f      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d003      	beq.n	8001522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800151e:	2b03      	cmp	r3, #3
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001522:	4b3f      	ldr	r3, [pc, #252]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d109      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e06f      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001532:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e067      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001542:	4b37      	ldr	r3, [pc, #220]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f023 0203 	bic.w	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4934      	ldr	r1, [pc, #208]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	4313      	orrs	r3, r2
 8001552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001554:	f7ff fa16 	bl	8000984 <HAL_GetTick>
 8001558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	e00a      	b.n	8001572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155c:	f7ff fa12 	bl	8000984 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	; 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e04f      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 020c 	and.w	r2, r3, #12
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	429a      	cmp	r2, r3
 8001582:	d1eb      	bne.n	800155c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001584:	4b25      	ldr	r3, [pc, #148]	; (800161c <HAL_RCC_ClockConfig+0x1b8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d20c      	bcs.n	80015ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e032      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	4916      	ldr	r1, [pc, #88]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d009      	beq.n	80015ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	490e      	ldr	r1, [pc, #56]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015ea:	f000 f821 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 80015ee:	4602      	mov	r2, r0
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	490a      	ldr	r1, [pc, #40]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 80015fc:	5ccb      	ldrb	r3, [r1, r3]
 80015fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001602:	4a09      	ldr	r2, [pc, #36]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_RCC_ClockConfig+0x1c8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff f976 	bl	80008fc <HAL_InitTick>

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023c00 	.word	0x40023c00
 8001620:	40023800 	.word	0x40023800
 8001624:	08002aac 	.word	0x08002aac
 8001628:	20000000 	.word	0x20000000
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001634:	b094      	sub	sp, #80	; 0x50
 8001636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
 800163c:	2300      	movs	r3, #0
 800163e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001640:	2300      	movs	r3, #0
 8001642:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001648:	4b79      	ldr	r3, [pc, #484]	; (8001830 <HAL_RCC_GetSysClockFreq+0x200>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b08      	cmp	r3, #8
 8001652:	d00d      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0x40>
 8001654:	2b08      	cmp	r3, #8
 8001656:	f200 80e1 	bhi.w	800181c <HAL_RCC_GetSysClockFreq+0x1ec>
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <HAL_RCC_GetSysClockFreq+0x34>
 800165e:	2b04      	cmp	r3, #4
 8001660:	d003      	beq.n	800166a <HAL_RCC_GetSysClockFreq+0x3a>
 8001662:	e0db      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001664:	4b73      	ldr	r3, [pc, #460]	; (8001834 <HAL_RCC_GetSysClockFreq+0x204>)
 8001666:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001668:	e0db      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800166a:	4b73      	ldr	r3, [pc, #460]	; (8001838 <HAL_RCC_GetSysClockFreq+0x208>)
 800166c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800166e:	e0d8      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001670:	4b6f      	ldr	r3, [pc, #444]	; (8001830 <HAL_RCC_GetSysClockFreq+0x200>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001678:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800167a:	4b6d      	ldr	r3, [pc, #436]	; (8001830 <HAL_RCC_GetSysClockFreq+0x200>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d063      	beq.n	800174e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001686:	4b6a      	ldr	r3, [pc, #424]	; (8001830 <HAL_RCC_GetSysClockFreq+0x200>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	099b      	lsrs	r3, r3, #6
 800168c:	2200      	movs	r2, #0
 800168e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001690:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001698:	633b      	str	r3, [r7, #48]	; 0x30
 800169a:	2300      	movs	r3, #0
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
 800169e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016a2:	4622      	mov	r2, r4
 80016a4:	462b      	mov	r3, r5
 80016a6:	f04f 0000 	mov.w	r0, #0
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	0159      	lsls	r1, r3, #5
 80016b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016b4:	0150      	lsls	r0, r2, #5
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4621      	mov	r1, r4
 80016bc:	1a51      	subs	r1, r2, r1
 80016be:	6139      	str	r1, [r7, #16]
 80016c0:	4629      	mov	r1, r5
 80016c2:	eb63 0301 	sbc.w	r3, r3, r1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016d4:	4659      	mov	r1, fp
 80016d6:	018b      	lsls	r3, r1, #6
 80016d8:	4651      	mov	r1, sl
 80016da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016de:	4651      	mov	r1, sl
 80016e0:	018a      	lsls	r2, r1, #6
 80016e2:	4651      	mov	r1, sl
 80016e4:	ebb2 0801 	subs.w	r8, r2, r1
 80016e8:	4659      	mov	r1, fp
 80016ea:	eb63 0901 	sbc.w	r9, r3, r1
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001702:	4690      	mov	r8, r2
 8001704:	4699      	mov	r9, r3
 8001706:	4623      	mov	r3, r4
 8001708:	eb18 0303 	adds.w	r3, r8, r3
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	462b      	mov	r3, r5
 8001710:	eb49 0303 	adc.w	r3, r9, r3
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001722:	4629      	mov	r1, r5
 8001724:	024b      	lsls	r3, r1, #9
 8001726:	4621      	mov	r1, r4
 8001728:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800172c:	4621      	mov	r1, r4
 800172e:	024a      	lsls	r2, r1, #9
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001736:	2200      	movs	r2, #0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
 800173a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800173c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001740:	f7fe fd46 	bl	80001d0 <__aeabi_uldivmod>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4613      	mov	r3, r2
 800174a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800174c:	e058      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174e:	4b38      	ldr	r3, [pc, #224]	; (8001830 <HAL_RCC_GetSysClockFreq+0x200>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	099b      	lsrs	r3, r3, #6
 8001754:	2200      	movs	r2, #0
 8001756:	4618      	mov	r0, r3
 8001758:	4611      	mov	r1, r2
 800175a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800175e:	623b      	str	r3, [r7, #32]
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
 8001764:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001768:	4642      	mov	r2, r8
 800176a:	464b      	mov	r3, r9
 800176c:	f04f 0000 	mov.w	r0, #0
 8001770:	f04f 0100 	mov.w	r1, #0
 8001774:	0159      	lsls	r1, r3, #5
 8001776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800177a:	0150      	lsls	r0, r2, #5
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4641      	mov	r1, r8
 8001782:	ebb2 0a01 	subs.w	sl, r2, r1
 8001786:	4649      	mov	r1, r9
 8001788:	eb63 0b01 	sbc.w	fp, r3, r1
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001798:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800179c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017a0:	ebb2 040a 	subs.w	r4, r2, sl
 80017a4:	eb63 050b 	sbc.w	r5, r3, fp
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	00eb      	lsls	r3, r5, #3
 80017b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017b6:	00e2      	lsls	r2, r4, #3
 80017b8:	4614      	mov	r4, r2
 80017ba:	461d      	mov	r5, r3
 80017bc:	4643      	mov	r3, r8
 80017be:	18e3      	adds	r3, r4, r3
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	464b      	mov	r3, r9
 80017c4:	eb45 0303 	adc.w	r3, r5, r3
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017d6:	4629      	mov	r1, r5
 80017d8:	028b      	lsls	r3, r1, #10
 80017da:	4621      	mov	r1, r4
 80017dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017e0:	4621      	mov	r1, r4
 80017e2:	028a      	lsls	r2, r1, #10
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ea:	2200      	movs	r2, #0
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	61fa      	str	r2, [r7, #28]
 80017f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017f4:	f7fe fcec 	bl	80001d0 <__aeabi_uldivmod>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4613      	mov	r3, r2
 80017fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_RCC_GetSysClockFreq+0x200>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	0c1b      	lsrs	r3, r3, #16
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	3301      	adds	r3, #1
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001814:	fbb2 f3f3 	udiv	r3, r2, r3
 8001818:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800181a:	e002      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_RCC_GetSysClockFreq+0x204>)
 800181e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001824:	4618      	mov	r0, r3
 8001826:	3750      	adds	r7, #80	; 0x50
 8001828:	46bd      	mov	sp, r7
 800182a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	00f42400 	.word	0x00f42400
 8001838:	007a1200 	.word	0x007a1200

0800183c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f103 0208 	add.w	r2, r3, #8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001854:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f103 0208 	add.w	r2, r3, #8
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f103 0208 	add.w	r2, r3, #8
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001896:	b480      	push	{r7}
 8001898:	b085      	sub	sp, #20
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	601a      	str	r2, [r3, #0]
}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018de:	b480      	push	{r7}
 80018e0:	b085      	sub	sp, #20
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018f4:	d103      	bne.n	80018fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e00c      	b.n	8001918 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3308      	adds	r3, #8
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	e002      	b.n	800190c <vListInsert+0x2e>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	429a      	cmp	r2, r3
 8001916:	d2f6      	bcs.n	8001906 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	601a      	str	r2, [r3, #0]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6892      	ldr	r2, [r2, #8]
 8001966:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6852      	ldr	r2, [r2, #4]
 8001970:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	d103      	bne.n	8001984 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	1e5a      	subs	r2, r3, #1
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08e      	sub	sp, #56	; 0x38
 80019a8:	af04      	add	r7, sp, #16
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80019b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10a      	bne.n	80019ce <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019bc:	f383 8811 	msr	BASEPRI, r3
 80019c0:	f3bf 8f6f 	isb	sy
 80019c4:	f3bf 8f4f 	dsb	sy
 80019c8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80019ca:	bf00      	nop
 80019cc:	e7fe      	b.n	80019cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80019ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10a      	bne.n	80019ea <xTaskCreateStatic+0x46>
	__asm volatile
 80019d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d8:	f383 8811 	msr	BASEPRI, r3
 80019dc:	f3bf 8f6f 	isb	sy
 80019e0:	f3bf 8f4f 	dsb	sy
 80019e4:	61fb      	str	r3, [r7, #28]
}
 80019e6:	bf00      	nop
 80019e8:	e7fe      	b.n	80019e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80019ea:	2354      	movs	r3, #84	; 0x54
 80019ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b54      	cmp	r3, #84	; 0x54
 80019f2:	d00a      	beq.n	8001a0a <xTaskCreateStatic+0x66>
	__asm volatile
 80019f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f8:	f383 8811 	msr	BASEPRI, r3
 80019fc:	f3bf 8f6f 	isb	sy
 8001a00:	f3bf 8f4f 	dsb	sy
 8001a04:	61bb      	str	r3, [r7, #24]
}
 8001a06:	bf00      	nop
 8001a08:	e7fe      	b.n	8001a08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001a0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d01e      	beq.n	8001a50 <xTaskCreateStatic+0xac>
 8001a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d01b      	beq.n	8001a50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	2202      	movs	r2, #2
 8001a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9303      	str	r3, [sp, #12]
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	9302      	str	r3, [sp, #8]
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 f850 	bl	8001ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a4a:	f000 f8d5 	bl	8001bf8 <prvAddNewTaskToReadyList>
 8001a4e:	e001      	b.n	8001a54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001a54:	697b      	ldr	r3, [r7, #20]
	}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3728      	adds	r7, #40	; 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b08c      	sub	sp, #48	; 0x30
 8001a62:	af04      	add	r7, sp, #16
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fee8 	bl	8002848 <pvPortMalloc>
 8001a78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00e      	beq.n	8001a9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001a80:	2054      	movs	r0, #84	; 0x54
 8001a82:	f000 fee1 	bl	8002848 <pvPortMalloc>
 8001a86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
 8001a94:	e005      	b.n	8001aa2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f000 ff64 	bl	8002964 <vPortFree>
 8001a9c:	e001      	b.n	8001aa2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d017      	beq.n	8001ad8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9303      	str	r3, [sp, #12]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	9302      	str	r3, [sp, #8]
 8001aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f80e 	bl	8001ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001acc:	69f8      	ldr	r0, [r7, #28]
 8001ace:	f000 f893 	bl	8001bf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	e002      	b.n	8001ade <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001adc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ade:	69bb      	ldr	r3, [r7, #24]
	}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b00:	3b01      	subs	r3, #1
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	f023 0307 	bic.w	r3, r3, #7
 8001b0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00a      	beq.n	8001b30 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1e:	f383 8811 	msr	BASEPRI, r3
 8001b22:	f3bf 8f6f 	isb	sy
 8001b26:	f3bf 8f4f 	dsb	sy
 8001b2a:	617b      	str	r3, [r7, #20]
}
 8001b2c:	bf00      	nop
 8001b2e:	e7fe      	b.n	8001b2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d01f      	beq.n	8001b76 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	e012      	b.n	8001b62 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	4413      	add	r3, r2
 8001b42:	7819      	ldrb	r1, [r3, #0]
 8001b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4413      	add	r3, r2
 8001b4a:	3334      	adds	r3, #52	; 0x34
 8001b4c:	460a      	mov	r2, r1
 8001b4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	4413      	add	r3, r2
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d006      	beq.n	8001b6a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	2b0f      	cmp	r3, #15
 8001b66:	d9e9      	bls.n	8001b3c <prvInitialiseNewTask+0x54>
 8001b68:	e000      	b.n	8001b6c <prvInitialiseNewTask+0x84>
			{
				break;
 8001b6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b74:	e003      	b.n	8001b7e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b80:	2b06      	cmp	r3, #6
 8001b82:	d901      	bls.n	8001b88 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b84:	2306      	movs	r3, #6
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b92:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b96:	2200      	movs	r2, #0
 8001b98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fe6c 	bl	800187c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba6:	3318      	adds	r3, #24
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fe67 	bl	800187c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	f1c3 0207 	rsb	r2, r3, #7
 8001bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	69b8      	ldr	r0, [r7, #24]
 8001bd8:	f000 fc24 	bl	8002424 <pxPortInitialiseStack>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001bee:	bf00      	nop
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001c00:	f000 fd40 	bl	8002684 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <prvAddNewTaskToReadyList+0xb8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	4a29      	ldr	r2, [pc, #164]	; (8001cb0 <prvAddNewTaskToReadyList+0xb8>)
 8001c0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <prvAddNewTaskToReadyList+0xbc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001c16:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <prvAddNewTaskToReadyList+0xbc>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <prvAddNewTaskToReadyList+0xb8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d110      	bne.n	8001c46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001c24:	f000 fabc 	bl	80021a0 <prvInitialiseTaskLists>
 8001c28:	e00d      	b.n	8001c46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <prvAddNewTaskToReadyList+0xc0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <prvAddNewTaskToReadyList+0xbc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d802      	bhi.n	8001c46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001c40:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <prvAddNewTaskToReadyList+0xbc>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001c46:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <prvAddNewTaskToReadyList+0xc4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <prvAddNewTaskToReadyList+0xc4>)
 8001c4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	2201      	movs	r2, #1
 8001c56:	409a      	lsls	r2, r3
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <prvAddNewTaskToReadyList+0xc8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <prvAddNewTaskToReadyList+0xc8>)
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4a15      	ldr	r2, [pc, #84]	; (8001cc4 <prvAddNewTaskToReadyList+0xcc>)
 8001c70:	441a      	add	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3304      	adds	r3, #4
 8001c76:	4619      	mov	r1, r3
 8001c78:	4610      	mov	r0, r2
 8001c7a:	f7ff fe0c 	bl	8001896 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001c7e:	f000 fd31 	bl	80026e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <prvAddNewTaskToReadyList+0xc0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00e      	beq.n	8001ca8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <prvAddNewTaskToReadyList+0xbc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <prvAddNewTaskToReadyList+0xd0>)
 8001c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	f3bf 8f4f 	dsb	sy
 8001ca4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000388 	.word	0x20000388
 8001cb4:	20000288 	.word	0x20000288
 8001cb8:	20000394 	.word	0x20000394
 8001cbc:	200003a4 	.word	0x200003a4
 8001cc0:	20000390 	.word	0x20000390
 8001cc4:	2000028c 	.word	0x2000028c
 8001cc8:	e000ed04 	.word	0xe000ed04

08001ccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d017      	beq.n	8001d0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <vTaskDelay+0x60>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00a      	beq.n	8001cfc <vTaskDelay+0x30>
	__asm volatile
 8001ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cea:	f383 8811 	msr	BASEPRI, r3
 8001cee:	f3bf 8f6f 	isb	sy
 8001cf2:	f3bf 8f4f 	dsb	sy
 8001cf6:	60bb      	str	r3, [r7, #8]
}
 8001cf8:	bf00      	nop
 8001cfa:	e7fe      	b.n	8001cfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001cfc:	f000 f87a 	bl	8001df4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001d00:	2100      	movs	r1, #0
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fb28 	bl	8002358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001d08:	f000 f882 	bl	8001e10 <xTaskResumeAll>
 8001d0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d107      	bne.n	8001d24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <vTaskDelay+0x64>)
 8001d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	200003b0 	.word	0x200003b0
 8001d30:	e000ed04 	.word	0xe000ed04

08001d34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001d42:	463a      	mov	r2, r7
 8001d44:	1d39      	adds	r1, r7, #4
 8001d46:	f107 0308 	add.w	r3, r7, #8
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fbc2 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001d50:	6839      	ldr	r1, [r7, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	9202      	str	r2, [sp, #8]
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	460a      	mov	r2, r1
 8001d62:	491e      	ldr	r1, [pc, #120]	; (8001ddc <vTaskStartScheduler+0xa8>)
 8001d64:	481e      	ldr	r0, [pc, #120]	; (8001de0 <vTaskStartScheduler+0xac>)
 8001d66:	f7ff fe1d 	bl	80019a4 <xTaskCreateStatic>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <vTaskStartScheduler+0xb0>)
 8001d6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <vTaskStartScheduler+0xb0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e001      	b.n	8001d82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d116      	bne.n	8001db6 <vTaskStartScheduler+0x82>
	__asm volatile
 8001d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8c:	f383 8811 	msr	BASEPRI, r3
 8001d90:	f3bf 8f6f 	isb	sy
 8001d94:	f3bf 8f4f 	dsb	sy
 8001d98:	613b      	str	r3, [r7, #16]
}
 8001d9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <vTaskStartScheduler+0xb4>)
 8001d9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001da2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <vTaskStartScheduler+0xb8>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <vTaskStartScheduler+0xbc>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001db0:	f000 fbc6 	bl	8002540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001db4:	e00e      	b.n	8001dd4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dbc:	d10a      	bne.n	8001dd4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8001dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc2:	f383 8811 	msr	BASEPRI, r3
 8001dc6:	f3bf 8f6f 	isb	sy
 8001dca:	f3bf 8f4f 	dsb	sy
 8001dce:	60fb      	str	r3, [r7, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	e7fe      	b.n	8001dd2 <vTaskStartScheduler+0x9e>
}
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	08002aa4 	.word	0x08002aa4
 8001de0:	08002171 	.word	0x08002171
 8001de4:	200003ac 	.word	0x200003ac
 8001de8:	200003a8 	.word	0x200003a8
 8001dec:	20000394 	.word	0x20000394
 8001df0:	2000038c 	.word	0x2000038c

08001df4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <vTaskSuspendAll+0x18>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	4a03      	ldr	r2, [pc, #12]	; (8001e0c <vTaskSuspendAll+0x18>)
 8001e00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	200003b0 	.word	0x200003b0

08001e10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001e1e:	4b41      	ldr	r3, [pc, #260]	; (8001f24 <xTaskResumeAll+0x114>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10a      	bne.n	8001e3c <xTaskResumeAll+0x2c>
	__asm volatile
 8001e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e2a:	f383 8811 	msr	BASEPRI, r3
 8001e2e:	f3bf 8f6f 	isb	sy
 8001e32:	f3bf 8f4f 	dsb	sy
 8001e36:	603b      	str	r3, [r7, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	e7fe      	b.n	8001e3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001e3c:	f000 fc22 	bl	8002684 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001e40:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <xTaskResumeAll+0x114>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	4a37      	ldr	r2, [pc, #220]	; (8001f24 <xTaskResumeAll+0x114>)
 8001e48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e4a:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <xTaskResumeAll+0x114>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d161      	bne.n	8001f16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e52:	4b35      	ldr	r3, [pc, #212]	; (8001f28 <xTaskResumeAll+0x118>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d05d      	beq.n	8001f16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e5a:	e02e      	b.n	8001eba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e5c:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <xTaskResumeAll+0x11c>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3318      	adds	r3, #24
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fd71 	bl	8001950 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3304      	adds	r3, #4
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fd6c 	bl	8001950 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <xTaskResumeAll+0x120>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	4a2a      	ldr	r2, [pc, #168]	; (8001f30 <xTaskResumeAll+0x120>)
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4a27      	ldr	r2, [pc, #156]	; (8001f34 <xTaskResumeAll+0x124>)
 8001e98:	441a      	add	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	f7ff fcf8 	bl	8001896 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eaa:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <xTaskResumeAll+0x128>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d302      	bcc.n	8001eba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <xTaskResumeAll+0x12c>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <xTaskResumeAll+0x11c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1cc      	bne.n	8001e5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001ec8:	f000 fa08 	bl	80022dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <xTaskResumeAll+0x130>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d010      	beq.n	8001efa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001ed8:	f000 f836 	bl	8001f48 <xTaskIncrementTick>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <xTaskResumeAll+0x12c>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f1      	bne.n	8001ed8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <xTaskResumeAll+0x130>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <xTaskResumeAll+0x12c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001f02:	2301      	movs	r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <xTaskResumeAll+0x134>)
 8001f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	f3bf 8f4f 	dsb	sy
 8001f12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001f16:	f000 fbe5 	bl	80026e4 <vPortExitCritical>

	return xAlreadyYielded;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200003b0 	.word	0x200003b0
 8001f28:	20000388 	.word	0x20000388
 8001f2c:	20000348 	.word	0x20000348
 8001f30:	20000390 	.word	0x20000390
 8001f34:	2000028c 	.word	0x2000028c
 8001f38:	20000288 	.word	0x20000288
 8001f3c:	2000039c 	.word	0x2000039c
 8001f40:	20000398 	.word	0x20000398
 8001f44:	e000ed04 	.word	0xe000ed04

08001f48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f52:	4b4e      	ldr	r3, [pc, #312]	; (800208c <xTaskIncrementTick+0x144>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f040 808e 	bne.w	8002078 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f5c:	4b4c      	ldr	r3, [pc, #304]	; (8002090 <xTaskIncrementTick+0x148>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001f64:	4a4a      	ldr	r2, [pc, #296]	; (8002090 <xTaskIncrementTick+0x148>)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d120      	bne.n	8001fb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001f70:	4b48      	ldr	r3, [pc, #288]	; (8002094 <xTaskIncrementTick+0x14c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <xTaskIncrementTick+0x48>
	__asm volatile
 8001f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7e:	f383 8811 	msr	BASEPRI, r3
 8001f82:	f3bf 8f6f 	isb	sy
 8001f86:	f3bf 8f4f 	dsb	sy
 8001f8a:	603b      	str	r3, [r7, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	e7fe      	b.n	8001f8e <xTaskIncrementTick+0x46>
 8001f90:	4b40      	ldr	r3, [pc, #256]	; (8002094 <xTaskIncrementTick+0x14c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b40      	ldr	r3, [pc, #256]	; (8002098 <xTaskIncrementTick+0x150>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a3e      	ldr	r2, [pc, #248]	; (8002094 <xTaskIncrementTick+0x14c>)
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4a3e      	ldr	r2, [pc, #248]	; (8002098 <xTaskIncrementTick+0x150>)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b3d      	ldr	r3, [pc, #244]	; (800209c <xTaskIncrementTick+0x154>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4a3c      	ldr	r2, [pc, #240]	; (800209c <xTaskIncrementTick+0x154>)
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	f000 f995 	bl	80022dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001fb2:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <xTaskIncrementTick+0x158>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d348      	bcc.n	800204e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fbc:	4b35      	ldr	r3, [pc, #212]	; (8002094 <xTaskIncrementTick+0x14c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d104      	bne.n	8001fd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fc6:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <xTaskIncrementTick+0x158>)
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fcc:	601a      	str	r2, [r3, #0]
					break;
 8001fce:	e03e      	b.n	800204e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fd0:	4b30      	ldr	r3, [pc, #192]	; (8002094 <xTaskIncrementTick+0x14c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d203      	bcs.n	8001ff0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001fe8:	4a2d      	ldr	r2, [pc, #180]	; (80020a0 <xTaskIncrementTick+0x158>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001fee:	e02e      	b.n	800204e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fcab 	bl	8001950 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d004      	beq.n	800200c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3318      	adds	r3, #24
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fca2 	bl	8001950 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	2201      	movs	r2, #1
 8002012:	409a      	lsls	r2, r3
 8002014:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <xTaskIncrementTick+0x15c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4313      	orrs	r3, r2
 800201a:	4a22      	ldr	r2, [pc, #136]	; (80020a4 <xTaskIncrementTick+0x15c>)
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <xTaskIncrementTick+0x160>)
 800202c:	441a      	add	r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	3304      	adds	r3, #4
 8002032:	4619      	mov	r1, r3
 8002034:	4610      	mov	r0, r2
 8002036:	f7ff fc2e 	bl	8001896 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203e:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <xTaskIncrementTick+0x164>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	429a      	cmp	r2, r3
 8002046:	d3b9      	bcc.n	8001fbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002048:	2301      	movs	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800204c:	e7b6      	b.n	8001fbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <xTaskIncrementTick+0x164>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002054:	4914      	ldr	r1, [pc, #80]	; (80020a8 <xTaskIncrementTick+0x160>)
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d901      	bls.n	800206a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002066:	2301      	movs	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <xTaskIncrementTick+0x168>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d007      	beq.n	8002082 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002072:	2301      	movs	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e004      	b.n	8002082 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <xTaskIncrementTick+0x16c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <xTaskIncrementTick+0x16c>)
 8002080:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002082:	697b      	ldr	r3, [r7, #20]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200003b0 	.word	0x200003b0
 8002090:	2000038c 	.word	0x2000038c
 8002094:	20000340 	.word	0x20000340
 8002098:	20000344 	.word	0x20000344
 800209c:	200003a0 	.word	0x200003a0
 80020a0:	200003a8 	.word	0x200003a8
 80020a4:	20000390 	.word	0x20000390
 80020a8:	2000028c 	.word	0x2000028c
 80020ac:	20000288 	.word	0x20000288
 80020b0:	2000039c 	.word	0x2000039c
 80020b4:	20000398 	.word	0x20000398

080020b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020be:	4b27      	ldr	r3, [pc, #156]	; (800215c <vTaskSwitchContext+0xa4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80020c6:	4b26      	ldr	r3, [pc, #152]	; (8002160 <vTaskSwitchContext+0xa8>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80020cc:	e03f      	b.n	800214e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80020ce:	4b24      	ldr	r3, [pc, #144]	; (8002160 <vTaskSwitchContext+0xa8>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020d4:	4b23      	ldr	r3, [pc, #140]	; (8002164 <vTaskSwitchContext+0xac>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80020e2:	7afb      	ldrb	r3, [r7, #11]
 80020e4:	f1c3 031f 	rsb	r3, r3, #31
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	491f      	ldr	r1, [pc, #124]	; (8002168 <vTaskSwitchContext+0xb0>)
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10a      	bne.n	8002114 <vTaskSwitchContext+0x5c>
	__asm volatile
 80020fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002102:	f383 8811 	msr	BASEPRI, r3
 8002106:	f3bf 8f6f 	isb	sy
 800210a:	f3bf 8f4f 	dsb	sy
 800210e:	607b      	str	r3, [r7, #4]
}
 8002110:	bf00      	nop
 8002112:	e7fe      	b.n	8002112 <vTaskSwitchContext+0x5a>
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4a12      	ldr	r2, [pc, #72]	; (8002168 <vTaskSwitchContext+0xb0>)
 8002120:	4413      	add	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	3308      	adds	r3, #8
 8002136:	429a      	cmp	r2, r3
 8002138:	d104      	bne.n	8002144 <vTaskSwitchContext+0x8c>
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	4a08      	ldr	r2, [pc, #32]	; (800216c <vTaskSwitchContext+0xb4>)
 800214c:	6013      	str	r3, [r2, #0]
}
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	200003b0 	.word	0x200003b0
 8002160:	2000039c 	.word	0x2000039c
 8002164:	20000390 	.word	0x20000390
 8002168:	2000028c 	.word	0x2000028c
 800216c:	20000288 	.word	0x20000288

08002170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002178:	f000 f852 	bl	8002220 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <prvIdleTask+0x28>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d9f9      	bls.n	8002178 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <prvIdleTask+0x2c>)
 8002186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	f3bf 8f4f 	dsb	sy
 8002190:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002194:	e7f0      	b.n	8002178 <prvIdleTask+0x8>
 8002196:	bf00      	nop
 8002198:	2000028c 	.word	0x2000028c
 800219c:	e000ed04 	.word	0xe000ed04

080021a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	e00c      	b.n	80021c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4a12      	ldr	r2, [pc, #72]	; (8002200 <prvInitialiseTaskLists+0x60>)
 80021b8:	4413      	add	r3, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fb3e 	bl	800183c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3301      	adds	r3, #1
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d9ef      	bls.n	80021ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80021cc:	480d      	ldr	r0, [pc, #52]	; (8002204 <prvInitialiseTaskLists+0x64>)
 80021ce:	f7ff fb35 	bl	800183c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80021d2:	480d      	ldr	r0, [pc, #52]	; (8002208 <prvInitialiseTaskLists+0x68>)
 80021d4:	f7ff fb32 	bl	800183c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <prvInitialiseTaskLists+0x6c>)
 80021da:	f7ff fb2f 	bl	800183c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80021de:	480c      	ldr	r0, [pc, #48]	; (8002210 <prvInitialiseTaskLists+0x70>)
 80021e0:	f7ff fb2c 	bl	800183c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80021e4:	480b      	ldr	r0, [pc, #44]	; (8002214 <prvInitialiseTaskLists+0x74>)
 80021e6:	f7ff fb29 	bl	800183c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <prvInitialiseTaskLists+0x78>)
 80021ec:	4a05      	ldr	r2, [pc, #20]	; (8002204 <prvInitialiseTaskLists+0x64>)
 80021ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <prvInitialiseTaskLists+0x7c>)
 80021f2:	4a05      	ldr	r2, [pc, #20]	; (8002208 <prvInitialiseTaskLists+0x68>)
 80021f4:	601a      	str	r2, [r3, #0]
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	2000028c 	.word	0x2000028c
 8002204:	20000318 	.word	0x20000318
 8002208:	2000032c 	.word	0x2000032c
 800220c:	20000348 	.word	0x20000348
 8002210:	2000035c 	.word	0x2000035c
 8002214:	20000374 	.word	0x20000374
 8002218:	20000340 	.word	0x20000340
 800221c:	20000344 	.word	0x20000344

08002220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002226:	e019      	b.n	800225c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002228:	f000 fa2c 	bl	8002684 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <prvCheckTasksWaitingTermination+0x50>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3304      	adds	r3, #4
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fb89 	bl	8001950 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <prvCheckTasksWaitingTermination+0x54>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	3b01      	subs	r3, #1
 8002244:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <prvCheckTasksWaitingTermination+0x54>)
 8002246:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <prvCheckTasksWaitingTermination+0x58>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3b01      	subs	r3, #1
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <prvCheckTasksWaitingTermination+0x58>)
 8002250:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002252:	f000 fa47 	bl	80026e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f810 	bl	800227c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <prvCheckTasksWaitingTermination+0x58>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e1      	bne.n	8002228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	2000035c 	.word	0x2000035c
 8002274:	20000388 	.word	0x20000388
 8002278:	20000370 	.word	0x20000370

0800227c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800228a:	2b00      	cmp	r3, #0
 800228c:	d108      	bne.n	80022a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fb66 	bl	8002964 <vPortFree>
				vPortFree( pxTCB );
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fb63 	bl	8002964 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800229e:	e018      	b.n	80022d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d103      	bne.n	80022b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fb5a 	bl	8002964 <vPortFree>
	}
 80022b0:	e00f      	b.n	80022d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d00a      	beq.n	80022d2 <prvDeleteTCB+0x56>
	__asm volatile
 80022bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c0:	f383 8811 	msr	BASEPRI, r3
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	60fb      	str	r3, [r7, #12]
}
 80022ce:	bf00      	nop
 80022d0:	e7fe      	b.n	80022d0 <prvDeleteTCB+0x54>
	}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <prvResetNextTaskUnblockTime+0x38>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d104      	bne.n	80022f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <prvResetNextTaskUnblockTime+0x3c>)
 80022ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80022f4:	e008      	b.n	8002308 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <prvResetNextTaskUnblockTime+0x38>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <prvResetNextTaskUnblockTime+0x3c>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	20000340 	.word	0x20000340
 8002318:	200003a8 	.word	0x200003a8

0800231c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <xTaskGetSchedulerState+0x34>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800232a:	2301      	movs	r3, #1
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	e008      	b.n	8002342 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <xTaskGetSchedulerState+0x38>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002338:	2302      	movs	r3, #2
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	e001      	b.n	8002342 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002342:	687b      	ldr	r3, [r7, #4]
	}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	20000394 	.word	0x20000394
 8002354:	200003b0 	.word	0x200003b0

08002358 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002362:	4b29      	ldr	r3, [pc, #164]	; (8002408 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002368:	4b28      	ldr	r3, [pc, #160]	; (800240c <prvAddCurrentTaskToDelayedList+0xb4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3304      	adds	r3, #4
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff faee 	bl	8001950 <uxListRemove>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10b      	bne.n	8002392 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <prvAddCurrentTaskToDelayedList+0xb4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	2201      	movs	r2, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <prvAddCurrentTaskToDelayedList+0xb8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4013      	ands	r3, r2
 800238e:	4a20      	ldr	r2, [pc, #128]	; (8002410 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002390:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002398:	d10a      	bne.n	80023b0 <prvAddCurrentTaskToDelayedList+0x58>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <prvAddCurrentTaskToDelayedList+0xb4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3304      	adds	r3, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	481a      	ldr	r0, [pc, #104]	; (8002414 <prvAddCurrentTaskToDelayedList+0xbc>)
 80023aa:	f7ff fa74 	bl	8001896 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80023ae:	e026      	b.n	80023fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <prvAddCurrentTaskToDelayedList+0xb4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d209      	bcs.n	80023dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <prvAddCurrentTaskToDelayedList+0xc0>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <prvAddCurrentTaskToDelayedList+0xb4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3304      	adds	r3, #4
 80023d2:	4619      	mov	r1, r3
 80023d4:	4610      	mov	r0, r2
 80023d6:	f7ff fa82 	bl	80018de <vListInsert>
}
 80023da:	e010      	b.n	80023fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <prvAddCurrentTaskToDelayedList+0xc4>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <prvAddCurrentTaskToDelayedList+0xb4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3304      	adds	r3, #4
 80023e6:	4619      	mov	r1, r3
 80023e8:	4610      	mov	r0, r2
 80023ea:	f7ff fa78 	bl	80018de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <prvAddCurrentTaskToDelayedList+0xc8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d202      	bcs.n	80023fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80023f8:	4a09      	ldr	r2, [pc, #36]	; (8002420 <prvAddCurrentTaskToDelayedList+0xc8>)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	6013      	str	r3, [r2, #0]
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2000038c 	.word	0x2000038c
 800240c:	20000288 	.word	0x20000288
 8002410:	20000390 	.word	0x20000390
 8002414:	20000374 	.word	0x20000374
 8002418:	20000344 	.word	0x20000344
 800241c:	20000340 	.word	0x20000340
 8002420:	200003a8 	.word	0x200003a8

08002424 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3b04      	subs	r3, #4
 8002434:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800243c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3b04      	subs	r3, #4
 8002442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f023 0201 	bic.w	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3b04      	subs	r3, #4
 8002452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002454:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <pxPortInitialiseStack+0x64>)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3b14      	subs	r3, #20
 800245e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3b04      	subs	r3, #4
 800246a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f06f 0202 	mvn.w	r2, #2
 8002472:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3b20      	subs	r3, #32
 8002478:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	0800248d 	.word	0x0800248d

0800248c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <prvTaskExitError+0x54>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800249e:	d00a      	beq.n	80024b6 <prvTaskExitError+0x2a>
	__asm volatile
 80024a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	60fb      	str	r3, [r7, #12]
}
 80024b2:	bf00      	nop
 80024b4:	e7fe      	b.n	80024b4 <prvTaskExitError+0x28>
	__asm volatile
 80024b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	60bb      	str	r3, [r7, #8]
}
 80024c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80024ca:	bf00      	nop
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0fc      	beq.n	80024cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	2000000c 	.word	0x2000000c
	...

080024f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <pxCurrentTCBConst2>)
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	6808      	ldr	r0, [r1, #0]
 80024f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024fa:	f380 8809 	msr	PSP, r0
 80024fe:	f3bf 8f6f 	isb	sy
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f380 8811 	msr	BASEPRI, r0
 800250a:	4770      	bx	lr
 800250c:	f3af 8000 	nop.w

08002510 <pxCurrentTCBConst2>:
 8002510:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop

08002518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002518:	4808      	ldr	r0, [pc, #32]	; (800253c <prvPortStartFirstTask+0x24>)
 800251a:	6800      	ldr	r0, [r0, #0]
 800251c:	6800      	ldr	r0, [r0, #0]
 800251e:	f380 8808 	msr	MSP, r0
 8002522:	f04f 0000 	mov.w	r0, #0
 8002526:	f380 8814 	msr	CONTROL, r0
 800252a:	b662      	cpsie	i
 800252c:	b661      	cpsie	f
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	df00      	svc	0
 8002538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800253a:	bf00      	nop
 800253c:	e000ed08 	.word	0xe000ed08

08002540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002546:	4b46      	ldr	r3, [pc, #280]	; (8002660 <xPortStartScheduler+0x120>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a46      	ldr	r2, [pc, #280]	; (8002664 <xPortStartScheduler+0x124>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d10a      	bne.n	8002566 <xPortStartScheduler+0x26>
	__asm volatile
 8002550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	613b      	str	r3, [r7, #16]
}
 8002562:	bf00      	nop
 8002564:	e7fe      	b.n	8002564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002566:	4b3e      	ldr	r3, [pc, #248]	; (8002660 <xPortStartScheduler+0x120>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a3f      	ldr	r2, [pc, #252]	; (8002668 <xPortStartScheduler+0x128>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d10a      	bne.n	8002586 <xPortStartScheduler+0x46>
	__asm volatile
 8002570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	60fb      	str	r3, [r7, #12]
}
 8002582:	bf00      	nop
 8002584:	e7fe      	b.n	8002584 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002586:	4b39      	ldr	r3, [pc, #228]	; (800266c <xPortStartScheduler+0x12c>)
 8002588:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	22ff      	movs	r2, #255	; 0xff
 8002596:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b31      	ldr	r3, [pc, #196]	; (8002670 <xPortStartScheduler+0x130>)
 80025ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80025ae:	4b31      	ldr	r3, [pc, #196]	; (8002674 <xPortStartScheduler+0x134>)
 80025b0:	2207      	movs	r2, #7
 80025b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025b4:	e009      	b.n	80025ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80025b6:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <xPortStartScheduler+0x134>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	4a2d      	ldr	r2, [pc, #180]	; (8002674 <xPortStartScheduler+0x134>)
 80025be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d2:	2b80      	cmp	r3, #128	; 0x80
 80025d4:	d0ef      	beq.n	80025b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80025d6:	4b27      	ldr	r3, [pc, #156]	; (8002674 <xPortStartScheduler+0x134>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f1c3 0307 	rsb	r3, r3, #7
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d00a      	beq.n	80025f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80025e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e6:	f383 8811 	msr	BASEPRI, r3
 80025ea:	f3bf 8f6f 	isb	sy
 80025ee:	f3bf 8f4f 	dsb	sy
 80025f2:	60bb      	str	r3, [r7, #8]
}
 80025f4:	bf00      	nop
 80025f6:	e7fe      	b.n	80025f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80025f8:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <xPortStartScheduler+0x134>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	4a1d      	ldr	r2, [pc, #116]	; (8002674 <xPortStartScheduler+0x134>)
 8002600:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002602:	4b1c      	ldr	r3, [pc, #112]	; (8002674 <xPortStartScheduler+0x134>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800260a:	4a1a      	ldr	r2, [pc, #104]	; (8002674 <xPortStartScheduler+0x134>)
 800260c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002616:	4b18      	ldr	r3, [pc, #96]	; (8002678 <xPortStartScheduler+0x138>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a17      	ldr	r2, [pc, #92]	; (8002678 <xPortStartScheduler+0x138>)
 800261c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <xPortStartScheduler+0x138>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a14      	ldr	r2, [pc, #80]	; (8002678 <xPortStartScheduler+0x138>)
 8002628:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800262c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800262e:	f000 f8dd 	bl	80027ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <xPortStartScheduler+0x13c>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002638:	f000 f8fc 	bl	8002834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <xPortStartScheduler+0x140>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <xPortStartScheduler+0x140>)
 8002642:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002646:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002648:	f7ff ff66 	bl	8002518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800264c:	f7ff fd34 	bl	80020b8 <vTaskSwitchContext>
	prvTaskExitError();
 8002650:	f7ff ff1c 	bl	800248c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00
 8002664:	410fc271 	.word	0x410fc271
 8002668:	410fc270 	.word	0x410fc270
 800266c:	e000e400 	.word	0xe000e400
 8002670:	200003b4 	.word	0x200003b4
 8002674:	200003b8 	.word	0x200003b8
 8002678:	e000ed20 	.word	0xe000ed20
 800267c:	2000000c 	.word	0x2000000c
 8002680:	e000ef34 	.word	0xe000ef34

08002684 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
	__asm volatile
 800268a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	607b      	str	r3, [r7, #4]
}
 800269c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800269e:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <vPortEnterCritical+0x58>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3301      	adds	r3, #1
 80026a4:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <vPortEnterCritical+0x58>)
 80026a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <vPortEnterCritical+0x58>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10f      	bne.n	80026d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <vPortEnterCritical+0x5c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	603b      	str	r3, [r7, #0]
}
 80026cc:	bf00      	nop
 80026ce:	e7fe      	b.n	80026ce <vPortEnterCritical+0x4a>
	}
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	2000000c 	.word	0x2000000c
 80026e0:	e000ed04 	.word	0xe000ed04

080026e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <vPortExitCritical+0x50>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10a      	bne.n	8002708 <vPortExitCritical+0x24>
	__asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	607b      	str	r3, [r7, #4]
}
 8002704:	bf00      	nop
 8002706:	e7fe      	b.n	8002706 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <vPortExitCritical+0x50>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3b01      	subs	r3, #1
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <vPortExitCritical+0x50>)
 8002710:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <vPortExitCritical+0x50>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <vPortExitCritical+0x42>
 800271a:	2300      	movs	r3, #0
 800271c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002724:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	2000000c 	.word	0x2000000c
	...

08002740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002740:	f3ef 8009 	mrs	r0, PSP
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <pxCurrentTCBConst>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	f01e 0f10 	tst.w	lr, #16
 8002750:	bf08      	it	eq
 8002752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800275a:	6010      	str	r0, [r2, #0]
 800275c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002764:	f380 8811 	msr	BASEPRI, r0
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f7ff fca2 	bl	80020b8 <vTaskSwitchContext>
 8002774:	f04f 0000 	mov.w	r0, #0
 8002778:	f380 8811 	msr	BASEPRI, r0
 800277c:	bc09      	pop	{r0, r3}
 800277e:	6819      	ldr	r1, [r3, #0]
 8002780:	6808      	ldr	r0, [r1, #0]
 8002782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002786:	f01e 0f10 	tst.w	lr, #16
 800278a:	bf08      	it	eq
 800278c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002790:	f380 8809 	msr	PSP, r0
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	f3af 8000 	nop.w

080027a0 <pxCurrentTCBConst>:
 80027a0:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop

080027a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
	__asm volatile
 80027ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	607b      	str	r3, [r7, #4]
}
 80027c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80027c2:	f7ff fbc1 	bl	8001f48 <xTaskIncrementTick>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <xPortSysTickHandler+0x40>)
 80027ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	2300      	movs	r3, #0
 80027d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	f383 8811 	msr	BASEPRI, r3
}
 80027de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	e000ed04 	.word	0xe000ed04

080027ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <vPortSetupTimerInterrupt+0x34>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <vPortSetupTimerInterrupt+0x38>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <vPortSetupTimerInterrupt+0x3c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <vPortSetupTimerInterrupt+0x40>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	4a09      	ldr	r2, [pc, #36]	; (8002830 <vPortSetupTimerInterrupt+0x44>)
 800280a:	3b01      	subs	r3, #1
 800280c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <vPortSetupTimerInterrupt+0x34>)
 8002810:	2207      	movs	r2, #7
 8002812:	601a      	str	r2, [r3, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000e010 	.word	0xe000e010
 8002824:	e000e018 	.word	0xe000e018
 8002828:	20000000 	.word	0x20000000
 800282c:	51eb851f 	.word	0x51eb851f
 8002830:	e000e014 	.word	0xe000e014

08002834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002834:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002844 <vPortEnableVFP+0x10>
 8002838:	6801      	ldr	r1, [r0, #0]
 800283a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800283e:	6001      	str	r1, [r0, #0]
 8002840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002842:	bf00      	nop
 8002844:	e000ed88 	.word	0xe000ed88

08002848 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8002854:	f7ff face 	bl	8001df4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8002858:	4b3e      	ldr	r3, [pc, #248]	; (8002954 <pvPortMalloc+0x10c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8002860:	f000 f8ba 	bl	80029d8 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8002864:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <pvPortMalloc+0x10c>)
 8002866:	2201      	movs	r2, #1
 8002868:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00e      	beq.n	800288e <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8002870:	2308      	movs	r3, #8
 8002872:	461a      	mov	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4413      	add	r3, r2
 8002878:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f023 0307 	bic.w	r3, r3, #7
 800288a:	3308      	adds	r3, #8
 800288c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d057      	beq.n	8002944 <pvPortMalloc+0xfc>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f643 32f7 	movw	r2, #15351	; 0x3bf7
 800289a:	4293      	cmp	r3, r2
 800289c:	d852      	bhi.n	8002944 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 800289e:	4b2e      	ldr	r3, [pc, #184]	; (8002958 <pvPortMalloc+0x110>)
 80028a0:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 80028a2:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <pvPortMalloc+0x110>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028a8:	e004      	b.n	80028b4 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d903      	bls.n	80028c6 <pvPortMalloc+0x7e>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f1      	bne.n	80028aa <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4a24      	ldr	r2, [pc, #144]	; (800295c <pvPortMalloc+0x114>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d03a      	beq.n	8002944 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2208      	movs	r2, #8
 80028d4:	4413      	add	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2208      	movs	r2, #8
 80028ea:	0052      	lsls	r2, r2, #1
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d922      	bls.n	8002936 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	1ad2      	subs	r2, r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <pvPortMalloc+0x110>)
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	e002      	b.n	800291c <pvPortMalloc+0xd4>
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	429a      	cmp	r2, r3
 8002926:	d8f6      	bhi.n	8002916 <pvPortMalloc+0xce>
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <pvPortMalloc+0x118>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	4a07      	ldr	r2, [pc, #28]	; (8002960 <pvPortMalloc+0x118>)
 8002942:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002944:	f7ff fa64 	bl	8001e10 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8002948:	697b      	ldr	r3, [r7, #20]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20003fcc 	.word	0x20003fcc
 8002958:	20003fbc 	.word	0x20003fbc
 800295c:	20003fc4 	.word	0x20003fc4
 8002960:	20000010 	.word	0x20000010

08002964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d027      	beq.n	80029c6 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8002976:	2308      	movs	r3, #8
 8002978:	425b      	negs	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8002984:	f7ff fa36 	bl	8001df4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <vPortFree+0x6c>)
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	e002      	b.n	800299a <vPortFree+0x36>
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d8f6      	bhi.n	8002994 <vPortFree+0x30>
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <vPortFree+0x70>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4413      	add	r3, r2
 80029be:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <vPortFree+0x70>)
 80029c0:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 80029c2:	f7ff fa25 	bl	8001e10 <xTaskResumeAll>
	}
}
 80029c6:	bf00      	nop
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20003fbc 	.word	0x20003fbc
 80029d4:	20000010 	.word	0x20000010

080029d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <prvHeapInit+0x48>)
 80029e0:	f023 0307 	bic.w	r3, r3, #7
 80029e4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80029e6:	4a0f      	ldr	r2, [pc, #60]	; (8002a24 <prvHeapInit+0x4c>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80029ec:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <prvHeapInit+0x4c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <prvHeapInit+0x50>)
 80029f4:	f643 32f8 	movw	r2, #15352	; 0x3bf8
 80029f8:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <prvHeapInit+0x50>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f643 32f8 	movw	r2, #15352	; 0x3bf8
 8002a0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <prvHeapInit+0x50>)
 8002a10:	601a      	str	r2, [r3, #0]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	200003c4 	.word	0x200003c4
 8002a24:	20003fbc 	.word	0x20003fbc
 8002a28:	20003fc4 	.word	0x20003fc4

08002a2c <__libc_init_array>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	4d0d      	ldr	r5, [pc, #52]	; (8002a64 <__libc_init_array+0x38>)
 8002a30:	4c0d      	ldr	r4, [pc, #52]	; (8002a68 <__libc_init_array+0x3c>)
 8002a32:	1b64      	subs	r4, r4, r5
 8002a34:	10a4      	asrs	r4, r4, #2
 8002a36:	2600      	movs	r6, #0
 8002a38:	42a6      	cmp	r6, r4
 8002a3a:	d109      	bne.n	8002a50 <__libc_init_array+0x24>
 8002a3c:	4d0b      	ldr	r5, [pc, #44]	; (8002a6c <__libc_init_array+0x40>)
 8002a3e:	4c0c      	ldr	r4, [pc, #48]	; (8002a70 <__libc_init_array+0x44>)
 8002a40:	f000 f820 	bl	8002a84 <_init>
 8002a44:	1b64      	subs	r4, r4, r5
 8002a46:	10a4      	asrs	r4, r4, #2
 8002a48:	2600      	movs	r6, #0
 8002a4a:	42a6      	cmp	r6, r4
 8002a4c:	d105      	bne.n	8002a5a <__libc_init_array+0x2e>
 8002a4e:	bd70      	pop	{r4, r5, r6, pc}
 8002a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a54:	4798      	blx	r3
 8002a56:	3601      	adds	r6, #1
 8002a58:	e7ee      	b.n	8002a38 <__libc_init_array+0xc>
 8002a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a5e:	4798      	blx	r3
 8002a60:	3601      	adds	r6, #1
 8002a62:	e7f2      	b.n	8002a4a <__libc_init_array+0x1e>
 8002a64:	08002ac4 	.word	0x08002ac4
 8002a68:	08002ac4 	.word	0x08002ac4
 8002a6c:	08002ac4 	.word	0x08002ac4
 8002a70:	08002ac8 	.word	0x08002ac8

08002a74 <memset>:
 8002a74:	4402      	add	r2, r0
 8002a76:	4603      	mov	r3, r0
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d100      	bne.n	8002a7e <memset+0xa>
 8002a7c:	4770      	bx	lr
 8002a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a82:	e7f9      	b.n	8002a78 <memset+0x4>

08002a84 <_init>:
 8002a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a86:	bf00      	nop
 8002a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8a:	bc08      	pop	{r3}
 8002a8c:	469e      	mov	lr, r3
 8002a8e:	4770      	bx	lr

08002a90 <_fini>:
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a92:	bf00      	nop
 8002a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a96:	bc08      	pop	{r3}
 8002a98:	469e      	mov	lr, r3
 8002a9a:	4770      	bx	lr
