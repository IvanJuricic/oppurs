
Lab_FreeRTOS_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003958  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003ae8  08003ae8  00013ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b20  08003b20  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b28  08003b28  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b28  08003b28  00013b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00003fd0  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003fe4  20003fe4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c28  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d92  00000000  00000000  00028c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000820  00000000  00000000  0002aa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000728  00000000  00000000  0002b220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a61  00000000  00000000  0002b948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d61  00000000  00000000  0004c3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c78ee  00000000  00000000  0005610a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d9f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e9c  00000000  00000000  0011da48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ad0 	.word	0x08003ad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08003ad0 	.word	0x08003ad0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000030 	.word	0x20000030
 8000504:	20000084 	.word	0x20000084

08000508 <gpio_led_state>:

/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* USER CODE BEGIN 0 */
void gpio_led_state(uint8_t LED_ID, uint8_t state) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	460a      	mov	r2, r1
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	4613      	mov	r3, r2
 8000516:	71bb      	strb	r3, [r7, #6]
  GPIO_PinState pinState;

  pinState = (state == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	2b01      	cmp	r3, #1
 800051c:	bf0c      	ite	eq
 800051e:	2301      	moveq	r3, #1
 8000520:	2300      	movne	r3, #0
 8000522:	b2db      	uxtb	r3, r3
 8000524:	73fb      	strb	r3, [r7, #15]

  switch (LED_ID)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	3b01      	subs	r3, #1
 800052a:	2b03      	cmp	r3, #3
 800052c:	d82a      	bhi.n	8000584 <gpio_led_state+0x7c>
 800052e:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <gpio_led_state+0x2c>)
 8000530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000534:	08000545 	.word	0x08000545
 8000538:	08000555 	.word	0x08000555
 800053c:	08000565 	.word	0x08000565
 8000540:	08000575 	.word	0x08000575
  {
  case LED3_ORANGE_ID:
    HAL_GPIO_WritePin(GPIOD, LED3_ORANGE_PinNumber, pinState );
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	461a      	mov	r2, r3
 8000548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054c:	4810      	ldr	r0, [pc, #64]	; (8000590 <gpio_led_state+0x88>)
 800054e:	f000 fdf5 	bl	800113c <HAL_GPIO_WritePin>
    break;
 8000552:	e018      	b.n	8000586 <gpio_led_state+0x7e>

  case LED4_GREEN_ID:
    HAL_GPIO_WritePin(GPIOD, LED4_GREEN_PinNumber, pinState );
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	461a      	mov	r2, r3
 8000558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <gpio_led_state+0x88>)
 800055e:	f000 fded 	bl	800113c <HAL_GPIO_WritePin>
    break;
 8000562:	e010      	b.n	8000586 <gpio_led_state+0x7e>

  case LED5_RED_ID:
    HAL_GPIO_WritePin(GPIOD, LED5_RED_PinNumber, pinState );
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	461a      	mov	r2, r3
 8000568:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800056c:	4808      	ldr	r0, [pc, #32]	; (8000590 <gpio_led_state+0x88>)
 800056e:	f000 fde5 	bl	800113c <HAL_GPIO_WritePin>
    break;
 8000572:	e008      	b.n	8000586 <gpio_led_state+0x7e>

  case LED6_BLUE_ID:
    HAL_GPIO_WritePin(GPIOD, LED6_BLUE_PinNumber, pinState );
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	461a      	mov	r2, r3
 8000578:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <gpio_led_state+0x88>)
 800057e:	f000 fddd 	bl	800113c <HAL_GPIO_WritePin>
    break;
 8000582:	e000      	b.n	8000586 <gpio_led_state+0x7e>

  default:
    break;
 8000584:	bf00      	nop
  }
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40020c00 	.word	0x40020c00

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	4b2b      	ldr	r3, [pc, #172]	; (800065c <MX_GPIO_Init+0xc8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a2a      	ldr	r2, [pc, #168]	; (800065c <MX_GPIO_Init+0xc8>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b28      	ldr	r3, [pc, #160]	; (800065c <MX_GPIO_Init+0xc8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	4b24      	ldr	r3, [pc, #144]	; (800065c <MX_GPIO_Init+0xc8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a23      	ldr	r2, [pc, #140]	; (800065c <MX_GPIO_Init+0xc8>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <MX_GPIO_Init+0xc8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <MX_GPIO_Init+0xc8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a1c      	ldr	r2, [pc, #112]	; (800065c <MX_GPIO_Init+0xc8>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <MX_GPIO_Init+0xc8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000604:	4816      	ldr	r0, [pc, #88]	; (8000660 <MX_GPIO_Init+0xcc>)
 8000606:	f000 fd99 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	4811      	ldr	r0, [pc, #68]	; (8000664 <MX_GPIO_Init+0xd0>)
 8000620:	f000 fbf0 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000624:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <MX_GPIO_Init+0xcc>)
 800063e:	f000 fbe1 	bl	8000e04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2105      	movs	r1, #5
 8000646:	2006      	movs	r0, #6
 8000648:	f000 fb97 	bl	8000d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800064c:	2006      	movs	r0, #6
 800064e:	f000 fbb0 	bl	8000db2 <HAL_NVIC_EnableIRQ>

}
 8000652:	bf00      	nop
 8000654:	3720      	adds	r7, #32
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40020c00 	.word	0x40020c00
 8000664:	40020000 	.word	0x40020000

08000668 <main>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af02      	add	r7, sp, #8
	HAL_Init();
 800066e:	f000 fa13 	bl	8000a98 <HAL_Init>
	SystemClock_Config();
 8000672:	f000 f821 	bl	80006b8 <SystemClock_Config>
	MX_GPIO_Init();
 8000676:	f7ff ff8d 	bl	8000594 <MX_GPIO_Init>
	xBinarySemaphore = xSemaphoreCreateBinary();
 800067a:	2203      	movs	r2, #3
 800067c:	2100      	movs	r1, #0
 800067e:	2001      	movs	r0, #1
 8000680:	f001 fb0e 	bl	8001ca0 <xQueueGenericCreate>
 8000684:	4603      	mov	r3, r0
 8000686:	4a09      	ldr	r2, [pc, #36]	; (80006ac <main+0x44>)
 8000688:	6013      	str	r3, [r2, #0]
	if(xBinarySemaphore != NULL) {
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <main+0x44>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00b      	beq.n	80006aa <main+0x42>
		xTaskCreate(vTask1, (const char *)"TASK_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000692:	2300      	movs	r3, #0
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2300      	movs	r3, #0
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	4904      	ldr	r1, [pc, #16]	; (80006b0 <main+0x48>)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <main+0x4c>)
 80006a2:	f001 fec0 	bl	8002426 <xTaskCreate>
		vTaskStartScheduler();
 80006a6:	f002 f8b9 	bl	800281c <vTaskStartScheduler>
	}

	while(1);
 80006aa:	e7fe      	b.n	80006aa <main+0x42>
 80006ac:	20000294 	.word	0x20000294
 80006b0:	08003ae8 	.word	0x08003ae8
 80006b4:	080007a5 	.word	0x080007a5

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 f9fa 	bl	8003ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b21      	ldr	r3, [pc, #132]	; (8000768 <SystemClock_Config+0xb0>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a20      	ldr	r2, [pc, #128]	; (8000768 <SystemClock_Config+0xb0>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <SystemClock_Config+0xb0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <SystemClock_Config+0xb4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a1a      	ldr	r2, [pc, #104]	; (800076c <SystemClock_Config+0xb4>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <SystemClock_Config+0xb4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000714:	2301      	movs	r3, #1
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800071e:	2300      	movs	r3, #0
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fd3a 	bl	80011a0 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000732:	f000 f91a 	bl	800096a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800073a:	2301      	movs	r3, #1
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f000 ff9d 	bl	8001690 <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800075c:	f000 f905 	bl	800096a <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3750      	adds	r7, #80	; 0x50
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_BUTTON_PIN) {
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d109      	bne.n	8000794 <HAL_GPIO_EXTI_Callback+0x24>
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000780:	2006      	movs	r0, #6
 8000782:	f000 fb24 	bl	8000dce <HAL_NVIC_DisableIRQ>
		buttonPressed = 1;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000788:	2201      	movs	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800078c:	2006      	movs	r0, #6
 800078e:	f000 fb10 	bl	8000db2 <HAL_NVIC_EnableIRQ>
	}
	else {
		__NOP();
	}
}
 8000792:	e000      	b.n	8000796 <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 8000794:	bf00      	nop
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000290 	.word	0x20000290

080007a4 <vTask1>:

void vTask1(void *pvParameters) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	6078      	str	r0, [r7, #4]
	uint32_t tasksCount, led_state;
	tasksCount = 1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
	led_state = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
	xSemaphoreGive(xBinarySemaphore);
 80007b4:	4b3f      	ldr	r3, [pc, #252]	; (80008b4 <vTask1+0x110>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	2300      	movs	r3, #0
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	f001 fac9 	bl	8001d54 <xQueueGenericSend>
	while(1) {
		vTaskDelay(DELAY_MS / portTICK_RATE_MS);
 80007c2:	2032      	movs	r0, #50	; 0x32
 80007c4:	f001 fff6 	bl	80027b4 <vTaskDelay>
		gpio_led_state(LED4_GREEN_ID, led_state);
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	2002      	movs	r0, #2
 80007d0:	f7ff fe9a 	bl	8000508 <gpio_led_state>
		led_state = (led_state == 1) ? 0 : 1;
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	bf14      	ite	ne
 80007da:	2301      	movne	r3, #1
 80007dc:	2300      	moveq	r3, #0
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	60bb      	str	r3, [r7, #8]
		xSemaphoreTake(xBinarySemaphore, 1 );
 80007e2:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <vTask1+0x110>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2101      	movs	r1, #1
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fbb1 	bl	8001f50 <xQueueSemaphoreTake>
		if(buttonPressed) {
 80007ee:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <vTask1+0x114>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d05b      	beq.n	80008ae <vTask1+0x10a>
			buttonPressed = 0;
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <vTask1+0x114>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(xBinarySemaphore);
 80007fc:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <vTask1+0x110>)
 80007fe:	6818      	ldr	r0, [r3, #0]
 8000800:	2300      	movs	r3, #0
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	f001 faa5 	bl	8001d54 <xQueueGenericSend>
			tasksCount++;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3301      	adds	r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
			if(tasksCount == 5) {
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b05      	cmp	r3, #5
 8000814:	d11d      	bne.n	8000852 <vTask1+0xae>
				vTaskDelete(xTaskHandle2);
 8000816:	4b29      	ldr	r3, [pc, #164]	; (80008bc <vTask1+0x118>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f001 ff3a 	bl	8002694 <vTaskDelete>
				vTaskDelete(xTaskHandle3);
 8000820:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <vTask1+0x11c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f001 ff35 	bl	8002694 <vTaskDelete>
				vTaskDelete(xTaskHandle4);
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <vTask1+0x120>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f001 ff30 	bl	8002694 <vTaskDelete>
				gpio_led_state(LED3_ORANGE_ID, 0);
 8000834:	2100      	movs	r1, #0
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff fe66 	bl	8000508 <gpio_led_state>
				gpio_led_state(LED5_RED_ID, 0);
 800083c:	2100      	movs	r1, #0
 800083e:	2003      	movs	r0, #3
 8000840:	f7ff fe62 	bl	8000508 <gpio_led_state>
				gpio_led_state(LED6_BLUE_ID, 0);
 8000844:	2100      	movs	r1, #0
 8000846:	2004      	movs	r0, #4
 8000848:	f7ff fe5e 	bl	8000508 <gpio_led_state>

				tasksCount = 1;
 800084c:	2301      	movs	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e7b7      	b.n	80007c2 <vTask1+0x1e>
			} else {
				switch (tasksCount) {
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2b04      	cmp	r3, #4
 8000856:	d01f      	beq.n	8000898 <vTask1+0xf4>
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b04      	cmp	r3, #4
 800085c:	d8b1      	bhi.n	80007c2 <vTask1+0x1e>
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2b02      	cmp	r3, #2
 8000862:	d003      	beq.n	800086c <vTask1+0xc8>
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b03      	cmp	r3, #3
 8000868:	d00b      	beq.n	8000882 <vTask1+0xde>
 800086a:	e021      	b.n	80008b0 <vTask1+0x10c>
					case 2:
						xTaskCreate ( vTask2 , " TASK2 ", configMINIMAL_STACK_SIZE ,
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <vTask1+0x118>)
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	2302      	movs	r3, #2
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2300      	movs	r3, #0
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	4913      	ldr	r1, [pc, #76]	; (80008c8 <vTask1+0x124>)
 800087a:	4814      	ldr	r0, [pc, #80]	; (80008cc <vTask1+0x128>)
 800087c:	f001 fdd3 	bl	8002426 <xTaskCreate>
								NULL , 2, & xTaskHandle2 );
						break ;
 8000880:	e016      	b.n	80008b0 <vTask1+0x10c>
					case 3:
						xTaskCreate ( vTask3 , " TASK3 ", configMINIMAL_STACK_SIZE ,
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <vTask1+0x11c>)
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	2303      	movs	r3, #3
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2300      	movs	r3, #0
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	4910      	ldr	r1, [pc, #64]	; (80008d0 <vTask1+0x12c>)
 8000890:	4810      	ldr	r0, [pc, #64]	; (80008d4 <vTask1+0x130>)
 8000892:	f001 fdc8 	bl	8002426 <xTaskCreate>
								NULL , 3, & xTaskHandle3 );
						break ;
 8000896:	e00b      	b.n	80008b0 <vTask1+0x10c>
					case 4:
						xTaskCreate ( vTask4 , " TASK4 ", configMINIMAL_STACK_SIZE ,
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <vTask1+0x120>)
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	2304      	movs	r3, #4
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2300      	movs	r3, #0
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	490c      	ldr	r1, [pc, #48]	; (80008d8 <vTask1+0x134>)
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <vTask1+0x138>)
 80008a8:	f001 fdbd 	bl	8002426 <xTaskCreate>
								NULL , 4, & xTaskHandle4 );
						break ;
 80008ac:	e000      	b.n	80008b0 <vTask1+0x10c>
				}
			}
 80008ae:	bf00      	nop
		vTaskDelay(DELAY_MS / portTICK_RATE_MS);
 80008b0:	e787      	b.n	80007c2 <vTask1+0x1e>
 80008b2:	bf00      	nop
 80008b4:	20000294 	.word	0x20000294
 80008b8:	20000290 	.word	0x20000290
 80008bc:	20000284 	.word	0x20000284
 80008c0:	20000288 	.word	0x20000288
 80008c4:	2000028c 	.word	0x2000028c
 80008c8:	08003af0 	.word	0x08003af0
 80008cc:	080008e1 	.word	0x080008e1
 80008d0:	08003af8 	.word	0x08003af8
 80008d4:	0800090f 	.word	0x0800090f
 80008d8:	08003b00 	.word	0x08003b00
 80008dc:	0800093d 	.word	0x0800093d

080008e0 <vTask2>:
		}
	}
}


void vTask2(void *pvParameters) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	uint32_t led_state;
	led_state = 1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
	while(1) {
		vTaskDelay(DELAY_MS / portTICK_RATE_MS);
 80008ec:	2032      	movs	r0, #50	; 0x32
 80008ee:	f001 ff61 	bl	80027b4 <vTaskDelay>
		gpio_led_state(LED3_ORANGE_ID, led_state);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4619      	mov	r1, r3
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff fe05 	bl	8000508 <gpio_led_state>
		led_state = (led_state == 1) ? 0 : 1;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	2b01      	cmp	r3, #1
 8000902:	bf14      	ite	ne
 8000904:	2301      	movne	r3, #1
 8000906:	2300      	moveq	r3, #0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	60fb      	str	r3, [r7, #12]
		vTaskDelay(DELAY_MS / portTICK_RATE_MS);
 800090c:	e7ee      	b.n	80008ec <vTask2+0xc>

0800090e <vTask3>:
	}
}

void vTask3(void *pvParameters) {
 800090e:	b580      	push	{r7, lr}
 8000910:	b084      	sub	sp, #16
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	uint32_t led_state;
	led_state = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
	while(1) {
		vTaskDelay(DELAY_MS / portTICK_RATE_MS);
 800091a:	2032      	movs	r0, #50	; 0x32
 800091c:	f001 ff4a 	bl	80027b4 <vTaskDelay>
		gpio_led_state(LED5_RED_ID, led_state);
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4619      	mov	r1, r3
 8000926:	2003      	movs	r0, #3
 8000928:	f7ff fdee 	bl	8000508 <gpio_led_state>
		led_state = (led_state == 1) ? 0 : 1;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2b01      	cmp	r3, #1
 8000930:	bf14      	ite	ne
 8000932:	2301      	movne	r3, #1
 8000934:	2300      	moveq	r3, #0
 8000936:	b2db      	uxtb	r3, r3
 8000938:	60fb      	str	r3, [r7, #12]
		vTaskDelay(DELAY_MS / portTICK_RATE_MS);
 800093a:	e7ee      	b.n	800091a <vTask3+0xc>

0800093c <vTask4>:
	}
}

void vTask4(void *pvParameters) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	uint32_t led_state;
	led_state = 1;
 8000944:	2301      	movs	r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
	while(1) {
		vTaskDelay(DELAY_MS / portTICK_RATE_MS);
 8000948:	2032      	movs	r0, #50	; 0x32
 800094a:	f001 ff33 	bl	80027b4 <vTaskDelay>
		gpio_led_state(LED6_BLUE_ID, led_state);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4619      	mov	r1, r3
 8000954:	2004      	movs	r0, #4
 8000956:	f7ff fdd7 	bl	8000508 <gpio_led_state>
		led_state = (led_state == 1) ? 0 : 1;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2b01      	cmp	r3, #1
 800095e:	bf14      	ite	ne
 8000960:	2301      	movne	r3, #1
 8000962:	2300      	moveq	r3, #0
 8000964:	b2db      	uxtb	r3, r3
 8000966:	60fb      	str	r3, [r7, #12]
		vTaskDelay(DELAY_MS / portTICK_RATE_MS);
 8000968:	e7ee      	b.n	8000948 <vTask4+0xc>

0800096a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096e:	b672      	cpsid	i
}
 8000970:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000972:	e7fe      	b.n	8000972 <Error_Handler+0x8>

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_MspInit+0x54>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <HAL_MspInit+0x54>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_MspInit+0x54>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_MspInit+0x54>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_MspInit+0x54>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_MspInit+0x54>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	210f      	movs	r1, #15
 80009b6:	f06f 0001 	mvn.w	r0, #1
 80009ba:	f000 f9de 	bl	8000d7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f89e 	bl	8000b3c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a00:	f002 fb0a 	bl	8003018 <xTaskGetSchedulerState>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d001      	beq.n	8000a0e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a0a:	f002 fee5 	bl	80037d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a16:	2001      	movs	r0, #1
 8000a18:	f000 fbaa 	bl	8001170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a4a:	490e      	ldr	r1, [pc, #56]	; (8000a84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a60:	4c0b      	ldr	r4, [pc, #44]	; (8000a90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a6e:	f7ff ffd7 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f002 fff3 	bl	8003a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fdf7 	bl	8000668 <main>
  bx  lr    
 8000a7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a88:	08003b30 	.word	0x08003b30
  ldr r2, =_sbss
 8000a8c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a90:	20003fe4 	.word	0x20003fe4

08000a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <HAL_Init+0x40>)
 8000aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_Init+0x40>)
 8000aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x40>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f94f 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff ff52 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023c00 	.word	0x40023c00

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f975 	bl	8000dea <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b18:	f000 f92f 	bl	8000d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000298 	.word	0x20000298

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000298 	.word	0x20000298

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <__NVIC_EnableIRQ+0x38>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db12      	blt.n	8000c54 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	490a      	ldr	r1, [pc, #40]	; (8000c60 <__NVIC_DisableIRQ+0x44>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	3320      	adds	r3, #32
 8000c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c48:	f3bf 8f4f 	dsb	sy
}
 8000c4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c4e:	f3bf 8f6f 	isb	sy
}
 8000c52:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d30:	d301      	bcc.n	8000d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00f      	b.n	8000d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <SysTick_Config+0x40>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3e:	210f      	movs	r1, #15
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d44:	f7ff ff8e 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SysTick_Config+0x40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SysTick_Config+0x40>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff05 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff1a 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff8e 	bl	8000cb8 <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5d 	bl	8000c64 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff0d 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff1d 	bl	8000c1c <__NVIC_DisableIRQ>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ff94 	bl	8000d20 <SysTick_Config>
 8000df8:	4603      	mov	r3, r0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	e16b      	b.n	80010f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f040 815a 	bne.w	80010f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d005      	beq.n	8000e56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d130      	bne.n	8000eb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	091b      	lsrs	r3, r3, #4
 8000ea2:	f003 0201 	and.w	r2, r3, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d017      	beq.n	8000ef4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d123      	bne.n	8000f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	08da      	lsrs	r2, r3, #3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3208      	adds	r2, #8
 8000f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	69b9      	ldr	r1, [r7, #24]
 8000f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0203 	and.w	r2, r3, #3
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80b4 	beq.w	80010f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b60      	ldr	r3, [pc, #384]	; (8001110 <HAL_GPIO_Init+0x30c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a5f      	ldr	r2, [pc, #380]	; (8001110 <HAL_GPIO_Init+0x30c>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b5d      	ldr	r3, [pc, #372]	; (8001110 <HAL_GPIO_Init+0x30c>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa6:	4a5b      	ldr	r2, [pc, #364]	; (8001114 <HAL_GPIO_Init+0x310>)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a52      	ldr	r2, [pc, #328]	; (8001118 <HAL_GPIO_Init+0x314>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d02b      	beq.n	800102a <HAL_GPIO_Init+0x226>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a51      	ldr	r2, [pc, #324]	; (800111c <HAL_GPIO_Init+0x318>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d025      	beq.n	8001026 <HAL_GPIO_Init+0x222>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a50      	ldr	r2, [pc, #320]	; (8001120 <HAL_GPIO_Init+0x31c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01f      	beq.n	8001022 <HAL_GPIO_Init+0x21e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4f      	ldr	r2, [pc, #316]	; (8001124 <HAL_GPIO_Init+0x320>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <HAL_GPIO_Init+0x21a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4e      	ldr	r2, [pc, #312]	; (8001128 <HAL_GPIO_Init+0x324>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0x216>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4d      	ldr	r2, [pc, #308]	; (800112c <HAL_GPIO_Init+0x328>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d00d      	beq.n	8001016 <HAL_GPIO_Init+0x212>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4c      	ldr	r2, [pc, #304]	; (8001130 <HAL_GPIO_Init+0x32c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d007      	beq.n	8001012 <HAL_GPIO_Init+0x20e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4b      	ldr	r2, [pc, #300]	; (8001134 <HAL_GPIO_Init+0x330>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_GPIO_Init+0x20a>
 800100a:	2307      	movs	r3, #7
 800100c:	e00e      	b.n	800102c <HAL_GPIO_Init+0x228>
 800100e:	2308      	movs	r3, #8
 8001010:	e00c      	b.n	800102c <HAL_GPIO_Init+0x228>
 8001012:	2306      	movs	r3, #6
 8001014:	e00a      	b.n	800102c <HAL_GPIO_Init+0x228>
 8001016:	2305      	movs	r3, #5
 8001018:	e008      	b.n	800102c <HAL_GPIO_Init+0x228>
 800101a:	2304      	movs	r3, #4
 800101c:	e006      	b.n	800102c <HAL_GPIO_Init+0x228>
 800101e:	2303      	movs	r3, #3
 8001020:	e004      	b.n	800102c <HAL_GPIO_Init+0x228>
 8001022:	2302      	movs	r3, #2
 8001024:	e002      	b.n	800102c <HAL_GPIO_Init+0x228>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <HAL_GPIO_Init+0x228>
 800102a:	2300      	movs	r3, #0
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	f002 0203 	and.w	r2, r2, #3
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	4093      	lsls	r3, r2
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800103c:	4935      	ldr	r1, [pc, #212]	; (8001114 <HAL_GPIO_Init+0x310>)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104a:	4b3b      	ldr	r3, [pc, #236]	; (8001138 <HAL_GPIO_Init+0x334>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800106e:	4a32      	ldr	r2, [pc, #200]	; (8001138 <HAL_GPIO_Init+0x334>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001074:	4b30      	ldr	r3, [pc, #192]	; (8001138 <HAL_GPIO_Init+0x334>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001098:	4a27      	ldr	r2, [pc, #156]	; (8001138 <HAL_GPIO_Init+0x334>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <HAL_GPIO_Init+0x334>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c2:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_GPIO_Init+0x334>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_GPIO_Init+0x334>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <HAL_GPIO_Init+0x334>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	f67f ae90 	bls.w	8000e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40013800 	.word	0x40013800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	40020800 	.word	0x40020800
 8001124:	40020c00 	.word	0x40020c00
 8001128:	40021000 	.word	0x40021000
 800112c:	40021400 	.word	0x40021400
 8001130:	40021800 	.word	0x40021800
 8001134:	40021c00 	.word	0x40021c00
 8001138:	40013c00 	.word	0x40013c00

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001158:	e003      	b.n	8001162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	619a      	str	r2, [r3, #24]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800117c:	695a      	ldr	r2, [r3, #20]
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	4013      	ands	r3, r2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff faee 	bl	8000770 <HAL_GPIO_EXTI_Callback>
  }
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40013c00 	.word	0x40013c00

080011a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e267      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d075      	beq.n	80012aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011be:	4b88      	ldr	r3, [pc, #544]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d00c      	beq.n	80011e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ca:	4b85      	ldr	r3, [pc, #532]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d112      	bne.n	80011fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d6:	4b82      	ldr	r3, [pc, #520]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011e2:	d10b      	bne.n	80011fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	4b7e      	ldr	r3, [pc, #504]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d05b      	beq.n	80012a8 <HAL_RCC_OscConfig+0x108>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d157      	bne.n	80012a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e242      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001204:	d106      	bne.n	8001214 <HAL_RCC_OscConfig+0x74>
 8001206:	4b76      	ldr	r3, [pc, #472]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a75      	ldr	r2, [pc, #468]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e01d      	b.n	8001250 <HAL_RCC_OscConfig+0xb0>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x98>
 800121e:	4b70      	ldr	r3, [pc, #448]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6f      	ldr	r2, [pc, #444]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b6d      	ldr	r3, [pc, #436]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6c      	ldr	r2, [pc, #432]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e00b      	b.n	8001250 <HAL_RCC_OscConfig+0xb0>
 8001238:	4b69      	ldr	r3, [pc, #420]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a68      	ldr	r2, [pc, #416]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800123e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b66      	ldr	r3, [pc, #408]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a65      	ldr	r2, [pc, #404]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fc84 	bl	8000b64 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fc80 	bl	8000b64 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	; 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e207      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b5b      	ldr	r3, [pc, #364]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0xc0>
 800127e:	e014      	b.n	80012aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fc70 	bl	8000b64 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fc6c 	bl	8000b64 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e1f3      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	4b51      	ldr	r3, [pc, #324]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0xe8>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d063      	beq.n	800137e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00b      	beq.n	80012da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c2:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d11c      	bne.n	8001308 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ce:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d116      	bne.n	8001308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_RCC_OscConfig+0x152>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e1c7      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f2:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4937      	ldr	r1, [pc, #220]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	e03a      	b.n	800137e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d020      	beq.n	8001352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001310:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <HAL_RCC_OscConfig+0x244>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001316:	f7ff fc25 	bl	8000b64 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800131e:	f7ff fc21 	bl	8000b64 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e1a8      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4925      	ldr	r1, [pc, #148]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
 8001350:	e015      	b.n	800137e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_RCC_OscConfig+0x244>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff fc04 	bl	8000b64 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001360:	f7ff fc00 	bl	8000b64 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e187      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d036      	beq.n	80013f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d016      	beq.n	80013c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_RCC_OscConfig+0x248>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001398:	f7ff fbe4 	bl	8000b64 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff fbe0 	bl	8000b64 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e167      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80013b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x200>
 80013be:	e01b      	b.n	80013f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_RCC_OscConfig+0x248>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fbcd 	bl	8000b64 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013cc:	e00e      	b.n	80013ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ce:	f7ff fbc9 	bl	8000b64 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d907      	bls.n	80013ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e150      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
 80013e0:	40023800 	.word	0x40023800
 80013e4:	42470000 	.word	0x42470000
 80013e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ec:	4b88      	ldr	r3, [pc, #544]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80013ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1ea      	bne.n	80013ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 8097 	beq.w	8001534 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140a:	4b81      	ldr	r3, [pc, #516]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10f      	bne.n	8001436 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	4b7d      	ldr	r3, [pc, #500]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a7c      	ldr	r2, [pc, #496]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b7a      	ldr	r3, [pc, #488]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001432:	2301      	movs	r3, #1
 8001434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001436:	4b77      	ldr	r3, [pc, #476]	; (8001614 <HAL_RCC_OscConfig+0x474>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d118      	bne.n	8001474 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001442:	4b74      	ldr	r3, [pc, #464]	; (8001614 <HAL_RCC_OscConfig+0x474>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a73      	ldr	r2, [pc, #460]	; (8001614 <HAL_RCC_OscConfig+0x474>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144e:	f7ff fb89 	bl	8000b64 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001456:	f7ff fb85 	bl	8000b64 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e10c      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	4b6a      	ldr	r3, [pc, #424]	; (8001614 <HAL_RCC_OscConfig+0x474>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x2ea>
 800147c:	4b64      	ldr	r3, [pc, #400]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	4a63      	ldr	r2, [pc, #396]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6713      	str	r3, [r2, #112]	; 0x70
 8001488:	e01c      	b.n	80014c4 <HAL_RCC_OscConfig+0x324>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b05      	cmp	r3, #5
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x30c>
 8001492:	4b5f      	ldr	r3, [pc, #380]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001496:	4a5e      	ldr	r2, [pc, #376]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6713      	str	r3, [r2, #112]	; 0x70
 800149e:	4b5c      	ldr	r3, [pc, #368]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a2:	4a5b      	ldr	r2, [pc, #364]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6713      	str	r3, [r2, #112]	; 0x70
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0x324>
 80014ac:	4b58      	ldr	r3, [pc, #352]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b0:	4a57      	ldr	r2, [pc, #348]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6713      	str	r3, [r2, #112]	; 0x70
 80014b8:	4b55      	ldr	r3, [pc, #340]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014bc:	4a54      	ldr	r2, [pc, #336]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80014be:	f023 0304 	bic.w	r3, r3, #4
 80014c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d015      	beq.n	80014f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014cc:	f7ff fb4a 	bl	8000b64 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d2:	e00a      	b.n	80014ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d4:	f7ff fb46 	bl	8000b64 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e0cb      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ea:	4b49      	ldr	r3, [pc, #292]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0ee      	beq.n	80014d4 <HAL_RCC_OscConfig+0x334>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f8:	f7ff fb34 	bl	8000b64 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001500:	f7ff fb30 	bl	8000b64 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	; 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e0b5      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001516:	4b3e      	ldr	r3, [pc, #248]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1ee      	bne.n	8001500 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d105      	bne.n	8001534 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001528:	4b39      	ldr	r3, [pc, #228]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	4a38      	ldr	r2, [pc, #224]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 800152e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001532:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80a1 	beq.w	8001680 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b08      	cmp	r3, #8
 8001548:	d05c      	beq.n	8001604 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d141      	bne.n	80015d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001552:	4b31      	ldr	r3, [pc, #196]	; (8001618 <HAL_RCC_OscConfig+0x478>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fb04 	bl	8000b64 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001560:	f7ff fb00 	bl	8000b64 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e087      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001572:	4b27      	ldr	r3, [pc, #156]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69da      	ldr	r2, [r3, #28]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	019b      	lsls	r3, r3, #6
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	3b01      	subs	r3, #1
 8001598:	041b      	lsls	r3, r3, #16
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	061b      	lsls	r3, r3, #24
 80015a2:	491b      	ldr	r1, [pc, #108]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_RCC_OscConfig+0x478>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff fad9 	bl	8000b64 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b6:	f7ff fad5 	bl	8000b64 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e05c      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x416>
 80015d4:	e054      	b.n	8001680 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_RCC_OscConfig+0x478>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fac2 	bl	8000b64 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff fabe 	bl	8000b64 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e045      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x444>
 8001602:	e03d      	b.n	8001680 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d107      	bne.n	800161c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e038      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
 8001610:	40023800 	.word	0x40023800
 8001614:	40007000 	.word	0x40007000
 8001618:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_RCC_OscConfig+0x4ec>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d028      	beq.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001634:	429a      	cmp	r2, r3
 8001636:	d121      	bne.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d11a      	bne.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800164c:	4013      	ands	r3, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001652:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001654:	4293      	cmp	r3, r2
 8001656:	d111      	bne.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	3b01      	subs	r3, #1
 8001666:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d107      	bne.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800

08001690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0cc      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016a4:	4b68      	ldr	r3, [pc, #416]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d90c      	bls.n	80016cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b65      	ldr	r3, [pc, #404]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b63      	ldr	r3, [pc, #396]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0b8      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d020      	beq.n	800171a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e4:	4b59      	ldr	r3, [pc, #356]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a58      	ldr	r2, [pc, #352]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016fc:	4b53      	ldr	r3, [pc, #332]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a52      	ldr	r2, [pc, #328]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001708:	4b50      	ldr	r3, [pc, #320]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	494d      	ldr	r1, [pc, #308]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d044      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d107      	bne.n	800173e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d119      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e07f      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d003      	beq.n	800174e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800174a:	2b03      	cmp	r3, #3
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174e:	4b3f      	ldr	r3, [pc, #252]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e06f      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175e:	4b3b      	ldr	r3, [pc, #236]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e067      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176e:	4b37      	ldr	r3, [pc, #220]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f023 0203 	bic.w	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4934      	ldr	r1, [pc, #208]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	4313      	orrs	r3, r2
 800177e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001780:	f7ff f9f0 	bl	8000b64 <HAL_GetTick>
 8001784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	e00a      	b.n	800179e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001788:	f7ff f9ec 	bl	8000b64 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e04f      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 020c 	and.w	r2, r3, #12
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d1eb      	bne.n	8001788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d20c      	bcs.n	80017d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e032      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4916      	ldr	r1, [pc, #88]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	490e      	ldr	r1, [pc, #56]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001816:	f000 f821 	bl	800185c <HAL_RCC_GetSysClockFreq>
 800181a:	4602      	mov	r2, r0
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	490a      	ldr	r1, [pc, #40]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	5ccb      	ldrb	r3, [r1, r3]
 800182a:	fa22 f303 	lsr.w	r3, r2, r3
 800182e:	4a09      	ldr	r2, [pc, #36]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_RCC_ClockConfig+0x1c8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff f950 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023c00 	.word	0x40023c00
 800184c:	40023800 	.word	0x40023800
 8001850:	08003b10 	.word	0x08003b10
 8001854:	20000000 	.word	0x20000000
 8001858:	20000004 	.word	0x20000004

0800185c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800185c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001860:	b094      	sub	sp, #80	; 0x50
 8001862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	647b      	str	r3, [r7, #68]	; 0x44
 8001868:	2300      	movs	r3, #0
 800186a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800186c:	2300      	movs	r3, #0
 800186e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001874:	4b79      	ldr	r3, [pc, #484]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b08      	cmp	r3, #8
 800187e:	d00d      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x40>
 8001880:	2b08      	cmp	r3, #8
 8001882:	f200 80e1 	bhi.w	8001a48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x34>
 800188a:	2b04      	cmp	r3, #4
 800188c:	d003      	beq.n	8001896 <HAL_RCC_GetSysClockFreq+0x3a>
 800188e:	e0db      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001890:	4b73      	ldr	r3, [pc, #460]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001894:	e0db      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001896:	4b73      	ldr	r3, [pc, #460]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x208>)
 8001898:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800189a:	e0d8      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800189c:	4b6f      	ldr	r3, [pc, #444]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018a6:	4b6d      	ldr	r3, [pc, #436]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d063      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b2:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	099b      	lsrs	r3, r3, #6
 80018b8:	2200      	movs	r2, #0
 80018ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80018bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
 80018ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018ce:	4622      	mov	r2, r4
 80018d0:	462b      	mov	r3, r5
 80018d2:	f04f 0000 	mov.w	r0, #0
 80018d6:	f04f 0100 	mov.w	r1, #0
 80018da:	0159      	lsls	r1, r3, #5
 80018dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e0:	0150      	lsls	r0, r2, #5
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4621      	mov	r1, r4
 80018e8:	1a51      	subs	r1, r2, r1
 80018ea:	6139      	str	r1, [r7, #16]
 80018ec:	4629      	mov	r1, r5
 80018ee:	eb63 0301 	sbc.w	r3, r3, r1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001900:	4659      	mov	r1, fp
 8001902:	018b      	lsls	r3, r1, #6
 8001904:	4651      	mov	r1, sl
 8001906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800190a:	4651      	mov	r1, sl
 800190c:	018a      	lsls	r2, r1, #6
 800190e:	4651      	mov	r1, sl
 8001910:	ebb2 0801 	subs.w	r8, r2, r1
 8001914:	4659      	mov	r1, fp
 8001916:	eb63 0901 	sbc.w	r9, r3, r1
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800192a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800192e:	4690      	mov	r8, r2
 8001930:	4699      	mov	r9, r3
 8001932:	4623      	mov	r3, r4
 8001934:	eb18 0303 	adds.w	r3, r8, r3
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	462b      	mov	r3, r5
 800193c:	eb49 0303 	adc.w	r3, r9, r3
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800194e:	4629      	mov	r1, r5
 8001950:	024b      	lsls	r3, r1, #9
 8001952:	4621      	mov	r1, r4
 8001954:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001958:	4621      	mov	r1, r4
 800195a:	024a      	lsls	r2, r1, #9
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001962:	2200      	movs	r2, #0
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
 8001966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001968:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800196c:	f7fe fc30 	bl	80001d0 <__aeabi_uldivmod>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4613      	mov	r3, r2
 8001976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001978:	e058      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197a:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	099b      	lsrs	r3, r3, #6
 8001980:	2200      	movs	r2, #0
 8001982:	4618      	mov	r0, r3
 8001984:	4611      	mov	r1, r2
 8001986:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800198a:	623b      	str	r3, [r7, #32]
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
 8001990:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001994:	4642      	mov	r2, r8
 8001996:	464b      	mov	r3, r9
 8001998:	f04f 0000 	mov.w	r0, #0
 800199c:	f04f 0100 	mov.w	r1, #0
 80019a0:	0159      	lsls	r1, r3, #5
 80019a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019a6:	0150      	lsls	r0, r2, #5
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4641      	mov	r1, r8
 80019ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80019b2:	4649      	mov	r1, r9
 80019b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019cc:	ebb2 040a 	subs.w	r4, r2, sl
 80019d0:	eb63 050b 	sbc.w	r5, r3, fp
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	00eb      	lsls	r3, r5, #3
 80019de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019e2:	00e2      	lsls	r2, r4, #3
 80019e4:	4614      	mov	r4, r2
 80019e6:	461d      	mov	r5, r3
 80019e8:	4643      	mov	r3, r8
 80019ea:	18e3      	adds	r3, r4, r3
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	464b      	mov	r3, r9
 80019f0:	eb45 0303 	adc.w	r3, r5, r3
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a02:	4629      	mov	r1, r5
 8001a04:	028b      	lsls	r3, r1, #10
 8001a06:	4621      	mov	r1, r4
 8001a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	028a      	lsls	r2, r1, #10
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a16:	2200      	movs	r2, #0
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	61fa      	str	r2, [r7, #28]
 8001a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a20:	f7fe fbd6 	bl	80001d0 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	0c1b      	lsrs	r3, r3, #16
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	3301      	adds	r3, #1
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a46:	e002      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3750      	adds	r7, #80	; 0x50
 8001a54:	46bd      	mov	sp, r7
 8001a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	00f42400 	.word	0x00f42400
 8001a64:	007a1200 	.word	0x007a1200

08001a68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f103 0208 	add.w	r2, r3, #8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f103 0208 	add.w	r2, r3, #8
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f103 0208 	add.w	r2, r3, #8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	601a      	str	r2, [r3, #0]
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b20:	d103      	bne.n	8001b2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e00c      	b.n	8001b44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3308      	adds	r3, #8
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	e002      	b.n	8001b38 <vListInsert+0x2e>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d2f6      	bcs.n	8001b32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	601a      	str	r2, [r3, #0]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6892      	ldr	r2, [r2, #8]
 8001b92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6852      	ldr	r2, [r2, #4]
 8001b9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d103      	bne.n	8001bb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	1e5a      	subs	r2, r3, #1
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10a      	bne.n	8001bfa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be8:	f383 8811 	msr	BASEPRI, r3
 8001bec:	f3bf 8f6f 	isb	sy
 8001bf0:	f3bf 8f4f 	dsb	sy
 8001bf4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001bf6:	bf00      	nop
 8001bf8:	e7fe      	b.n	8001bf8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001bfa:	f001 fd5b 	bl	80036b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	68f9      	ldr	r1, [r7, #12]
 8001c08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	441a      	add	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	68f9      	ldr	r1, [r7, #12]
 8001c2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	441a      	add	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	22ff      	movs	r2, #255	; 0xff
 8001c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	22ff      	movs	r2, #255	; 0xff
 8001c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d114      	bne.n	8001c7a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01a      	beq.n	8001c8e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3310      	adds	r3, #16
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 f81f 	bl	8002ca0 <xTaskRemoveFromEventList>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d012      	beq.n	8001c8e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <xQueueGenericReset+0xcc>)
 8001c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	f3bf 8f4f 	dsb	sy
 8001c74:	f3bf 8f6f 	isb	sy
 8001c78:	e009      	b.n	8001c8e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3310      	adds	r3, #16
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fef2 	bl	8001a68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3324      	adds	r3, #36	; 0x24
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff feed 	bl	8001a68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001c8e:	f001 fd41 	bl	8003714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	e000ed04 	.word	0xe000ed04

08001ca0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	4613      	mov	r3, r2
 8001cac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10a      	bne.n	8001cca <xQueueGenericCreate+0x2a>
	__asm volatile
 8001cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb8:	f383 8811 	msr	BASEPRI, r3
 8001cbc:	f3bf 8f6f 	isb	sy
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	613b      	str	r3, [r7, #16]
}
 8001cc6:	bf00      	nop
 8001cc8:	e7fe      	b.n	8001cc8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3348      	adds	r3, #72	; 0x48
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 fdcd 	bl	8003878 <pvPortMalloc>
 8001cde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d011      	beq.n	8001d0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3348      	adds	r3, #72	; 0x48
 8001cee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001cf8:	79fa      	ldrb	r2, [r7, #7]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f805 	bl	8001d14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001d0a:	69bb      	ldr	r3, [r7, #24]
	}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3720      	adds	r7, #32
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d103      	bne.n	8001d30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e002      	b.n	8001d36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d42:	2101      	movs	r1, #1
 8001d44:	69b8      	ldr	r0, [r7, #24]
 8001d46:	f7ff ff43 	bl	8001bd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08e      	sub	sp, #56	; 0x38
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d62:	2300      	movs	r3, #0
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10a      	bne.n	8001d86 <xQueueGenericSend+0x32>
	__asm volatile
 8001d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d74:	f383 8811 	msr	BASEPRI, r3
 8001d78:	f3bf 8f6f 	isb	sy
 8001d7c:	f3bf 8f4f 	dsb	sy
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001d82:	bf00      	nop
 8001d84:	e7fe      	b.n	8001d84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d103      	bne.n	8001d94 <xQueueGenericSend+0x40>
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <xQueueGenericSend+0x44>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <xQueueGenericSend+0x46>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10a      	bne.n	8001db4 <xQueueGenericSend+0x60>
	__asm volatile
 8001d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da2:	f383 8811 	msr	BASEPRI, r3
 8001da6:	f3bf 8f6f 	isb	sy
 8001daa:	f3bf 8f4f 	dsb	sy
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001db0:	bf00      	nop
 8001db2:	e7fe      	b.n	8001db2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d103      	bne.n	8001dc2 <xQueueGenericSend+0x6e>
 8001dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <xQueueGenericSend+0x72>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <xQueueGenericSend+0x74>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <xQueueGenericSend+0x8e>
	__asm volatile
 8001dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd0:	f383 8811 	msr	BASEPRI, r3
 8001dd4:	f3bf 8f6f 	isb	sy
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	623b      	str	r3, [r7, #32]
}
 8001dde:	bf00      	nop
 8001de0:	e7fe      	b.n	8001de0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001de2:	f001 f919 	bl	8003018 <xTaskGetSchedulerState>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <xQueueGenericSend+0x9e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <xQueueGenericSend+0xa2>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <xQueueGenericSend+0xa4>
 8001df6:	2300      	movs	r3, #0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10a      	bne.n	8001e12 <xQueueGenericSend+0xbe>
	__asm volatile
 8001dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e00:	f383 8811 	msr	BASEPRI, r3
 8001e04:	f3bf 8f6f 	isb	sy
 8001e08:	f3bf 8f4f 	dsb	sy
 8001e0c:	61fb      	str	r3, [r7, #28]
}
 8001e0e:	bf00      	nop
 8001e10:	e7fe      	b.n	8001e10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e12:	f001 fc4f 	bl	80036b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d302      	bcc.n	8001e28 <xQueueGenericSend+0xd4>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d129      	bne.n	8001e7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e2e:	f000 f9b3 	bl	8002198 <prvCopyDataToQueue>
 8001e32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3e:	3324      	adds	r3, #36	; 0x24
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 ff2d 	bl	8002ca0 <xTaskRemoveFromEventList>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e4c:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <xQueueGenericSend+0x1f8>)
 8001e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	f3bf 8f4f 	dsb	sy
 8001e58:	f3bf 8f6f 	isb	sy
 8001e5c:	e00a      	b.n	8001e74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001e64:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <xQueueGenericSend+0x1f8>)
 8001e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	f3bf 8f4f 	dsb	sy
 8001e70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001e74:	f001 fc4e 	bl	8003714 <vPortExitCritical>
				return pdPASS;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e063      	b.n	8001f44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d103      	bne.n	8001e8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e82:	f001 fc47 	bl	8003714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e05c      	b.n	8001f44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 ff65 	bl	8002d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e9e:	f001 fc39 	bl	8003714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ea2:	f000 fd1b 	bl	80028dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ea6:	f001 fc05 	bl	80036b4 <vPortEnterCritical>
 8001eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001eb0:	b25b      	sxtb	r3, r3
 8001eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eb6:	d103      	bne.n	8001ec0 <xQueueGenericSend+0x16c>
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ec6:	b25b      	sxtb	r3, r3
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ecc:	d103      	bne.n	8001ed6 <xQueueGenericSend+0x182>
 8001ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ed6:	f001 fc1d 	bl	8003714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001eda:	1d3a      	adds	r2, r7, #4
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 ff54 	bl	8002d90 <xTaskCheckForTimeOut>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d124      	bne.n	8001f38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001eee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ef0:	f000 fa24 	bl	800233c <prvIsQueueFull>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d018      	beq.n	8001f2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efc:	3310      	adds	r3, #16
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fea8 	bl	8002c58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f0a:	f000 f9af 	bl	800226c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f0e:	f000 fcf3 	bl	80028f8 <xTaskResumeAll>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f47f af7c 	bne.w	8001e12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <xQueueGenericSend+0x1f8>)
 8001f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	f3bf 8f4f 	dsb	sy
 8001f26:	f3bf 8f6f 	isb	sy
 8001f2a:	e772      	b.n	8001e12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f2e:	f000 f99d 	bl	800226c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f32:	f000 fce1 	bl	80028f8 <xTaskResumeAll>
 8001f36:	e76c      	b.n	8001e12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f3a:	f000 f997 	bl	800226c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f3e:	f000 fcdb 	bl	80028f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3738      	adds	r7, #56	; 0x38
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	e000ed04 	.word	0xe000ed04

08001f50 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08e      	sub	sp, #56	; 0x38
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10a      	bne.n	8001f82 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8001f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f70:	f383 8811 	msr	BASEPRI, r3
 8001f74:	f3bf 8f6f 	isb	sy
 8001f78:	f3bf 8f4f 	dsb	sy
 8001f7c:	623b      	str	r3, [r7, #32]
}
 8001f7e:	bf00      	nop
 8001f80:	e7fe      	b.n	8001f80 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8001f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8e:	f383 8811 	msr	BASEPRI, r3
 8001f92:	f3bf 8f6f 	isb	sy
 8001f96:	f3bf 8f4f 	dsb	sy
 8001f9a:	61fb      	str	r3, [r7, #28]
}
 8001f9c:	bf00      	nop
 8001f9e:	e7fe      	b.n	8001f9e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001fa0:	f001 f83a 	bl	8003018 <xTaskGetSchedulerState>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <xQueueSemaphoreTake+0x60>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <xQueueSemaphoreTake+0x64>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <xQueueSemaphoreTake+0x66>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8001fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fbe:	f383 8811 	msr	BASEPRI, r3
 8001fc2:	f3bf 8f6f 	isb	sy
 8001fc6:	f3bf 8f4f 	dsb	sy
 8001fca:	61bb      	str	r3, [r7, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	e7fe      	b.n	8001fce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001fd0:	f001 fb70 	bl	80036b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d024      	beq.n	800202a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe2:	1e5a      	subs	r2, r3, #1
 8001fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d104      	bne.n	8001ffa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001ff0:	f001 f9ba 	bl	8003368 <pvTaskIncrementMutexHeldCount>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00f      	beq.n	8002022 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	3310      	adds	r3, #16
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fe4a 	bl	8002ca0 <xTaskRemoveFromEventList>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002012:	4b54      	ldr	r3, [pc, #336]	; (8002164 <xQueueSemaphoreTake+0x214>)
 8002014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f3bf 8f4f 	dsb	sy
 800201e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002022:	f001 fb77 	bl	8003714 <vPortExitCritical>
				return pdPASS;
 8002026:	2301      	movs	r3, #1
 8002028:	e097      	b.n	800215a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d111      	bne.n	8002054 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203a:	f383 8811 	msr	BASEPRI, r3
 800203e:	f3bf 8f6f 	isb	sy
 8002042:	f3bf 8f4f 	dsb	sy
 8002046:	617b      	str	r3, [r7, #20]
}
 8002048:	bf00      	nop
 800204a:	e7fe      	b.n	800204a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800204c:	f001 fb62 	bl	8003714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002050:	2300      	movs	r3, #0
 8002052:	e082      	b.n	800215a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fe80 	bl	8002d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002064:	2301      	movs	r3, #1
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002068:	f001 fb54 	bl	8003714 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800206c:	f000 fc36 	bl	80028dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002070:	f001 fb20 	bl	80036b4 <vPortEnterCritical>
 8002074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800207a:	b25b      	sxtb	r3, r3
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002080:	d103      	bne.n	800208a <xQueueSemaphoreTake+0x13a>
 8002082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002090:	b25b      	sxtb	r3, r3
 8002092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002096:	d103      	bne.n	80020a0 <xQueueSemaphoreTake+0x150>
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020a0:	f001 fb38 	bl	8003714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020a4:	463a      	mov	r2, r7
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fe6f 	bl	8002d90 <xTaskCheckForTimeOut>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d132      	bne.n	800211e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80020b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020ba:	f000 f929 	bl	8002310 <prvIsQueueEmpty>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d026      	beq.n	8002112 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d109      	bne.n	80020e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80020cc:	f001 faf2 	bl	80036b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80020d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 ffbd 	bl	8003054 <xTaskPriorityInherit>
 80020da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80020dc:	f001 fb1a 	bl	8003714 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	3324      	adds	r3, #36	; 0x24
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fdb5 	bl	8002c58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80020ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020f0:	f000 f8bc 	bl	800226c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80020f4:	f000 fc00 	bl	80028f8 <xTaskResumeAll>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f47f af68 	bne.w	8001fd0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002100:	4b18      	ldr	r3, [pc, #96]	; (8002164 <xQueueSemaphoreTake+0x214>)
 8002102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	f3bf 8f4f 	dsb	sy
 800210c:	f3bf 8f6f 	isb	sy
 8002110:	e75e      	b.n	8001fd0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002112:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002114:	f000 f8aa 	bl	800226c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002118:	f000 fbee 	bl	80028f8 <xTaskResumeAll>
 800211c:	e758      	b.n	8001fd0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800211e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002120:	f000 f8a4 	bl	800226c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002124:	f000 fbe8 	bl	80028f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800212a:	f000 f8f1 	bl	8002310 <prvIsQueueEmpty>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	f43f af4d 	beq.w	8001fd0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00d      	beq.n	8002158 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800213c:	f001 faba 	bl	80036b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002140:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002142:	f000 f811 	bl	8002168 <prvGetDisinheritPriorityAfterTimeout>
 8002146:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800214e:	4618      	mov	r0, r3
 8002150:	f001 f87c 	bl	800324c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002154:	f001 fade 	bl	8003714 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002158:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800215a:	4618      	mov	r0, r3
 800215c:	3738      	adds	r7, #56	; 0x38
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	e000ed04 	.word	0xe000ed04

08002168 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	2b00      	cmp	r3, #0
 8002176:	d006      	beq.n	8002186 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f1c3 0307 	rsb	r3, r3, #7
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e001      	b.n	800218a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800218a:	68fb      	ldr	r3, [r7, #12]
	}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10d      	bne.n	80021d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d14d      	bne.n	800225a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 ffbc 	bl	8003140 <xTaskPriorityDisinherit>
 80021c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	e043      	b.n	800225a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d119      	bne.n	800220c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6858      	ldr	r0, [r3, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	461a      	mov	r2, r3
 80021e2:	68b9      	ldr	r1, [r7, #8]
 80021e4:	f001 fc5e 	bl	8003aa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	441a      	add	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d32b      	bcc.n	800225a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	e026      	b.n	800225a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68d8      	ldr	r0, [r3, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	461a      	mov	r2, r3
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	f001 fc44 	bl	8003aa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	425b      	negs	r3, r3
 8002226:	441a      	add	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d207      	bcs.n	8002248 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	425b      	negs	r3, r3
 8002242:	441a      	add	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d105      	bne.n	800225a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	3b01      	subs	r3, #1
 8002258:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002262:	697b      	ldr	r3, [r7, #20]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002274:	f001 fa1e 	bl	80036b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800227e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002280:	e011      	b.n	80022a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	2b00      	cmp	r3, #0
 8002288:	d012      	beq.n	80022b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3324      	adds	r3, #36	; 0x24
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fd06 	bl	8002ca0 <xTaskRemoveFromEventList>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800229a:	f000 fddb 	bl	8002e54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	dce9      	bgt.n	8002282 <prvUnlockQueue+0x16>
 80022ae:	e000      	b.n	80022b2 <prvUnlockQueue+0x46>
					break;
 80022b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	22ff      	movs	r2, #255	; 0xff
 80022b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80022ba:	f001 fa2b 	bl	8003714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80022be:	f001 f9f9 	bl	80036b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80022ca:	e011      	b.n	80022f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d012      	beq.n	80022fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3310      	adds	r3, #16
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fce1 	bl	8002ca0 <xTaskRemoveFromEventList>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80022e4:	f000 fdb6 	bl	8002e54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80022e8:	7bbb      	ldrb	r3, [r7, #14]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80022f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	dce9      	bgt.n	80022cc <prvUnlockQueue+0x60>
 80022f8:	e000      	b.n	80022fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80022fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	22ff      	movs	r2, #255	; 0xff
 8002300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002304:	f001 fa06 	bl	8003714 <vPortExitCritical>
}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002318:	f001 f9cc 	bl	80036b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002324:	2301      	movs	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e001      	b.n	800232e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800232e:	f001 f9f1 	bl	8003714 <vPortExitCritical>

	return xReturn;
 8002332:	68fb      	ldr	r3, [r7, #12]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002344:	f001 f9b6 	bl	80036b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	429a      	cmp	r2, r3
 8002352:	d102      	bne.n	800235a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002354:	2301      	movs	r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	e001      	b.n	800235e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800235e:	f001 f9d9 	bl	8003714 <vPortExitCritical>

	return xReturn;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08e      	sub	sp, #56	; 0x38
 8002370:	af04      	add	r7, sp, #16
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800237a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	623b      	str	r3, [r7, #32]
}
 8002392:	bf00      	nop
 8002394:	e7fe      	b.n	8002394 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a0:	f383 8811 	msr	BASEPRI, r3
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	61fb      	str	r3, [r7, #28]
}
 80023ae:	bf00      	nop
 80023b0:	e7fe      	b.n	80023b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80023b2:	2354      	movs	r3, #84	; 0x54
 80023b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b54      	cmp	r3, #84	; 0x54
 80023ba:	d00a      	beq.n	80023d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	61bb      	str	r3, [r7, #24]
}
 80023ce:	bf00      	nop
 80023d0:	e7fe      	b.n	80023d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80023d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d01e      	beq.n	8002418 <xTaskCreateStatic+0xac>
 80023da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01b      	beq.n	8002418 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80023f2:	2300      	movs	r3, #0
 80023f4:	9303      	str	r3, [sp, #12]
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f850 	bl	80024b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002412:	f000 f8d5 	bl	80025c0 <prvAddNewTaskToReadyList>
 8002416:	e001      	b.n	800241c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800241c:	697b      	ldr	r3, [r7, #20]
	}
 800241e:	4618      	mov	r0, r3
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002426:	b580      	push	{r7, lr}
 8002428:	b08c      	sub	sp, #48	; 0x30
 800242a:	af04      	add	r7, sp, #16
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	4613      	mov	r3, r2
 8002434:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4618      	mov	r0, r3
 800243c:	f001 fa1c 	bl	8003878 <pvPortMalloc>
 8002440:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00e      	beq.n	8002466 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002448:	2054      	movs	r0, #84	; 0x54
 800244a:	f001 fa15 	bl	8003878 <pvPortMalloc>
 800244e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
 800245c:	e005      	b.n	800246a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f001 fa98 	bl	8003994 <vPortFree>
 8002464:	e001      	b.n	800246a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d017      	beq.n	80024a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002478:	88fa      	ldrh	r2, [r7, #6]
 800247a:	2300      	movs	r3, #0
 800247c:	9303      	str	r3, [sp, #12]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	9302      	str	r3, [sp, #8]
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f80e 	bl	80024b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002494:	69f8      	ldr	r0, [r7, #28]
 8002496:	f000 f893 	bl	80025c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800249a:	2301      	movs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	e002      	b.n	80024a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80024a6:	69bb      	ldr	r3, [r7, #24]
	}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024c8:	3b01      	subs	r3, #1
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f023 0307 	bic.w	r3, r3, #7
 80024d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80024e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	617b      	str	r3, [r7, #20]
}
 80024f4:	bf00      	nop
 80024f6:	e7fe      	b.n	80024f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d01f      	beq.n	800253e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	e012      	b.n	800252a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	4413      	add	r3, r2
 800250a:	7819      	ldrb	r1, [r3, #0]
 800250c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	4413      	add	r3, r2
 8002512:	3334      	adds	r3, #52	; 0x34
 8002514:	460a      	mov	r2, r1
 8002516:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	4413      	add	r3, r2
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	3301      	adds	r3, #1
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d9e9      	bls.n	8002504 <prvInitialiseNewTask+0x54>
 8002530:	e000      	b.n	8002534 <prvInitialiseNewTask+0x84>
			{
				break;
 8002532:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800253c:	e003      	b.n	8002546 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	2b06      	cmp	r3, #6
 800254a:	d901      	bls.n	8002550 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800254c:	2306      	movs	r3, #6
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800255a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255e:	2200      	movs	r2, #0
 8002560:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002564:	3304      	adds	r3, #4
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fa9e 	bl	8001aa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	3318      	adds	r3, #24
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fa99 	bl	8001aa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800257a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257e:	f1c3 0207 	rsb	r2, r3, #7
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800258a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258e:	2200      	movs	r2, #0
 8002590:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	68f9      	ldr	r1, [r7, #12]
 800259e:	69b8      	ldr	r0, [r7, #24]
 80025a0:	f000 ff5c 	bl	800345c <pxPortInitialiseStack>
 80025a4:	4602      	mov	r2, r0
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025b6:	bf00      	nop
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80025c8:	f001 f874 	bl	80036b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <prvAddNewTaskToReadyList+0xb8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	4a29      	ldr	r2, [pc, #164]	; (8002678 <prvAddNewTaskToReadyList+0xb8>)
 80025d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80025d6:	4b29      	ldr	r3, [pc, #164]	; (800267c <prvAddNewTaskToReadyList+0xbc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80025de:	4a27      	ldr	r2, [pc, #156]	; (800267c <prvAddNewTaskToReadyList+0xbc>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025e4:	4b24      	ldr	r3, [pc, #144]	; (8002678 <prvAddNewTaskToReadyList+0xb8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d110      	bne.n	800260e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80025ec:	f000 fc56 	bl	8002e9c <prvInitialiseTaskLists>
 80025f0:	e00d      	b.n	800260e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80025f2:	4b23      	ldr	r3, [pc, #140]	; (8002680 <prvAddNewTaskToReadyList+0xc0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <prvAddNewTaskToReadyList+0xbc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	429a      	cmp	r2, r3
 8002606:	d802      	bhi.n	800260e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002608:	4a1c      	ldr	r2, [pc, #112]	; (800267c <prvAddNewTaskToReadyList+0xbc>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800260e:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <prvAddNewTaskToReadyList+0xc4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3301      	adds	r3, #1
 8002614:	4a1b      	ldr	r2, [pc, #108]	; (8002684 <prvAddNewTaskToReadyList+0xc4>)
 8002616:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	2201      	movs	r2, #1
 800261e:	409a      	lsls	r2, r3
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <prvAddNewTaskToReadyList+0xc8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	4a18      	ldr	r2, [pc, #96]	; (8002688 <prvAddNewTaskToReadyList+0xc8>)
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4a15      	ldr	r2, [pc, #84]	; (800268c <prvAddNewTaskToReadyList+0xcc>)
 8002638:	441a      	add	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	4619      	mov	r1, r3
 8002640:	4610      	mov	r0, r2
 8002642:	f7ff fa3e 	bl	8001ac2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002646:	f001 f865 	bl	8003714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <prvAddNewTaskToReadyList+0xc0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00e      	beq.n	8002670 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <prvAddNewTaskToReadyList+0xbc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	429a      	cmp	r2, r3
 800265e:	d207      	bcs.n	8002670 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <prvAddNewTaskToReadyList+0xd0>)
 8002662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	2000039c 	.word	0x2000039c
 800267c:	2000029c 	.word	0x2000029c
 8002680:	200003a8 	.word	0x200003a8
 8002684:	200003b8 	.word	0x200003b8
 8002688:	200003a4 	.word	0x200003a4
 800268c:	200002a0 	.word	0x200002a0
 8002690:	e000ed04 	.word	0xe000ed04

08002694 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800269c:	f001 f80a 	bl	80036b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <vTaskDelete+0x18>
 80026a6:	4b39      	ldr	r3, [pc, #228]	; (800278c <vTaskDelete+0xf8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	e000      	b.n	80026ae <vTaskDelete+0x1a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3304      	adds	r3, #4
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fa61 	bl	8001b7c <uxListRemove>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d115      	bne.n	80026ec <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c4:	4932      	ldr	r1, [pc, #200]	; (8002790 <vTaskDelete+0xfc>)
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10a      	bne.n	80026ec <vTaskDelete+0x58>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	2201      	movs	r2, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43da      	mvns	r2, r3
 80026e2:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <vTaskDelete+0x100>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4013      	ands	r3, r2
 80026e8:	4a2a      	ldr	r2, [pc, #168]	; (8002794 <vTaskDelete+0x100>)
 80026ea:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3318      	adds	r3, #24
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fa3f 	bl	8001b7c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80026fe:	4b26      	ldr	r3, [pc, #152]	; (8002798 <vTaskDelete+0x104>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	4a24      	ldr	r2, [pc, #144]	; (8002798 <vTaskDelete+0x104>)
 8002706:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <vTaskDelete+0xf8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	429a      	cmp	r2, r3
 8002710:	d10b      	bne.n	800272a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3304      	adds	r3, #4
 8002716:	4619      	mov	r1, r3
 8002718:	4820      	ldr	r0, [pc, #128]	; (800279c <vTaskDelete+0x108>)
 800271a:	f7ff f9d2 	bl	8001ac2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <vTaskDelete+0x10c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	4a1e      	ldr	r2, [pc, #120]	; (80027a0 <vTaskDelete+0x10c>)
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e009      	b.n	800273e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <vTaskDelete+0x110>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3b01      	subs	r3, #1
 8002730:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <vTaskDelete+0x110>)
 8002732:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fc1f 	bl	8002f78 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800273a:	f000 fc4d 	bl	8002fd8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800273e:	f000 ffe9 	bl	8003714 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002742:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <vTaskDelete+0x114>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01b      	beq.n	8002782 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <vTaskDelete+0xf8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	429a      	cmp	r2, r3
 8002752:	d116      	bne.n	8002782 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002754:	4b15      	ldr	r3, [pc, #84]	; (80027ac <vTaskDelete+0x118>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <vTaskDelete+0xde>
	__asm volatile
 800275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	60bb      	str	r3, [r7, #8]
}
 800276e:	bf00      	nop
 8002770:	e7fe      	b.n	8002770 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <vTaskDelete+0x11c>)
 8002774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	2000029c 	.word	0x2000029c
 8002790:	200002a0 	.word	0x200002a0
 8002794:	200003a4 	.word	0x200003a4
 8002798:	200003b8 	.word	0x200003b8
 800279c:	20000370 	.word	0x20000370
 80027a0:	20000384 	.word	0x20000384
 80027a4:	2000039c 	.word	0x2000039c
 80027a8:	200003a8 	.word	0x200003a8
 80027ac:	200003c4 	.word	0x200003c4
 80027b0:	e000ed04 	.word	0xe000ed04

080027b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d017      	beq.n	80027f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80027c6:	4b13      	ldr	r3, [pc, #76]	; (8002814 <vTaskDelay+0x60>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <vTaskDelay+0x30>
	__asm volatile
 80027ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	60bb      	str	r3, [r7, #8]
}
 80027e0:	bf00      	nop
 80027e2:	e7fe      	b.n	80027e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80027e4:	f000 f87a 	bl	80028dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80027e8:	2100      	movs	r1, #0
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fdd0 	bl	8003390 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80027f0:	f000 f882 	bl	80028f8 <xTaskResumeAll>
 80027f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <vTaskDelay+0x64>)
 80027fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	200003c4 	.word	0x200003c4
 8002818:	e000ed04 	.word	0xe000ed04

0800281c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800282a:	463a      	mov	r2, r7
 800282c:	1d39      	adds	r1, r7, #4
 800282e:	f107 0308 	add.w	r3, r7, #8
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fe4e 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002838:	6839      	ldr	r1, [r7, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	9202      	str	r2, [sp, #8]
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	2300      	movs	r3, #0
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2300      	movs	r3, #0
 8002848:	460a      	mov	r2, r1
 800284a:	491e      	ldr	r1, [pc, #120]	; (80028c4 <vTaskStartScheduler+0xa8>)
 800284c:	481e      	ldr	r0, [pc, #120]	; (80028c8 <vTaskStartScheduler+0xac>)
 800284e:	f7ff fd8d 	bl	800236c <xTaskCreateStatic>
 8002852:	4603      	mov	r3, r0
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <vTaskStartScheduler+0xb0>)
 8002856:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002858:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <vTaskStartScheduler+0xb0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002860:	2301      	movs	r3, #1
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	e001      	b.n	800286a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d116      	bne.n	800289e <vTaskStartScheduler+0x82>
	__asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	613b      	str	r3, [r7, #16]
}
 8002882:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <vTaskStartScheduler+0xb4>)
 8002886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800288a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <vTaskStartScheduler+0xb8>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <vTaskStartScheduler+0xbc>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002898:	f000 fe6a 	bl	8003570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800289c:	e00e      	b.n	80028bc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028a4:	d10a      	bne.n	80028bc <vTaskStartScheduler+0xa0>
	__asm volatile
 80028a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028aa:	f383 8811 	msr	BASEPRI, r3
 80028ae:	f3bf 8f6f 	isb	sy
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	60fb      	str	r3, [r7, #12]
}
 80028b8:	bf00      	nop
 80028ba:	e7fe      	b.n	80028ba <vTaskStartScheduler+0x9e>
}
 80028bc:	bf00      	nop
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	08003b08 	.word	0x08003b08
 80028c8:	08002e6d 	.word	0x08002e6d
 80028cc:	200003c0 	.word	0x200003c0
 80028d0:	200003bc 	.word	0x200003bc
 80028d4:	200003a8 	.word	0x200003a8
 80028d8:	200003a0 	.word	0x200003a0

080028dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <vTaskSuspendAll+0x18>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	4a03      	ldr	r2, [pc, #12]	; (80028f4 <vTaskSuspendAll+0x18>)
 80028e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	200003c4 	.word	0x200003c4

080028f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002906:	4b41      	ldr	r3, [pc, #260]	; (8002a0c <xTaskResumeAll+0x114>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10a      	bne.n	8002924 <xTaskResumeAll+0x2c>
	__asm volatile
 800290e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	603b      	str	r3, [r7, #0]
}
 8002920:	bf00      	nop
 8002922:	e7fe      	b.n	8002922 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002924:	f000 fec6 	bl	80036b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002928:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <xTaskResumeAll+0x114>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3b01      	subs	r3, #1
 800292e:	4a37      	ldr	r2, [pc, #220]	; (8002a0c <xTaskResumeAll+0x114>)
 8002930:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002932:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <xTaskResumeAll+0x114>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d161      	bne.n	80029fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800293a:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <xTaskResumeAll+0x118>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d05d      	beq.n	80029fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002942:	e02e      	b.n	80029a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002944:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <xTaskResumeAll+0x11c>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	3318      	adds	r3, #24
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff f913 	bl	8001b7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3304      	adds	r3, #4
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f90e 	bl	8001b7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	2201      	movs	r2, #1
 8002966:	409a      	lsls	r2, r3
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <xTaskResumeAll+0x120>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4313      	orrs	r3, r2
 800296e:	4a2a      	ldr	r2, [pc, #168]	; (8002a18 <xTaskResumeAll+0x120>)
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4a27      	ldr	r2, [pc, #156]	; (8002a1c <xTaskResumeAll+0x124>)
 8002980:	441a      	add	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3304      	adds	r3, #4
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f7ff f89a 	bl	8001ac2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002992:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <xTaskResumeAll+0x128>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	429a      	cmp	r2, r3
 800299a:	d302      	bcc.n	80029a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <xTaskResumeAll+0x12c>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029a2:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <xTaskResumeAll+0x11c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1cc      	bne.n	8002944 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80029b0:	f000 fb12 	bl	8002fd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029b4:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <xTaskResumeAll+0x130>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d010      	beq.n	80029e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80029c0:	f000 f836 	bl	8002a30 <xTaskIncrementTick>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <xTaskResumeAll+0x12c>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f1      	bne.n	80029c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <xTaskResumeAll+0x130>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <xTaskResumeAll+0x12c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80029ea:	2301      	movs	r3, #1
 80029ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <xTaskResumeAll+0x134>)
 80029f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80029fe:	f000 fe89 	bl	8003714 <vPortExitCritical>

	return xAlreadyYielded;
 8002a02:	68bb      	ldr	r3, [r7, #8]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	200003c4 	.word	0x200003c4
 8002a10:	2000039c 	.word	0x2000039c
 8002a14:	2000035c 	.word	0x2000035c
 8002a18:	200003a4 	.word	0x200003a4
 8002a1c:	200002a0 	.word	0x200002a0
 8002a20:	2000029c 	.word	0x2000029c
 8002a24:	200003b0 	.word	0x200003b0
 8002a28:	200003ac 	.word	0x200003ac
 8002a2c:	e000ed04 	.word	0xe000ed04

08002a30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a3a:	4b4e      	ldr	r3, [pc, #312]	; (8002b74 <xTaskIncrementTick+0x144>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 808e 	bne.w	8002b60 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a44:	4b4c      	ldr	r3, [pc, #304]	; (8002b78 <xTaskIncrementTick+0x148>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002a4c:	4a4a      	ldr	r2, [pc, #296]	; (8002b78 <xTaskIncrementTick+0x148>)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d120      	bne.n	8002a9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002a58:	4b48      	ldr	r3, [pc, #288]	; (8002b7c <xTaskIncrementTick+0x14c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <xTaskIncrementTick+0x48>
	__asm volatile
 8002a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a66:	f383 8811 	msr	BASEPRI, r3
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	f3bf 8f4f 	dsb	sy
 8002a72:	603b      	str	r3, [r7, #0]
}
 8002a74:	bf00      	nop
 8002a76:	e7fe      	b.n	8002a76 <xTaskIncrementTick+0x46>
 8002a78:	4b40      	ldr	r3, [pc, #256]	; (8002b7c <xTaskIncrementTick+0x14c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4b40      	ldr	r3, [pc, #256]	; (8002b80 <xTaskIncrementTick+0x150>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a3e      	ldr	r2, [pc, #248]	; (8002b7c <xTaskIncrementTick+0x14c>)
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4a3e      	ldr	r2, [pc, #248]	; (8002b80 <xTaskIncrementTick+0x150>)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b3d      	ldr	r3, [pc, #244]	; (8002b84 <xTaskIncrementTick+0x154>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3301      	adds	r3, #1
 8002a92:	4a3c      	ldr	r2, [pc, #240]	; (8002b84 <xTaskIncrementTick+0x154>)
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	f000 fa9f 	bl	8002fd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a9a:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <xTaskIncrementTick+0x158>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d348      	bcc.n	8002b36 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aa4:	4b35      	ldr	r3, [pc, #212]	; (8002b7c <xTaskIncrementTick+0x14c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d104      	bne.n	8002ab8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aae:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <xTaskIncrementTick+0x158>)
 8002ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ab4:	601a      	str	r2, [r3, #0]
					break;
 8002ab6:	e03e      	b.n	8002b36 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ab8:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <xTaskIncrementTick+0x14c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d203      	bcs.n	8002ad8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ad0:	4a2d      	ldr	r2, [pc, #180]	; (8002b88 <xTaskIncrementTick+0x158>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ad6:	e02e      	b.n	8002b36 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	3304      	adds	r3, #4
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff f84d 	bl	8001b7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d004      	beq.n	8002af4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	3318      	adds	r3, #24
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f844 	bl	8001b7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	2201      	movs	r2, #1
 8002afa:	409a      	lsls	r2, r3
 8002afc:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <xTaskIncrementTick+0x15c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <xTaskIncrementTick+0x15c>)
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4a1f      	ldr	r2, [pc, #124]	; (8002b90 <xTaskIncrementTick+0x160>)
 8002b14:	441a      	add	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	f7fe ffd0 	bl	8001ac2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b26:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <xTaskIncrementTick+0x164>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d3b9      	bcc.n	8002aa4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002b30:	2301      	movs	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b34:	e7b6      	b.n	8002aa4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b36:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <xTaskIncrementTick+0x164>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3c:	4914      	ldr	r1, [pc, #80]	; (8002b90 <xTaskIncrementTick+0x160>)
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d901      	bls.n	8002b52 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <xTaskIncrementTick+0x168>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	e004      	b.n	8002b6a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <xTaskIncrementTick+0x16c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3301      	adds	r3, #1
 8002b66:	4a0d      	ldr	r2, [pc, #52]	; (8002b9c <xTaskIncrementTick+0x16c>)
 8002b68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002b6a:	697b      	ldr	r3, [r7, #20]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	200003c4 	.word	0x200003c4
 8002b78:	200003a0 	.word	0x200003a0
 8002b7c:	20000354 	.word	0x20000354
 8002b80:	20000358 	.word	0x20000358
 8002b84:	200003b4 	.word	0x200003b4
 8002b88:	200003bc 	.word	0x200003bc
 8002b8c:	200003a4 	.word	0x200003a4
 8002b90:	200002a0 	.word	0x200002a0
 8002b94:	2000029c 	.word	0x2000029c
 8002b98:	200003b0 	.word	0x200003b0
 8002b9c:	200003ac 	.word	0x200003ac

08002ba0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ba6:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <vTaskSwitchContext+0xa4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <vTaskSwitchContext+0xa8>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002bb4:	e03f      	b.n	8002c36 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <vTaskSwitchContext+0xa8>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bbc:	4b23      	ldr	r3, [pc, #140]	; (8002c4c <vTaskSwitchContext+0xac>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002bca:	7afb      	ldrb	r3, [r7, #11]
 8002bcc:	f1c3 031f 	rsb	r3, r3, #31
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	491f      	ldr	r1, [pc, #124]	; (8002c50 <vTaskSwitchContext+0xb0>)
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10a      	bne.n	8002bfc <vTaskSwitchContext+0x5c>
	__asm volatile
 8002be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	607b      	str	r3, [r7, #4]
}
 8002bf8:	bf00      	nop
 8002bfa:	e7fe      	b.n	8002bfa <vTaskSwitchContext+0x5a>
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <vTaskSwitchContext+0xb0>)
 8002c08:	4413      	add	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d104      	bne.n	8002c2c <vTaskSwitchContext+0x8c>
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <vTaskSwitchContext+0xb4>)
 8002c34:	6013      	str	r3, [r2, #0]
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	200003c4 	.word	0x200003c4
 8002c48:	200003b0 	.word	0x200003b0
 8002c4c:	200003a4 	.word	0x200003a4
 8002c50:	200002a0 	.word	0x200002a0
 8002c54:	2000029c 	.word	0x2000029c

08002c58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	60fb      	str	r3, [r7, #12]
}
 8002c7a:	bf00      	nop
 8002c7c:	e7fe      	b.n	8002c7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <vTaskPlaceOnEventList+0x44>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3318      	adds	r3, #24
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe ff3f 	bl	8001b0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	6838      	ldr	r0, [r7, #0]
 8002c90:	f000 fb7e 	bl	8003390 <prvAddCurrentTaskToDelayedList>
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	2000029c 	.word	0x2000029c

08002ca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	60fb      	str	r3, [r7, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	e7fe      	b.n	8002cca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	3318      	adds	r3, #24
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe ff53 	bl	8001b7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <xTaskRemoveFromEventList+0xac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d11c      	bne.n	8002d18 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe ff4a 	bl	8001b7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	2201      	movs	r2, #1
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <xTaskRemoveFromEventList+0xb0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	4a16      	ldr	r2, [pc, #88]	; (8002d50 <xTaskRemoveFromEventList+0xb0>)
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <xTaskRemoveFromEventList+0xb4>)
 8002d08:	441a      	add	r2, r3
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f7fe fed6 	bl	8001ac2 <vListInsertEnd>
 8002d16:	e005      	b.n	8002d24 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	3318      	adds	r3, #24
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	480e      	ldr	r0, [pc, #56]	; (8002d58 <xTaskRemoveFromEventList+0xb8>)
 8002d20:	f7fe fecf 	bl	8001ac2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <xTaskRemoveFromEventList+0xbc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d905      	bls.n	8002d3e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002d32:	2301      	movs	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <xTaskRemoveFromEventList+0xc0>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e001      	b.n	8002d42 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002d42:	697b      	ldr	r3, [r7, #20]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	200003c4 	.word	0x200003c4
 8002d50:	200003a4 	.word	0x200003a4
 8002d54:	200002a0 	.word	0x200002a0
 8002d58:	2000035c 	.word	0x2000035c
 8002d5c:	2000029c 	.word	0x2000029c
 8002d60:	200003b0 	.word	0x200003b0

08002d64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <vTaskInternalSetTimeOutState+0x24>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <vTaskInternalSetTimeOutState+0x28>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	605a      	str	r2, [r3, #4]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	200003b4 	.word	0x200003b4
 8002d8c:	200003a0 	.word	0x200003a0

08002d90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10a      	bne.n	8002db6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	613b      	str	r3, [r7, #16]
}
 8002db2:	bf00      	nop
 8002db4:	e7fe      	b.n	8002db4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	60fb      	str	r3, [r7, #12]
}
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002dd2:	f000 fc6f 	bl	80036b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <xTaskCheckForTimeOut+0xbc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dee:	d102      	bne.n	8002df6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	e023      	b.n	8002e3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <xTaskCheckForTimeOut+0xc0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d007      	beq.n	8002e12 <xTaskCheckForTimeOut+0x82>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d302      	bcc.n	8002e12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	e015      	b.n	8002e3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d20b      	bcs.n	8002e34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	1ad2      	subs	r2, r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ff9b 	bl	8002d64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	e004      	b.n	8002e3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002e3e:	f000 fc69 	bl	8003714 <vPortExitCritical>

	return xReturn;
 8002e42:	69fb      	ldr	r3, [r7, #28]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3720      	adds	r7, #32
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	200003a0 	.word	0x200003a0
 8002e50:	200003b4 	.word	0x200003b4

08002e54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <vTaskMissedYield+0x14>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	200003b0 	.word	0x200003b0

08002e6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002e74:	f000 f852 	bl	8002f1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <prvIdleTask+0x28>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d9f9      	bls.n	8002e74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <prvIdleTask+0x2c>)
 8002e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002e90:	e7f0      	b.n	8002e74 <prvIdleTask+0x8>
 8002e92:	bf00      	nop
 8002e94:	200002a0 	.word	0x200002a0
 8002e98:	e000ed04 	.word	0xe000ed04

08002e9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	e00c      	b.n	8002ec2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4a12      	ldr	r2, [pc, #72]	; (8002efc <prvInitialiseTaskLists+0x60>)
 8002eb4:	4413      	add	r3, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fdd6 	bl	8001a68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	607b      	str	r3, [r7, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b06      	cmp	r3, #6
 8002ec6:	d9ef      	bls.n	8002ea8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ec8:	480d      	ldr	r0, [pc, #52]	; (8002f00 <prvInitialiseTaskLists+0x64>)
 8002eca:	f7fe fdcd 	bl	8001a68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ece:	480d      	ldr	r0, [pc, #52]	; (8002f04 <prvInitialiseTaskLists+0x68>)
 8002ed0:	f7fe fdca 	bl	8001a68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ed4:	480c      	ldr	r0, [pc, #48]	; (8002f08 <prvInitialiseTaskLists+0x6c>)
 8002ed6:	f7fe fdc7 	bl	8001a68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002eda:	480c      	ldr	r0, [pc, #48]	; (8002f0c <prvInitialiseTaskLists+0x70>)
 8002edc:	f7fe fdc4 	bl	8001a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ee0:	480b      	ldr	r0, [pc, #44]	; (8002f10 <prvInitialiseTaskLists+0x74>)
 8002ee2:	f7fe fdc1 	bl	8001a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <prvInitialiseTaskLists+0x78>)
 8002ee8:	4a05      	ldr	r2, [pc, #20]	; (8002f00 <prvInitialiseTaskLists+0x64>)
 8002eea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <prvInitialiseTaskLists+0x7c>)
 8002eee:	4a05      	ldr	r2, [pc, #20]	; (8002f04 <prvInitialiseTaskLists+0x68>)
 8002ef0:	601a      	str	r2, [r3, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200002a0 	.word	0x200002a0
 8002f00:	2000032c 	.word	0x2000032c
 8002f04:	20000340 	.word	0x20000340
 8002f08:	2000035c 	.word	0x2000035c
 8002f0c:	20000370 	.word	0x20000370
 8002f10:	20000388 	.word	0x20000388
 8002f14:	20000354 	.word	0x20000354
 8002f18:	20000358 	.word	0x20000358

08002f1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f22:	e019      	b.n	8002f58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002f24:	f000 fbc6 	bl	80036b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f28:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <prvCheckTasksWaitingTermination+0x50>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3304      	adds	r3, #4
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fe21 	bl	8001b7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <prvCheckTasksWaitingTermination+0x54>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	4a0b      	ldr	r2, [pc, #44]	; (8002f70 <prvCheckTasksWaitingTermination+0x54>)
 8002f42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <prvCheckTasksWaitingTermination+0x58>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <prvCheckTasksWaitingTermination+0x58>)
 8002f4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002f4e:	f000 fbe1 	bl	8003714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f810 	bl	8002f78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <prvCheckTasksWaitingTermination+0x58>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e1      	bne.n	8002f24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002f60:	bf00      	nop
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000370 	.word	0x20000370
 8002f70:	2000039c 	.word	0x2000039c
 8002f74:	20000384 	.word	0x20000384

08002f78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d108      	bne.n	8002f9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fd00 	bl	8003994 <vPortFree>
				vPortFree( pxTCB );
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fcfd 	bl	8003994 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002f9a:	e018      	b.n	8002fce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d103      	bne.n	8002fae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fcf4 	bl	8003994 <vPortFree>
	}
 8002fac:	e00f      	b.n	8002fce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d00a      	beq.n	8002fce <prvDeleteTCB+0x56>
	__asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	60fb      	str	r3, [r7, #12]
}
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <prvDeleteTCB+0x54>
	}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <prvResetNextTaskUnblockTime+0x38>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d104      	bne.n	8002ff2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <prvResetNextTaskUnblockTime+0x3c>)
 8002fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002ff0:	e008      	b.n	8003004 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ff2:	4b07      	ldr	r3, [pc, #28]	; (8003010 <prvResetNextTaskUnblockTime+0x38>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a04      	ldr	r2, [pc, #16]	; (8003014 <prvResetNextTaskUnblockTime+0x3c>)
 8003002:	6013      	str	r3, [r2, #0]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	20000354 	.word	0x20000354
 8003014:	200003bc 	.word	0x200003bc

08003018 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800301e:	4b0b      	ldr	r3, [pc, #44]	; (800304c <xTaskGetSchedulerState+0x34>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003026:	2301      	movs	r3, #1
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	e008      	b.n	800303e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <xTaskGetSchedulerState+0x38>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003034:	2302      	movs	r3, #2
 8003036:	607b      	str	r3, [r7, #4]
 8003038:	e001      	b.n	800303e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800303a:	2300      	movs	r3, #0
 800303c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800303e:	687b      	ldr	r3, [r7, #4]
	}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	200003a8 	.word	0x200003a8
 8003050:	200003c4 	.word	0x200003c4

08003054 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d05e      	beq.n	8003128 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306e:	4b31      	ldr	r3, [pc, #196]	; (8003134 <xTaskPriorityInherit+0xe0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	429a      	cmp	r2, r3
 8003076:	d24e      	bcs.n	8003116 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	db06      	blt.n	800308e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003080:	4b2c      	ldr	r3, [pc, #176]	; (8003134 <xTaskPriorityInherit+0xe0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	f1c3 0207 	rsb	r2, r3, #7
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	6959      	ldr	r1, [r3, #20]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4a26      	ldr	r2, [pc, #152]	; (8003138 <xTaskPriorityInherit+0xe4>)
 80030a0:	4413      	add	r3, r2
 80030a2:	4299      	cmp	r1, r3
 80030a4:	d12f      	bne.n	8003106 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	3304      	adds	r3, #4
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fd66 	bl	8001b7c <uxListRemove>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	2201      	movs	r2, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43da      	mvns	r2, r3
 80030c2:	4b1e      	ldr	r3, [pc, #120]	; (800313c <xTaskPriorityInherit+0xe8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4013      	ands	r3, r2
 80030c8:	4a1c      	ldr	r2, [pc, #112]	; (800313c <xTaskPriorityInherit+0xe8>)
 80030ca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80030cc:	4b19      	ldr	r3, [pc, #100]	; (8003134 <xTaskPriorityInherit+0xe0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	2201      	movs	r2, #1
 80030dc:	409a      	lsls	r2, r3
 80030de:	4b17      	ldr	r3, [pc, #92]	; (800313c <xTaskPriorityInherit+0xe8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	4a15      	ldr	r2, [pc, #84]	; (800313c <xTaskPriorityInherit+0xe8>)
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4a10      	ldr	r2, [pc, #64]	; (8003138 <xTaskPriorityInherit+0xe4>)
 80030f6:	441a      	add	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f7fe fcdf 	bl	8001ac2 <vListInsertEnd>
 8003104:	e004      	b.n	8003110 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <xTaskPriorityInherit+0xe0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003110:	2301      	movs	r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e008      	b.n	8003128 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <xTaskPriorityInherit+0xe0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	429a      	cmp	r2, r3
 8003122:	d201      	bcs.n	8003128 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003124:	2301      	movs	r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003128:	68fb      	ldr	r3, [r7, #12]
	}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	2000029c 	.word	0x2000029c
 8003138:	200002a0 	.word	0x200002a0
 800313c:	200003a4 	.word	0x200003a4

08003140 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d06e      	beq.n	8003234 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003156:	4b3a      	ldr	r3, [pc, #232]	; (8003240 <xTaskPriorityDisinherit+0x100>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	429a      	cmp	r2, r3
 800315e:	d00a      	beq.n	8003176 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	60fb      	str	r3, [r7, #12]
}
 8003172:	bf00      	nop
 8003174:	e7fe      	b.n	8003174 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10a      	bne.n	8003194 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	60bb      	str	r3, [r7, #8]
}
 8003190:	bf00      	nop
 8003192:	e7fe      	b.n	8003192 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003198:	1e5a      	subs	r2, r3, #1
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d044      	beq.n	8003234 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d140      	bne.n	8003234 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	3304      	adds	r3, #4
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe fce0 	bl	8001b7c <uxListRemove>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d115      	bne.n	80031ee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c6:	491f      	ldr	r1, [pc, #124]	; (8003244 <xTaskPriorityDisinherit+0x104>)
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <xTaskPriorityDisinherit+0xae>
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	2201      	movs	r2, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43da      	mvns	r2, r3
 80031e4:	4b18      	ldr	r3, [pc, #96]	; (8003248 <xTaskPriorityDisinherit+0x108>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4013      	ands	r3, r2
 80031ea:	4a17      	ldr	r2, [pc, #92]	; (8003248 <xTaskPriorityDisinherit+0x108>)
 80031ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	f1c3 0207 	rsb	r2, r3, #7
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	2201      	movs	r2, #1
 8003208:	409a      	lsls	r2, r3
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <xTaskPriorityDisinherit+0x108>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <xTaskPriorityDisinherit+0x108>)
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4a08      	ldr	r2, [pc, #32]	; (8003244 <xTaskPriorityDisinherit+0x104>)
 8003222:	441a      	add	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	3304      	adds	r3, #4
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f7fe fc49 	bl	8001ac2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003230:	2301      	movs	r3, #1
 8003232:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003234:	697b      	ldr	r3, [r7, #20]
	}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	2000029c 	.word	0x2000029c
 8003244:	200002a0 	.word	0x200002a0
 8003248:	200003a4 	.word	0x200003a4

0800324c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800325a:	2301      	movs	r3, #1
 800325c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d077      	beq.n	8003354 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	60fb      	str	r3, [r7, #12]
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d902      	bls.n	8003292 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	e002      	b.n	8003298 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d058      	beq.n	8003354 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d153      	bne.n	8003354 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80032ac:	4b2b      	ldr	r3, [pc, #172]	; (800335c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d10a      	bne.n	80032cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	60bb      	str	r3, [r7, #8]
}
 80032c8:	bf00      	nop
 80032ca:	e7fe      	b.n	80032ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db04      	blt.n	80032ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f1c3 0207 	rsb	r2, r3, #7
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	6959      	ldr	r1, [r3, #20]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4a19      	ldr	r2, [pc, #100]	; (8003360 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80032fa:	4413      	add	r3, r2
 80032fc:	4299      	cmp	r1, r3
 80032fe:	d129      	bne.n	8003354 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	3304      	adds	r3, #4
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe fc39 	bl	8001b7c <uxListRemove>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	2201      	movs	r2, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43da      	mvns	r2, r3
 800331c:	4b11      	ldr	r3, [pc, #68]	; (8003364 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4013      	ands	r3, r2
 8003322:	4a10      	ldr	r2, [pc, #64]	; (8003364 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003324:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	2201      	movs	r2, #1
 800332c:	409a      	lsls	r2, r3
 800332e:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	4a0b      	ldr	r2, [pc, #44]	; (8003364 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4a06      	ldr	r2, [pc, #24]	; (8003360 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003346:	441a      	add	r2, r3
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f7fe fbb7 	bl	8001ac2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003354:	bf00      	nop
 8003356:	3720      	adds	r7, #32
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	2000029c 	.word	0x2000029c
 8003360:	200002a0 	.word	0x200002a0
 8003364:	200003a4 	.word	0x200003a4

08003368 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800336c:	4b07      	ldr	r3, [pc, #28]	; (800338c <pvTaskIncrementMutexHeldCount+0x24>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d004      	beq.n	800337e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <pvTaskIncrementMutexHeldCount+0x24>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800337a:	3201      	adds	r2, #1
 800337c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800337e:	4b03      	ldr	r3, [pc, #12]	; (800338c <pvTaskIncrementMutexHeldCount+0x24>)
 8003380:	681b      	ldr	r3, [r3, #0]
	}
 8003382:	4618      	mov	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	2000029c 	.word	0x2000029c

08003390 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <prvAddCurrentTaskToDelayedList+0xb0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033a0:	4b28      	ldr	r3, [pc, #160]	; (8003444 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3304      	adds	r3, #4
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe fbe8 	bl	8001b7c <uxListRemove>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033b2:	4b24      	ldr	r3, [pc, #144]	; (8003444 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	2201      	movs	r2, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43da      	mvns	r2, r3
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4013      	ands	r3, r2
 80033c6:	4a20      	ldr	r2, [pc, #128]	; (8003448 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d0:	d10a      	bne.n	80033e8 <prvAddCurrentTaskToDelayedList+0x58>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d8:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3304      	adds	r3, #4
 80033de:	4619      	mov	r1, r3
 80033e0:	481a      	ldr	r0, [pc, #104]	; (800344c <prvAddCurrentTaskToDelayedList+0xbc>)
 80033e2:	f7fe fb6e 	bl	8001ac2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033e6:	e026      	b.n	8003436 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033f0:	4b14      	ldr	r3, [pc, #80]	; (8003444 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d209      	bcs.n	8003414 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003400:	4b13      	ldr	r3, [pc, #76]	; (8003450 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3304      	adds	r3, #4
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f7fe fb7c 	bl	8001b0a <vListInsert>
}
 8003412:	e010      	b.n	8003436 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3304      	adds	r3, #4
 800341e:	4619      	mov	r1, r3
 8003420:	4610      	mov	r0, r2
 8003422:	f7fe fb72 	bl	8001b0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	d202      	bcs.n	8003436 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003430:	4a09      	ldr	r2, [pc, #36]	; (8003458 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6013      	str	r3, [r2, #0]
}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200003a0 	.word	0x200003a0
 8003444:	2000029c 	.word	0x2000029c
 8003448:	200003a4 	.word	0x200003a4
 800344c:	20000388 	.word	0x20000388
 8003450:	20000358 	.word	0x20000358
 8003454:	20000354 	.word	0x20000354
 8003458:	200003bc 	.word	0x200003bc

0800345c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3b04      	subs	r3, #4
 800346c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3b04      	subs	r3, #4
 800347a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f023 0201 	bic.w	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3b04      	subs	r3, #4
 800348a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800348c:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <pxPortInitialiseStack+0x64>)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3b14      	subs	r3, #20
 8003496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3b04      	subs	r3, #4
 80034a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f06f 0202 	mvn.w	r2, #2
 80034aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3b20      	subs	r3, #32
 80034b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80034b2:	68fb      	ldr	r3, [r7, #12]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	080034c5 	.word	0x080034c5

080034c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <prvTaskExitError+0x54>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034d6:	d00a      	beq.n	80034ee <prvTaskExitError+0x2a>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	60fb      	str	r3, [r7, #12]
}
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <prvTaskExitError+0x28>
	__asm volatile
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	60bb      	str	r3, [r7, #8]
}
 8003500:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003502:	bf00      	nop
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0fc      	beq.n	8003504 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	2000000c 	.word	0x2000000c
 800351c:	00000000 	.word	0x00000000

08003520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <pxCurrentTCBConst2>)
 8003522:	6819      	ldr	r1, [r3, #0]
 8003524:	6808      	ldr	r0, [r1, #0]
 8003526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352a:	f380 8809 	msr	PSP, r0
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f04f 0000 	mov.w	r0, #0
 8003536:	f380 8811 	msr	BASEPRI, r0
 800353a:	4770      	bx	lr
 800353c:	f3af 8000 	nop.w

08003540 <pxCurrentTCBConst2>:
 8003540:	2000029c 	.word	0x2000029c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop

08003548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003548:	4808      	ldr	r0, [pc, #32]	; (800356c <prvPortStartFirstTask+0x24>)
 800354a:	6800      	ldr	r0, [r0, #0]
 800354c:	6800      	ldr	r0, [r0, #0]
 800354e:	f380 8808 	msr	MSP, r0
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f380 8814 	msr	CONTROL, r0
 800355a:	b662      	cpsie	i
 800355c:	b661      	cpsie	f
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	df00      	svc	0
 8003568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800356a:	bf00      	nop
 800356c:	e000ed08 	.word	0xe000ed08

08003570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003576:	4b46      	ldr	r3, [pc, #280]	; (8003690 <xPortStartScheduler+0x120>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a46      	ldr	r2, [pc, #280]	; (8003694 <xPortStartScheduler+0x124>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10a      	bne.n	8003596 <xPortStartScheduler+0x26>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	613b      	str	r3, [r7, #16]
}
 8003592:	bf00      	nop
 8003594:	e7fe      	b.n	8003594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003596:	4b3e      	ldr	r3, [pc, #248]	; (8003690 <xPortStartScheduler+0x120>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a3f      	ldr	r2, [pc, #252]	; (8003698 <xPortStartScheduler+0x128>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d10a      	bne.n	80035b6 <xPortStartScheduler+0x46>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	60fb      	str	r3, [r7, #12]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035b6:	4b39      	ldr	r3, [pc, #228]	; (800369c <xPortStartScheduler+0x12c>)
 80035b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	22ff      	movs	r2, #255	; 0xff
 80035c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <xPortStartScheduler+0x130>)
 80035dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035de:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <xPortStartScheduler+0x134>)
 80035e0:	2207      	movs	r2, #7
 80035e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035e4:	e009      	b.n	80035fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80035e6:	4b2f      	ldr	r3, [pc, #188]	; (80036a4 <xPortStartScheduler+0x134>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	4a2d      	ldr	r2, [pc, #180]	; (80036a4 <xPortStartScheduler+0x134>)
 80035ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b80      	cmp	r3, #128	; 0x80
 8003604:	d0ef      	beq.n	80035e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003606:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <xPortStartScheduler+0x134>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f1c3 0307 	rsb	r3, r3, #7
 800360e:	2b04      	cmp	r3, #4
 8003610:	d00a      	beq.n	8003628 <xPortStartScheduler+0xb8>
	__asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	60bb      	str	r3, [r7, #8]
}
 8003624:	bf00      	nop
 8003626:	e7fe      	b.n	8003626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003628:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <xPortStartScheduler+0x134>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <xPortStartScheduler+0x134>)
 8003630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003632:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <xPortStartScheduler+0x134>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800363a:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <xPortStartScheduler+0x134>)
 800363c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <xPortStartScheduler+0x138>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <xPortStartScheduler+0x138>)
 800364c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <xPortStartScheduler+0x138>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a14      	ldr	r2, [pc, #80]	; (80036a8 <xPortStartScheduler+0x138>)
 8003658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800365c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800365e:	f000 f8dd 	bl	800381c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <xPortStartScheduler+0x13c>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003668:	f000 f8fc 	bl	8003864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800366c:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <xPortStartScheduler+0x140>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a0f      	ldr	r2, [pc, #60]	; (80036b0 <xPortStartScheduler+0x140>)
 8003672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003678:	f7ff ff66 	bl	8003548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800367c:	f7ff fa90 	bl	8002ba0 <vTaskSwitchContext>
	prvTaskExitError();
 8003680:	f7ff ff20 	bl	80034c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	e000ed00 	.word	0xe000ed00
 8003694:	410fc271 	.word	0x410fc271
 8003698:	410fc270 	.word	0x410fc270
 800369c:	e000e400 	.word	0xe000e400
 80036a0:	200003c8 	.word	0x200003c8
 80036a4:	200003cc 	.word	0x200003cc
 80036a8:	e000ed20 	.word	0xe000ed20
 80036ac:	2000000c 	.word	0x2000000c
 80036b0:	e000ef34 	.word	0xe000ef34

080036b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
	__asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	607b      	str	r3, [r7, #4]
}
 80036cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <vPortEnterCritical+0x58>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3301      	adds	r3, #1
 80036d4:	4a0d      	ldr	r2, [pc, #52]	; (800370c <vPortEnterCritical+0x58>)
 80036d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <vPortEnterCritical+0x58>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d10f      	bne.n	8003700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <vPortEnterCritical+0x5c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <vPortEnterCritical+0x4c>
	__asm volatile
 80036ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	603b      	str	r3, [r7, #0]
}
 80036fc:	bf00      	nop
 80036fe:	e7fe      	b.n	80036fe <vPortEnterCritical+0x4a>
	}
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	2000000c 	.word	0x2000000c
 8003710:	e000ed04 	.word	0xe000ed04

08003714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <vPortExitCritical+0x50>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <vPortExitCritical+0x24>
	__asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	607b      	str	r3, [r7, #4]
}
 8003734:	bf00      	nop
 8003736:	e7fe      	b.n	8003736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <vPortExitCritical+0x50>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3b01      	subs	r3, #1
 800373e:	4a09      	ldr	r2, [pc, #36]	; (8003764 <vPortExitCritical+0x50>)
 8003740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003742:	4b08      	ldr	r3, [pc, #32]	; (8003764 <vPortExitCritical+0x50>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d105      	bne.n	8003756 <vPortExitCritical+0x42>
 800374a:	2300      	movs	r3, #0
 800374c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	2000000c 	.word	0x2000000c
	...

08003770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003770:	f3ef 8009 	mrs	r0, PSP
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <pxCurrentTCBConst>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	f01e 0f10 	tst.w	lr, #16
 8003780:	bf08      	it	eq
 8003782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800378a:	6010      	str	r0, [r2, #0]
 800378c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003794:	f380 8811 	msr	BASEPRI, r0
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f7ff f9fe 	bl	8002ba0 <vTaskSwitchContext>
 80037a4:	f04f 0000 	mov.w	r0, #0
 80037a8:	f380 8811 	msr	BASEPRI, r0
 80037ac:	bc09      	pop	{r0, r3}
 80037ae:	6819      	ldr	r1, [r3, #0]
 80037b0:	6808      	ldr	r0, [r1, #0]
 80037b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b6:	f01e 0f10 	tst.w	lr, #16
 80037ba:	bf08      	it	eq
 80037bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80037c0:	f380 8809 	msr	PSP, r0
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	f3af 8000 	nop.w

080037d0 <pxCurrentTCBConst>:
 80037d0:	2000029c 	.word	0x2000029c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop

080037d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
	__asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	607b      	str	r3, [r7, #4]
}
 80037f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037f2:	f7ff f91d 	bl	8002a30 <xTaskIncrementTick>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <xPortSysTickHandler+0x40>)
 80037fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	2300      	movs	r3, #0
 8003806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f383 8811 	msr	BASEPRI, r3
}
 800380e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	e000ed04 	.word	0xe000ed04

0800381c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <vPortSetupTimerInterrupt+0x34>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003826:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <vPortSetupTimerInterrupt+0x38>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <vPortSetupTimerInterrupt+0x3c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0a      	ldr	r2, [pc, #40]	; (800385c <vPortSetupTimerInterrupt+0x40>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	4a09      	ldr	r2, [pc, #36]	; (8003860 <vPortSetupTimerInterrupt+0x44>)
 800383a:	3b01      	subs	r3, #1
 800383c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800383e:	4b04      	ldr	r3, [pc, #16]	; (8003850 <vPortSetupTimerInterrupt+0x34>)
 8003840:	2207      	movs	r2, #7
 8003842:	601a      	str	r2, [r3, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	e000e010 	.word	0xe000e010
 8003854:	e000e018 	.word	0xe000e018
 8003858:	20000000 	.word	0x20000000
 800385c:	51eb851f 	.word	0x51eb851f
 8003860:	e000e014 	.word	0xe000e014

08003864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003874 <vPortEnableVFP+0x10>
 8003868:	6801      	ldr	r1, [r0, #0]
 800386a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800386e:	6001      	str	r1, [r0, #0]
 8003870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003872:	bf00      	nop
 8003874:	e000ed88 	.word	0xe000ed88

08003878 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8003884:	f7ff f82a 	bl	80028dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8003888:	4b3e      	ldr	r3, [pc, #248]	; (8003984 <pvPortMalloc+0x10c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8003890:	f000 f8ba 	bl	8003a08 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8003894:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <pvPortMalloc+0x10c>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00e      	beq.n	80038be <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 80038a0:	2308      	movs	r3, #8
 80038a2:	461a      	mov	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4413      	add	r3, r2
 80038a8:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d004      	beq.n	80038be <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f023 0307 	bic.w	r3, r3, #7
 80038ba:	3308      	adds	r3, #8
 80038bc:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d057      	beq.n	8003974 <pvPortMalloc+0xfc>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f643 32f7 	movw	r2, #15351	; 0x3bf7
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d852      	bhi.n	8003974 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 80038ce:	4b2e      	ldr	r3, [pc, #184]	; (8003988 <pvPortMalloc+0x110>)
 80038d0:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 80038d2:	4b2d      	ldr	r3, [pc, #180]	; (8003988 <pvPortMalloc+0x110>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038d8:	e004      	b.n	80038e4 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d903      	bls.n	80038f6 <pvPortMalloc+0x7e>
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f1      	bne.n	80038da <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4a24      	ldr	r2, [pc, #144]	; (800398c <pvPortMalloc+0x114>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d03a      	beq.n	8003974 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2208      	movs	r2, #8
 8003904:	4413      	add	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2208      	movs	r2, #8
 800391a:	0052      	lsls	r2, r2, #1
 800391c:	4293      	cmp	r3, r2
 800391e:	d922      	bls.n	8003966 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4413      	add	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	1ad2      	subs	r2, r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <pvPortMalloc+0x110>)
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	e002      	b.n	800394c <pvPortMalloc+0xd4>
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	429a      	cmp	r2, r3
 8003956:	d8f6      	bhi.n	8003946 <pvPortMalloc+0xce>
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <pvPortMalloc+0x118>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	4a07      	ldr	r2, [pc, #28]	; (8003990 <pvPortMalloc+0x118>)
 8003972:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003974:	f7fe ffc0 	bl	80028f8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8003978:	697b      	ldr	r3, [r7, #20]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20003fe0 	.word	0x20003fe0
 8003988:	20003fd0 	.word	0x20003fd0
 800398c:	20003fd8 	.word	0x20003fd8
 8003990:	20000010 	.word	0x20000010

08003994 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d027      	beq.n	80039f6 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 80039a6:	2308      	movs	r3, #8
 80039a8:	425b      	negs	r3, r3
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4413      	add	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 80039b4:	f7fe ff92 	bl	80028dc <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <vPortFree+0x6c>)
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	e002      	b.n	80039ca <vPortFree+0x36>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d8f6      	bhi.n	80039c4 <vPortFree+0x30>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <vPortFree+0x70>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4413      	add	r3, r2
 80039ee:	4a05      	ldr	r2, [pc, #20]	; (8003a04 <vPortFree+0x70>)
 80039f0:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 80039f2:	f7fe ff81 	bl	80028f8 <xTaskResumeAll>
	}
}
 80039f6:	bf00      	nop
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20003fd0 	.word	0x20003fd0
 8003a04:	20000010 	.word	0x20000010

08003a08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <prvHeapInit+0x48>)
 8003a10:	f023 0307 	bic.w	r3, r3, #7
 8003a14:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a16:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <prvHeapInit+0x4c>)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a1c:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <prvHeapInit+0x4c>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <prvHeapInit+0x50>)
 8003a24:	f643 32f8 	movw	r2, #15352	; 0x3bf8
 8003a28:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <prvHeapInit+0x50>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	f643 32f8 	movw	r2, #15352	; 0x3bf8
 8003a3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	4a06      	ldr	r2, [pc, #24]	; (8003a58 <prvHeapInit+0x50>)
 8003a40:	601a      	str	r2, [r3, #0]
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	200003d8 	.word	0x200003d8
 8003a54:	20003fd0 	.word	0x20003fd0
 8003a58:	20003fd8 	.word	0x20003fd8

08003a5c <__libc_init_array>:
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	4d0d      	ldr	r5, [pc, #52]	; (8003a94 <__libc_init_array+0x38>)
 8003a60:	4c0d      	ldr	r4, [pc, #52]	; (8003a98 <__libc_init_array+0x3c>)
 8003a62:	1b64      	subs	r4, r4, r5
 8003a64:	10a4      	asrs	r4, r4, #2
 8003a66:	2600      	movs	r6, #0
 8003a68:	42a6      	cmp	r6, r4
 8003a6a:	d109      	bne.n	8003a80 <__libc_init_array+0x24>
 8003a6c:	4d0b      	ldr	r5, [pc, #44]	; (8003a9c <__libc_init_array+0x40>)
 8003a6e:	4c0c      	ldr	r4, [pc, #48]	; (8003aa0 <__libc_init_array+0x44>)
 8003a70:	f000 f82e 	bl	8003ad0 <_init>
 8003a74:	1b64      	subs	r4, r4, r5
 8003a76:	10a4      	asrs	r4, r4, #2
 8003a78:	2600      	movs	r6, #0
 8003a7a:	42a6      	cmp	r6, r4
 8003a7c:	d105      	bne.n	8003a8a <__libc_init_array+0x2e>
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a84:	4798      	blx	r3
 8003a86:	3601      	adds	r6, #1
 8003a88:	e7ee      	b.n	8003a68 <__libc_init_array+0xc>
 8003a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a8e:	4798      	blx	r3
 8003a90:	3601      	adds	r6, #1
 8003a92:	e7f2      	b.n	8003a7a <__libc_init_array+0x1e>
 8003a94:	08003b28 	.word	0x08003b28
 8003a98:	08003b28 	.word	0x08003b28
 8003a9c:	08003b28 	.word	0x08003b28
 8003aa0:	08003b2c 	.word	0x08003b2c

08003aa4 <memcpy>:
 8003aa4:	440a      	add	r2, r1
 8003aa6:	4291      	cmp	r1, r2
 8003aa8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003aac:	d100      	bne.n	8003ab0 <memcpy+0xc>
 8003aae:	4770      	bx	lr
 8003ab0:	b510      	push	{r4, lr}
 8003ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003aba:	4291      	cmp	r1, r2
 8003abc:	d1f9      	bne.n	8003ab2 <memcpy+0xe>
 8003abe:	bd10      	pop	{r4, pc}

08003ac0 <memset>:
 8003ac0:	4402      	add	r2, r0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d100      	bne.n	8003aca <memset+0xa>
 8003ac8:	4770      	bx	lr
 8003aca:	f803 1b01 	strb.w	r1, [r3], #1
 8003ace:	e7f9      	b.n	8003ac4 <memset+0x4>

08003ad0 <_init>:
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	bf00      	nop
 8003ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad6:	bc08      	pop	{r3}
 8003ad8:	469e      	mov	lr, r3
 8003ada:	4770      	bx	lr

08003adc <_fini>:
 8003adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ade:	bf00      	nop
 8003ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae2:	bc08      	pop	{r3}
 8003ae4:	469e      	mov	lr, r3
 8003ae6:	4770      	bx	lr
